<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-every" covers-40="PR152 PR640">
   <description>Tests for the fn:every() function (4.0)</description>
   
   <!-- Tests are derived from the tests on quantified expressions -->
   
   <dependency type="spec" value="XP40+ XQ40+"/>
   
   <test-case name="every-1">
      <description> Call on fn:every and addition expression. Returns false </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every((1, 2), function($x){$x + $x = 3})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="every-2">
      <description> Call on fn:every and addition expression. Returns true </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every((1, 2), function($x){$x + $x = 2})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="every-3">
      <description> Call on fn:every and a subtraction expression. Returns false </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every((1, 2), function($x){$x - 2 = 2})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-4">
      <description>every() applied to empty sequence</description>
      <created by="Michael Kay" on="2020-11-29"/>
      <test>every(year-from-date(current-date()) to 0, is-NaN#1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-5">
      <description>every() with function returning non-boolean</description>
      <created by="Michael Kay" on="2020-11-29"/>
      <test>every(1 to 10, function($x){$x + 1})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="every-6">
      <description>every() with function having wrong arity</description>
      <created by="Michael Kay" on="2020-11-29"/>
      <test>every(10 to 20, function($x, $y){$x + 1})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="every-7">
      <description>every() with function accepting wrong type</description>
      <created by="Michael Kay" on="2020-11-29"/>
      <test>every(10 to 20, function($x){name($x) = 'alpha'})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="every-16">
      <description> Call on fn:every and use of logical expression (and). </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every((1, 2), function($x){ $x = 1 and ($x +1) = 2})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="every-17">
      <description> Call on fn:every and and use of string data. </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every(("A","B","C"), function($x){ $x = "A" })</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="every-18">
      <description> Call on fn:every with multiple variables and addition expression </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every((1,2,3), function($x){every((4,5,6), function($y){$x + $y = 5})})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-19">
      <description> Call on fn:every and and use of string data. </description>
      <created by="Michael Kay after Carmelo Montanez" on="2020-11-29"/>
      <test>every(("A","B","C"), function($x){ $x instance of xs:string })</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-20">
      <description>fn:every#1, empty sequence</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <test>every(())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-21">
      <description>fn:every#1, returning true</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <test>every((1=1, 2=2, 3=3))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-22">
      <description>fn:every#1, returning false</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <test>every((1=1, 2=5, 3=3))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-23">
      <description>fn:every#1, computing EBV</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <modified by="Christian Gruen" on="2024-03-06"/>
      <test>every((1=1, 2=2, 17))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-24">
      <description>fn:every#1, returning false or error</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <modified by="Christian Gruen" on="2024-03-06"/>
      <test>every((1=1, 2=3, current-date()))</test>
      <result>
         <any-of>
            <assert-false/>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="every-25">
      <description>fn:every#2, function requires coercion, success case</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <test>every(1 to 5, function($x){$x gt 0})</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-26">
      <description>fn:every#2, function requires coercion, failure case</description>
      <created by="Michael Kay" on="2022-09-13"/>
      <test>every((true(), 'zizzy'), function($x){$x})</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>
   
   <test-case name="every-27" covers-40="PR254">
      <description>fn:every#2, arity-0 callback</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every(1 to 10, true#0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-28" covers-40="PR254">
      <description>fn:every#2, arity-0 callback, empty argument</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every((), true#0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-29" covers-40="PR254">
      <description>fn:every#2, arity-0 callback, empty argument</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every((), false#0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-30" covers-40="PR254">
      <description>fn:every#2, arity-0 callback, empty argument</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every(1 to 10, false#0)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-31" covers-40="PR828">
      <description>fn:every#2, arity-2 callback</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every(1 to 10, fn($it, $pos){$it eq $pos})</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-32">
      <description>fn:every#2, arity-2 callback</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every((1 to 10, 12), fn($it, $pos){$it eq $pos})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-33">
      <description>fn:every#2, arity-2 callback, empty sequence</description>
      <created by="Michael Kay" on="2023-11-30"/>
      <test>every((), fn($it, $pos){$it eq $pos})</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-34" covers-40="PR1053">
      <description>every#1, EBV is computed - issue 1047</description>
      <created by="Michael Kay" on="2024-02-28"/>
      <modified by="Christian Gruen" on="2024-03-06"/>
      <test>every(([true()], [true()], [false()]))</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>
   
   <test-case name="every-35" covers-40="PR1053">
      <description>every#1, EBV is computed - issue 1047</description>
      <created by="Michael Kay" on="2024-02-28"/>
      <modified by="Christian Gruen" on="2024-03-06"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[every((<a>true</a>, <a>true</a>, <a>true</a>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-36" covers-40="PR1053">
      <description>every#1, EBV is computed - issue 1047</description>
      <created by="Michael Kay" on="2024-02-28"/>
      <modified by="Christian Gruen" on="2024-03-06"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[every((<a>1</a>, <a>1</a>, <a>0</a>))]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-37" covers-40="PR1053">
      <description>every#2, result is atomized and converted to boolean</description>
      <created by="Michael Kay" on="2024-02-28"/>
      <test>every((1, 1, 1), xs:untypedAtomic#1)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   <test-case name="every-38" covers-40="PR1053">
      <description>every#2, result is atomized and converted to boolean</description>
      <created by="Michael Kay" on="2024-02-28"/>
      <dependency type="spec" value="XQ40+"/>
      <test>every((0, 1, 0), fn{element a{.}})</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   <test-case name="every-39" covers-40="PR1128">
      <description>Predicate returns empty sequence</description>
      <created by="Michael Kay" on="2024-05-05"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[every(parse-xml('<doc><a id="1"/><b/><c/></doc>'), fn{@id eq '1'})]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   
   
   <test-case name="every-empty" covers-40="PR901">
      <description>Optional argument: empty sequence</description>
      <created by="Christian Gruen" on="2024-01-16"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>every((1 to 6) ! boolean(.), ())</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

</test-set>
