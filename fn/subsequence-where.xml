<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-subsequence-where"  covers-40="PR940">
   <description>Tests for the fn:subsequence-where function (4.0 proposal)</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-11/"
         idref="func-subsequence-where"/>
         
    <dependency type="spec" value="XP40+ XQ40+"/>  

   <test-case name="subsequence-after-001">
       <description>Basic example</description>
      <created by="Michael Kay" on="2019-06-09"/>
      <test>
          let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
          $subsequence-after(1 to 29, function($x){$x=10})</test>
      <result>
          <assert-deep-eq>11 to 29</assert-deep-eq>
      </result>
   </test-case>
    
    <test-case name="subsequence-after-002">
        <description>No match</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){$x=100})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-003">
        <description>Match on first</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){true()})</test>
        <result>
            <assert-deep-eq>2 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-004">
        <description>Empty input</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after((), function($x){$x = 3})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-005">
        <description>Match at end of sequence</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){$x eq 29})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-006">
        <description>Map as argument</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 5, map{1:false(), 2:false(), 3:true(), 4:true(), 5:true()})</test>
        <result>
            <assert-deep-eq>4 to 5</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-007">
        <description>Sequence of nodes</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            let $nodes := document{<x><a/><b/><c/><d/><e/></x>}
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after($nodes/x/*, function($node){exists($node[self::c])})!local-name()
            ]]></test>
        <result>
            <assert-deep-eq>'d', 'e'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-008">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, true#0)</test>
        <result>
            <assert-deep-eq>2 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-009">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, false#0)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-010">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, op('eq'))</test>
        <result>
            <assert-deep-eq>2 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-011">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, op('ne'))</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-012">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after((1 to 10, 12 to 20), op('ne'))</test>
        <result>
            <assert-deep-eq>13 to 20</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-013">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after((1 to 10, 12 to 20), fn($it, $pos){$pos mod 2 ne $it mod 2})</test>
        <result>
            <assert-deep-eq>13 to 20</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-901">
        <description>Test use of EBV is disallowed</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 100, function($x){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-902">
        <description>Wrong arity of function</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 100, function($x, $y){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-after-903">
        <description>Error evaluating callback function</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-after := fn($in, $pred){subsequence-where($in, $pred) => tail()} return
            $subsequence-after(("a", "b", "c"), function($x, $y){$x gt $y})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-001">
        <description>Basic example</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){$x=10})</test>
        <result>
            <assert-deep-eq>1 to 9</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-002">
        <description>No match</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){$x=100})</test>
        <result>
            <assert-deep-eq>1 to 28</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-003">
        <description>Match on first</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){true()})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-004">
        <description>Empty input</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before((), function($x){$x = 3})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-005">
        <description>Match at end of sequence</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){$x eq 29})</test>
        <result>
            <assert-deep-eq>1 to 28</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-006">
        <description>Map as argument</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 5, map{1:false(), 2:false(), 3:true(), 4:true(), 5:true()})</test>
        <result>
            <assert-deep-eq>1 to 2</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-007">
        <description>Sequence of nodes</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            let $nodes := document{<x><a/><b/><c/><d/><e/></x>}
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before($nodes/x/*, function($node){exists($node[self::c])})!local-name()
            ]]></test>
        <result>
            <assert-deep-eq>'a', 'b'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-008">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, true#0)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-009">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, false#0)</test>
        <result>
            <assert-deep-eq>1 to 28</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-010">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, op('eq'))</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-011">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, op('ne'))</test>
        <result>
            <assert-deep-eq>1 to 28</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-012">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before((1 to 10, 12 to 20), op('ne'))</test>
        <result>
            <assert-deep-eq>1 to 10</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-013">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before((1 to 10, 12 to 20), fn($it, $pos){$pos mod 2 ne $it mod 2})</test>
        <result>
            <assert-deep-eq>1 to 10</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-901">
        <description>Test use of EBV is disallowed</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 100, function($x){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-902">
        <description>Wrong arity of function</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 100, function($x, $y, $z){$x eq $z})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-before-903">
        <description>Error evaluating callback function</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>
            let $subsequence-before := fn($in, $pred){subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(("a", "b", "c"), function($x, $y){$x gt $y})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-001">
        <description>Basic example</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, function($x){$x=10})</test>
        <result>
            <assert-deep-eq>10 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-002">
        <description>No match</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, function($x){$x=100})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-003">
        <description>Match on first</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, function($x){true()})</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-004">
        <description>Empty input</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where((), function($x){$x = 3})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-005">
        <description>Match at end of sequence</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, function($x){$x eq 29})</test>
        <result>
            <assert-eq>29</assert-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-006">
        <description>Map as argument</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 5, map{1:false(), 2:false(), 3:true(), 4:true(), 5:true()})</test>
        <result>
            <assert-deep-eq>3 to 5</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-007">
        <description>Sequence of nodes</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            let $nodes := document{<x><a/><b/><c/><d/><e/></x>}
            return subsequence-where($nodes/x/*, function($node){exists($node[self::c])})!local-name()
            ]]></test>
        <result>
            <assert-deep-eq>'c', 'd', 'e'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-008">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, true#0)</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-009">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, false#0)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-010">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, op('eq'))</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-011">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, op('ne'))</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-012">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where((1 to 10, 12 to 20), op('ne'))</test>
        <result>
            <assert-deep-eq>12 to 20</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-013">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where((1 to 10, 12 to 20), fn($it, $pos){$pos mod 2 ne $it mod 2})</test>
        <result>
            <assert-deep-eq>12 to 20</assert-deep-eq>
        </result>
    </test-case>
    
    
    <test-case name="subsequence-starting-where-101">
        <description>Empty sequence, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where((), boolean#1)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-102">
        <description>Single integer, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where(0, boolean#1)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-103">
        <description>Single integer, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where(1, boolean#1)</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-104">
        <description>Integers, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where((0, 1, 2, 3, 0), boolean#1)</test>
        <result>
            <assert-deep-eq>1, 2, 3, 0</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-105">
        <description>Integer range, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>subsequence-where(1 to 3, not#1)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-106">
        <description>Integer range, function item</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where(1 to 3, function($n) { $n mod 2 = 0 })</test>
        <result>
            <assert-deep-eq>2, 3</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-107">
        <description>Partial function application</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where(('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'), contains(?, 'z'))</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    <test-case name="subsequence-starting-where-108">
        <description>Partial function application</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <modified by="Michael Kay" on="2023-02-28" change="function name"/>
        <test>subsequence-where(('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'), starts-with(?, 'Nov'))</test>
        <result>
            <assert-deep-eq>'November', 'December'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-901">
        <description>Test use of EBV is disallowed</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 100, function($x){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-902">
        <description>Wrong arity of function</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 100, function($x, $y){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-starting-where-903">
        <description>Error evaluating callback function</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(("a", "b", "c"), function($x, $y){$x gt $y})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-001">
        <description>Basic example</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, to:=function($x){$x=10})</test>
        <result>
            <assert-deep-eq>1 to 10</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-002">
        <description>No match</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, to:=function($x){$x=100})</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-003">
        <description>Match on first</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, to:=function($x){true()})</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-004">
        <description>Empty input</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where((), to:=function($x){$x = 3})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-005">
        <description>Match at end of sequence</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 29, to:=function($x){$x eq 29})</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-006">
        <description>Map as argument</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 5, to:=map{1:false(), 2:false(), 3:true(), 4:true(), 5:true()})</test>
        <result>
            <assert-deep-eq>1 to 3</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-007">
        <description>Sequence of nodes</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <dependency type="spec" value="XQ31+"/>
        <test><![CDATA[
            let $nodes := document{<x><a/><b/><c/><d/><e/></x>}
            return subsequence-where($nodes/x/*, to:=function($node){exists($node[self::c])})!local-name()
            ]]></test>
        <result>
            <assert-deep-eq>'a', 'b', 'c'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-008">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, to:=true#0)</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-009">
        <description>Zero-arity callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, to:=false#0)</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-010">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, to:=op('eq'))</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-011">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(1 to 29, to:=op('ne'))</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-012">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where((1 to 10, 12 to 20), to:=op('ne'))</test>
        <result>
            <assert-deep-eq>1 to 10, 12</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-013">
        <description>Arity 2 callback</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where((1 to 10, 12 to 20), to:=fn($it, $pos){$pos mod 2 ne $it mod 2})</test>
        <result>
            <assert-deep-eq>1 to 10, 12</assert-deep-eq>
        </result>
    </test-case>
    
    
    <test-case name="subsequence-ending-where-101">
        <description>Empty sequence, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where((), to:=boolean#1)</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-102">
        <description>Single integer, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(0, to:=boolean#1)</test>
        <result>
            <assert-eq>0</assert-eq>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-103">
        <description>Single integer, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(1, to:=boolean#1)</test>
        <result>
            <assert-eq>1</assert-eq>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-104">
        <description>Integers, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where((0, 1, 2, 3, 0), to:=boolean#1)</test>
        <result>
            <assert-deep-eq>0, 1</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-105">
        <description>Integer range, named function reference</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(1 to 3, to:=not#1)</test>
        <result>
            <assert-deep-eq>1, 2, 3</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-106">
        <description>Integer range, function item</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(1 to 3, to:=function($n) { $n mod 2 = 0 })</test>
        <result>
            <assert-deep-eq>1, 2</assert-deep-eq>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-107">
        <description>Partial function application</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(('January', 'February', 'March', 'April', 'May', 'June', 'July', 
            'August', 'September', 'October', 'November', 'December'), to:=contains(?, ''))</test>
        <result>
            <assert-string-value>January</assert-string-value>
        </result>
    </test-case>
    <test-case name="subsequence-ending-where-108">
        <description>Partial function application</description>
        <created by="Christian Gruen" on="2022-08-10"/>
        <test>fn:subsequence-where(('January', 'February', 'March', 'April', 'May', 'June', 'July', 
            'August', 'September', 'October', 'November', 'December'), to:=starts-with(?, 'Feb'))</test>
        <result>
            <assert-deep-eq>'January', 'February'</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-901">
        <description>Test use of EBV is disallowed</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 100, to:=function($x){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-902">
        <description>Wrong arity of function</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <test>subsequence-where(1 to 100, to:=function($x, $y){$x - 1})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-ending-where-903">
        <description>Error evaluating callback function</description>
        <created by="Michael Kay" on="2023-11-30"/>
        <test>subsequence-where(("a", "b", "c"), to:=function($x, $y){$x gt $y})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="subsequence-between-001">
        <description>Basic example with both from and to</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <test>subsequence-where(1 to 29, from:= function($x){$x=5}, to:=function($x){$x=9})</test>
        <result>
            <assert-deep-eq>5 to 9</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-between-002">
        <description>Basic example with both from and to, end condition unmatched</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <test>subsequence-where(1 to 29, from:= function($x){$x=10}, to:=function($x){$x=7})</test>
        <result>
            <assert-deep-eq>10 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-between-003" covers-40="PR254">
        <description>Zero arity for start and end functions</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <test>subsequence-where(1 to 29, from:= true#0, to:=false#0)</test>
        <result>
            <assert-deep-eq>1 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-between-004" covers-40="PR828">
        <description>Arity=2 for start and end functions</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <test>subsequence-where(1 to 29, from:= fn($it,$pos){$pos=3}, to:=fn($it,$pos){$pos=8})</test>
        <result>
            <assert-deep-eq>3 to 8</assert-deep-eq>
        </result>
    </test-case>
    
    
    
    
    <!-- Following tests use the logic from the spec using fn:slice, to show this is equivalent -->
    
    <test-case name="subsequence-where-mockup-001">
        <description>Basic example - after</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>
            import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-after := fn($in, $pred){mock:subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){$x=10})</test>
        <result>
            <assert-deep-eq>11 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-002">
        <description>No match</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-after := fn($in, $pred){mock:subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){$x=100})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-003">
        <description>Match on first</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-after := fn($in, $pred){mock:subsequence-where($in, $pred) => tail()} return
            $subsequence-after(1 to 29, function($x){true()})</test>
        <result>
            <assert-deep-eq>2 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-004">
        <description>Basic example - before</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-before := fn($in, $pred){mock:subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){$x=10})</test>
        <result>
            <assert-deep-eq>1 to 9</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-005">
        <description>No match - before</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-before := fn($in, $pred){mock:subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before(1 to 29, function($x){$x=100})</test>
        <result>
            <assert-deep-eq>1 to 28</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-006">
        <description>Empty input</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            let $subsequence-before := fn($in, $pred){mock:subsequence-where($in, to:=$pred) => trunk()} return
            $subsequence-before((), function($x){$x = 3})</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-007">
        <description>Basic example - starting where</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";mock:subsequence-where(1 to 29, function($x){$x=10})</test>
        <result>
            <assert-deep-eq>10 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-008">
        <description>Basic example - ending where</description>
        <created by="Michael Kay" on="2019-06-09"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";mock:subsequence-where(1 to 29, to:=function($x){$x=10})</test>
        <result>
            <assert-deep-eq>1 to 10</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-009">
        <description>Basic example with both from and to</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            mock:subsequence-where(1 to 29, from:= function($x){$x=5} to:=function($x){$x=9})</test>
        <result>
            <assert-deep-eq>5 to 9</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="subsequence-where-mockup-010">
        <description>Basic example with both from and to, end condition unmatched</description>
        <created by="Michael Kay" on="2024-02-21"/>
        <module uri="http://www.w3.org/QT3/subsequence-where/mock" file="subsequence-where/mock.xq"/>
        <test>import module namespace mock="http://www.w3.org/QT3/subsequence-where/mock";
            mock:subsequence-where(1 to 29, from:= function($x){$x=10} to:=function($x){$x=7})</test>
        <result>
            <assert-deep-eq>10 to 29</assert-deep-eq>
        </result>
    </test-case>
    
    
 
    

  
</test-set>