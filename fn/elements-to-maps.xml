<?xml version="1.0" encoding="UTF-8"?>

<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-elements-to-maps" covers-40="PR1575">
   <description>Tests for the elements-to-maps() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-elements-to-maps"/>
   
   <environment name="specimen">
      <schema uri="http://www.w3.org/XQueryTest/specimen" file="elements-to-maps/specimen.xsd" xsd-version="1.1">
         <description>A Schema with some nillable elements</description>
         <created by="Michael Kay" on="2023-05-31"/>
      </schema>
   </environment>
   
   <dependency type="spec" value="XP40+ XQ40+"/>

   <test-case name="elements-to-maps-001">
      <description> Empty sequence </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>elements-to-maps(())</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
  
   <!--
   
   
   <test-case name="elements-to-maps-104">
      <description> Text node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[elements-to-maps(parse-xml("<a>jigsaw</a>")//text())]]></test>
      <result>
         <assert-deep-eq>{"#text":"jigsaw"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-105">
      <description> Comment node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[elements-to-maps(parse-xml("<a><!-\-remarkable-\-></a>")//comment())]]></test>
      <result>
         <assert-deep-eq>{"#comment":"remarkable"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-106">
      <description> PI node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[elements-to-maps(parse-xml("<a><?go man go?></a>")//processing-instruction())]]></test>
      <result>
         <assert-deep-eq>{"#processing-instruction":{"#name":"go","#data":"man go"}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-107">
      <description> attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[elements-to-maps(parse-xml("<a code='835'/>")//@*)]]></test>
      <result>
         <assert-deep-eq>{"@code":"835"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-108">
      <description> namespaced attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml("<a xml:id='thing'/>")//@*)
      ]]></test>
      <result>
         <assert-deep-eq>{"@xml:id":"thing"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-109">
      <description> namespaced attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml("<a p:id='thing' xmlns:p='http://p.com/'/>")//@*)
      ]]></test>
      <result>
         <assert-deep-eq>{"@Q{http://p.com/}id":"thing"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-110">
      <description> numeric typed attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="atomic"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
         import schema namespace atomic="http://www.w3.org/XQueryTest"; 
         elements-to-maps(//atomic:decimal/@atomic:attr)
      </test>
      <result>
         <assert-deep-eq>{"@Q{http://www.w3.org/XQueryTest}attr":12678967.543233}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-111">
      <description> list typed attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="atomic"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
         import schema namespace atomic="http://www.w3.org/XQueryTest"; 
         elements-to-maps(//atomic:idrefs/@atomic:attr)
      </test>
      <result>
         <assert-deep-eq>{"@Q{http://www.w3.org/XQueryTest}attr":["id1","id2"]}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-112">
      <description> namespace node (namespace axis not available in XQuery) </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XP40+"/>
      <test><![CDATA[
         elements-to-maps(parse-xml("<a p:id='thing' xmlns:p='http://p.com/'/>")//namespace::p)
      ]]></test>
      <result>
         <assert-deep-eq>{"#namespace":{"#prefix":"p","#uri":"http://p.com/"}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-112a">
      <description> namespace node (can be constructed in XQuery) </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         elements-to-maps(namespace{"p"}{"http://p.com/"})
      ]]></test>
      <result>
         <assert-deep-eq>{"#namespace":{"#prefix":"p","#uri":"http://p.com/"}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-113">
      <description> document node - URI</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(doc('abs/e1.xml'))
      ]]></test>
      <result>
         <assert-deep-eq>{"#document":[{"e":"1"}]}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-114">
      <description> document node - content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a/>'))
      ]]></test>
      <result>
         <assert-deep-eq>{"#document":[{"a":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-115">
      <description> document node - comments and whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<!-\-start-\-> <a/> <!-\-end-\->'))
      ]]></test>
      <result>
         <assert-deep-eq>{"#document":[{"#comment":"start"},{"a":""},{"#comment":"end"}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-116">
      <description> document node - ill-formed - contains text node</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         elements-to-maps(document{text{"ill-formed"}})
      ]]></test>
      <result>
         <assert-deep-eq>{"#document":["ill-formed"]}</assert-deep-eq> 
      </result>
   </test-case>-->
   
   <test-case name="elements-to-maps-200">
      <description> element node - implicit - empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a/>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":""}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-201">
      <description> element node - implicit - empty - whitespace significant</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":" "}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-202">
      <description> element node - implicit - empty - default namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xmlns="http://one.com/"/>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":""}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-203">
      <description> element node - implicit - empty - non-default namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<p:a xmlns:p="http://one.com/"/>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":""}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-204">
      <description> element node - implicit - nested</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-205">
      <description> element node - implicit - nested same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xmlns="http://one.com/"><b/></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":{"b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-206">
      <description> element node - implicit - nested same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<p:a xmlns:p="http://one.com/"><p:b/></p:a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":{"b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-207">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xmlns="http://one.com/"><b xmlns=""/></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":{"Q{}b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-208">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<p:a xmlns:p="http://one.com/"><b/></p:a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":{"Q{}b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-209">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><p:b xmlns:p="http://two.com/"/></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"Q{http://two.com/}b":""}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-210">
      <description> element node - implicit - empty-plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a x="1" y="2"/>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-deep-eq>{"a":{"@x":"1","@y":"2"}}</assert-deep-eq> 
            <assert-deep-eq>{"a":{"@y":"2","@x":"1"}}</assert-deep-eq>  
         </any-of>           
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-211">
      <description> element node - implicit - simple</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a>babel</a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":"babel"}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-212">
      <description> element node - implicit - simple - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":" "}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-220">
      <description> element node - implicit - simple plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz">babel</a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"zz","#content":"babel"}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-221">
      <description> element node - implicit - simple plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz" x="22">babel</a>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-deep-eq>{"a":{"@id":"zz","@x":"22","#content":"babel"}}</assert-deep-eq> 
            <assert-deep-eq>{"a":{"@x":"22","@id":"zz","#content":"babel"}}</assert-deep-eq> 
         </any-of>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-222">
      <description> element node - implicit - simple plus - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz" x="22"> </a>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-deep-eq>{"a":{"@id":"zz","@x":"22","#content":" "}}</assert-deep-eq> 
            <assert-deep-eq>{"a":{"@x":"22","@id":"zz","#content":" "}}</assert-deep-eq> 
         </any-of>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-223">
      <description> element node - implicit - simple plus - nested</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="aa"><b id="bb">bertie</b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"aa","b":{"@id":"bb","#content":"bertie"}}}</assert-deep-eq>  
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-224">
      <description> element node - implicit - simple plus - nested, different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="aa"><b id="bb" xmlns="http://bertie.com/">bertie</b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"aa","Q{http://bertie.com/}b":{"@id":"bb","#content":"bertie"}}}</assert-deep-eq>  
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-225">
      <description> element node - implicit - simple plus - attribute in namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz" p:x="22" xmlns:p="http://p.com/">babel</a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"zz","@Q{http://p.com/}x":"22","#content":"babel"}}</assert-deep-eq>  
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-230">
      <description> element node - implicit - list-plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz"><b/><b/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"zz","b":["",""]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-231">
      <description> element node - implicit - list-plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"><b>xxx</b><b>yyy</b><b>zzz</b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","b":["xxx","yyy","zzz"]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-232">
      <description> element node - implicit - list-plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"><b><p/></b><b><q/></b><b><r/></b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-233">
      <description> element node - implicit - list-plus - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"><b> <p/> </b><b> <q/> </b><b> <r/> </b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-234">
      <description> element node - implicit - list-plus - same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xmlns="http://one.com/" xml:id="zz"><b><p/></b><b><q/></b><b><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://one.com/}a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-235">
      <description> element node - implicit - list-plus - different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"><b xmlns="http://one.com/"><p/></b><b xmlns="http://one.com/"><q/></b><b xmlns="http://one.com/"><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","Q{http://one.com/}b":[{"p":""},{"q":""},{"r":""}]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-236">
      <description> element node - implicit - list-plus - different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xmlns="http://zero.com/" xml:id="zz"><b xmlns="http://one.com/"><p/></b><b xmlns="http://one.com/"><q/></b><b xmlns="http://one.com/"><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://zero.com/}a":{"@xml:id":"zz","Q{http://one.com/}b":[{"p":""},{"q":""},{"r":""}]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-240">
      <description> element node - implicit - record</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"><p/><q/><r/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","p":"","q":"","r":""}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-241">
      <description> element node - implicit - record - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"> <p/> <q/> <r/> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","p":"","q":"","r":""}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-242">
      <description> element node - implicit - record - namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a xml:id="zz"> <p/> <z:q xmlns:z="http://z.com/" z:id="cow"/> <r/> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@xml:id":"zz","p":"","Q{http://z.com/}q":{"@Q{http://z.com/}id":"cow"},"r":""}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-250">
      <description> element node - implicit - sequence</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><head/><p/><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"head":""},{"p":""},{"p":""},{"p":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-251">
      <description> element node - implicit - sequence - with attributes and content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a diff="chg"><head/><p>Intro</p><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@diff":"chg"},{"head":""},{"p":"Intro"},{"p":""},{"p":""}]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-252">
      <description> element node - implicit - sequence - with whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a diff="chg"> <head/> <p>Intro</p> <p/> <p/> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@diff":"chg"},{"head":""},{"p":"Intro"},{"p":""},{"p":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-260">
      <description> element node - implicit - mixed</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><head/><p/><p/><p/>The end</a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"head":""},{"p":""},{"p":""},{"p":""},"The end"]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-261">
      <description> element node - implicit - mixed - with attributes and content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a diff="chg"><head/>The beginning<p>Intro</p><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@diff":"chg"},{"head":""},"The beginning",{"p":"Intro"},{"p":""},{"p":""}]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-262">
      <description> element node - implicit - mixed - with whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a diff="chg"> <head/> <p>Intro</p> The middle <p/> <p/> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@diff":"chg"}," ",{"head":""}," ",{"p":"Intro"}," The middle ",{"p":""}," ",{"p":""}," "]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-263">
      <description> element node - implicit - mixed - with comment</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><head>Title</head><!--lets start--><p>Intro</p><p>Outtro</p><!--the end--></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"head":"Title"},{"#comment":"lets start"},{"p":"Intro"},{"p":"Outtro"},{"#comment":"the end"}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-264">
      <description> element node - implicit - mixed - with comments and whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a> <head>Title</head> Lets start <p>Intro</p> <p>Outtro</p> <!--the end--> </a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[" ",{"head":"Title"}," Lets start ",{"p":"Intro"}," ",{"p":"Outtro"}," ",{"#comment":"the end"}," "]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-270">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b/><b/></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":["",""]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-271">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b>xxx</b><b>yyy</b><b>zzz</b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":["xxx","yyy","zzz"]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-272">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b><p/></b><b><q/></b><b><r/></b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"p":""},{"q":""},{"r":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-273">
      <description> element node - implicit - list - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b> <p/> </b><b> <q/> </b><b> <r/> </b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"p":""},{"q":""},{"r":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-274">
      <description> element node - implicit - list - complex children</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b nr="1"><p>One</p></b><b nr="2"><p>Two</p></b><b nr="3"><p>Three</p></b></a>')/a)
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@nr":"1","p":"One"},{"@nr":"2","p":"Two"},{"@nr":"3","p":"Three"}]}</assert-deep-eq> 
      </result>
   </test-case>
   
 
   
   <test-case name="elements-to-maps-300">
      <description> element node - schema-based - empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:Empty/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}Empty":""}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-301">
      <description> element node - schema-based - empty content, schema allows attributes, but there are none</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-302">
      <description> element node - schema-based - empty content, with a boolean attribute</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus test="true"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@test":true()}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-303">
      <description> element node - schema-based - empty content, with a numeric attribute</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus num="42"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@num":42}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-304">
      <description> element node - schema-based - empty content, with a list-valued attribute</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus list="42 43 44"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@list":[42,43,44]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-305">
      <description> element node - schema-based - empty content, with a singleton list-valued attribute</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus list="1234"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@list":[1234]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-306">
      <description> element node - schema-based - empty content, with an empty list-valued attribute</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus list=""/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@list":[]}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-307">
      <description> element node - schema-based - empty content, nilled</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:EmptyPlus list="" xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}EmptyPlus":{"@list":[], "#content": xs:QName("fn:null")}}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-310">
      <description> element node - schema-based - simple content, numeric</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:Number>5</c:Number>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}Number":5}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-311">
      <description> element node - schema-based - simple content, boolean</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:Boolean>0</c:Boolean>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}Boolean":false()}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-312">
      <description> element node - schema-based - simple content, date</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:Date>2023-05-31</c:Date>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}Date": xs:date("2023-05-31")}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-313">
      <description> element node - schema-based - simple content, list of numbers</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:ListOfNumbers>33 32 31</c:ListOfNumbers>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}ListOfNumbers":[33,32,31]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-314">
      <description> element node - schema-based - simple content, singleton list of numbers</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:ListOfNumbers>33</c:ListOfNumbers>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}ListOfNumbers":[33]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-315">
      <description> element node - schema-based - simple content, empty list of numbers</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:ListOfNumbers></c:ListOfNumbers>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}ListOfNumbers":[]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-316">
      <description> element node - schema-based - simple typed content, plus attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:BooleanPlus num="3" test="0">1</c:BooleanPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}BooleanPlus":{"@num":3,"@test":false(),"#content":true()}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-317">
      <description> element node - schema-based - simple typed content, plus attributes, nilled </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:BooleanPlus num="3" test="0" xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{ "Q{http://www.w3.org/XQueryTest/specimen}BooleanPlus": 
            { "@num": 3,
              "@test": false(),
              "#content": xs:QName("fn:null")}
            }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-318">
      <description> element node - schema-based - simple typed content, plus attributes, @xsi:nil attribute is dropped </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:BooleanPlus num="3" test="0" xsi:nil="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">1</c:BooleanPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}BooleanPlus":{"@num":3,"@test":false(),"#content":true()}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-320">
      <description> element node - schema-based - list layout - whitespace dropped</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:ListPlus num="5">
                                        <c:DatePlus num="1">2000-01-01</c:DatePlus>
                                        <c:DatePlus num="2">2000-01-02</c:DatePlus>
                                        <c:DatePlus num="3">2000-01-03</c:DatePlus></c:ListPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{ "Q{http://www.w3.org/XQueryTest/specimen}ListPlus":
            { "@num":5,
              "DatePlus": [ {"@num": 1, "#content": xs:date("2000-01-01")},
                            {"@num": 2, "#content": xs:date("2000-01-02")},
                            {"@num": 3, "#content": xs:date("2000-01-03")}
                          ]
            }}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-321">
      <description> element node - schema-based - list layout - singleton</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:ListPlus num="3">
                                        <c:DatePlus num="1">2000-01-01</c:DatePlus>
                                     </c:ListPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{ "Q{http://www.w3.org/XQueryTest/specimen}ListPlus":
            {"@num": 3, 
             "DatePlus": [ { "@num": 1, "#content": xs:date("2000-01-01")} ] }}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-322">
      <description> element node - schema-based - list layout - empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:ListPlus num="3" test="0"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{ "Q{http://www.w3.org/XQueryTest/specimen}ListPlus": 
            {"@num": 3,
             "@test": false(),
             "DatePlus":[]
            }}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-330">
      <description> element node - schema-based - record layout, no attributes, no repeats, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:RecordPlus>
                                       <c:Boolean>1</c:Boolean>
                                       <c:Number>2</c:Number>
                                       <c:Date>1966-07-03</c:Date>
                                     </c:RecordPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":
              {"Boolean":true(),
               "Number":2,
               "Date": xs:date("1966-07-03")}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-331">
      <description> element node - schema-based - record layout, attributes, no repeats, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:RecordPlus test="1">
                                       <c:Boolean>1</c:Boolean>
                                       <c:Number>2</c:Number>
                                       <c:Date>1966-07-03</c:Date>
                                     </c:RecordPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":
            { "@test": true(), "Boolean": true(), "Number": 2, "Date": xs:date("1966-07-03") }
          }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-332">
      <description> element node - schema-based - record layout, attributes, repeated element, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:RecordPlus test="1">
                                       <c:Boolean>1</c:Boolean>
                                       <c:Number>2</c:Number>
                                       <c:Date>1966-07-03</c:Date>
                                       <c:Date>1966-07-04</c:Date>
                                     </c:RecordPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{ "Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":
            {"@test":true(), "Boolean":true(), "Number":2, "Date": [xs:date("1966-07-03"), xs:date("1966-07-04")] }
         }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-333">
      <description> element node - schema-based - record layout, repeated element, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:RecordPlus>
                                       <c:Date>1966-07-03</c:Date>
                                       <c:Boolean>1</c:Boolean>
                                       <c:Date>1966-07-04</c:Date>
                                     </c:RecordPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":{
            "Date": [xs:date("1966-07-03"), xs:date("1966-07-04")], 
            "Boolean":true()
         }}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-334">
      <description> element node - schema-based - record layout, nilled, no attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:RecordPlus xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":{"#content":()}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-335">
      <description> element node - schema-based - record layout, nilled, with attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:RecordPlus num="42" xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":{"@num":42,"#content":()}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-336">
      <description> element node - schema-based - record layout, empty, not nilled, attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:RecordPlus num="42" xsi:nil="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":{"@num":42}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-337">
      <description> element node - schema-based - record layout, empty, not nilled, no attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:RecordPlus xsi:nil="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}RecordPlus":{}}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-340">
      <description> element node - schema-based - sequence layout, no attributes, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:Sequence>
                                       <c:Boolean>1</c:Boolean>
                                       <c:Number>2</c:Number>
                                       <c:Date>1966-07-03</c:Date>
                                     </c:Sequence>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}Sequence":[
            {"Boolean": true()},
            {"Number": 2},
            {"Date": xs:date("1966-07-03")}]
         }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-341">
      <description> element node - schema-based - sequence layout, attributes, whitespace </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:SequencePlus num="42">
                                       <c:BooleanPlus>1</c:BooleanPlus>
                                       <c:NumberPlus>2</c:NumberPlus>
                                       <c:DatePlus>1966-07-03</c:DatePlus>
                                     </c:SequencePlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}SequencePlus":
            [{"@num": 42},
             {"BooleanPlus": {"#content": true()}},
             {"NumberPlus": {"#content": 2}},
             {"DatePlus": {"#content": xs:date("1966-07-03")}}
            ]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-342">
      <description> element node - schema-based - sequence layout, nilled </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:SequencePlus num="42" xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{"Q{http://www.w3.org/XQueryTest/specimen}SequencePlus":
            [ {"@num": 42}, 
              {"#content": xs:QName("fn:null")} ]
         }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-350">
      <description> element node - schema-based - mixed layout, whitespace, no attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:Mixed>A can of <c:Number>2</c:Number>  <c:Date>1966-07-03</c:Date> worms</c:Mixed>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}Mixed":
               [ "A can of ", {"Number": 2}, "  " , {"Date": xs:date("1966-07-03")}, " worms" ]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-351">
      <description> element node - schema-based - mixed layout, whitespace, attributes </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:MixedPlus test="0">A can of <c:Number>2</c:Number>  <c:Date>1966-07-03</c:Date> worms</c:MixedPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}MixedPlus":
              [ {"@test": false()}, "A can of ", {"Number": 2}, "  ", {"Date": xs:date("1966-07-03")}, " worms"]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-352">
      <description> element node - schema-based - mixed layout, whitespace, attributes, nilled </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:MixedPlus test="0" xsi:nil="1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}MixedPlus":[
              {"@test":false()}, 
              {"#content": xs:QName("fn:null")}
            ]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-353">
      <description> element node - schema-based - mixed layout, whitespace, attributes, not nilled </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:MixedPlus test="0" xsi:nil="0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            >A can of <c:Number>2</c:Number>  <c:Date>1966-07-03</c:Date> worms</c:MixedPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}MixedPlus":
              [ {"@test":false()},
                "A can of ",
                {"Number":2},
                "  ",
                {"Date": xs:date("1966-07-03")},
                " worms" ] }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-354">
      <description> element node - schema-based - mixed layout, whitespace, attributes, comments and PIs </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         declare boundary-space preserve;
         let $in := validate strict {<c:MixedPlus test="0">A can of <!--many-->  <c:Date>1966-07-03</c:Date> <?pi worms?></c:MixedPlus>}
         return elements-to-maps($in)
      ]]></test>
      <result>
         <assert-deep-eq>{
            "Q{http://www.w3.org/XQueryTest/specimen}MixedPlus":
            [ {"@test":false()},
              "A can of ",
              {"#comment":"many"},
              "  ",
              {"Date":xs:date("1966-07-03")},
              " ",
              {"#processing-instruction":{"#target":"pi","#data":"worms"}}
            ]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-400">
      <description> element node - explicit - selects empty layout though not empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="3"/>')/a, map{'layouts':map{QName('','a'):'empty'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":""}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-401">
      <description> element node - explicit - selects empty layout though not empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="3"><b/></a>')/a, map{'layouts':map{QName('','a'):'empty'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":""}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-402">
      <description> element node - explicit - selects empty-plus layout though there are no attributes</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a/>')/a, map{'layouts':map{QName('','a'):'empty-plus'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-403">
      <description> element node - explicit - selects empty-plus layout though there are children</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b/></a>')/a, map{'layouts':map{QName('','a'):'empty-plus'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-410">
      <description> element node - explicit - selects simple layout though there is mixed content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a>The <i>short</i> introduction</a>')/a, map{'layouts':map{QName('','a'):'simple'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":"The short introduction"}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-411">
      <description> element node - explicit - selects simple-plus layout though there are no attributes</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a>The <i>short</i> introduction</a>')/a, map{'layouts':map{QName('','a'):'simple-plus'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"#content":"The short introduction"}}</assert-deep-eq>     
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-412">
      <description> element node - schema-based - request simple layout, but content cannot be atomized.
      Fall back to using the string value.</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="specimen"/>
      <dependency type="spec" value="XQ40+"/>
      <dependency type="xsd-version" value="1.1"/>
      <test><![CDATA[
         import schema namespace c="http://www.w3.org/XQueryTest/specimen";
         let $in := validate strict {<c:Sequence><c:Boolean>1</c:Boolean><c:Number>2</c:Number></c:Sequence>}
         return elements-to-maps($in, 
                                 map{'layouts': map{ xs:QName('c:Sequence'): 'simple'},
                                     'name-format': 'local'}
                                )
      ]]></test>
      <result>
         <assert-deep-eq>{ "Sequence": "12" }</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-420">
      <description> element node - request list format though element names are inconsistent. Fall back to mixed.</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz"><b/><b/><c/></a>')/a, map{'layouts':map{QName('','a'):'list'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@id":"zz"},{"b":""},{"b":""},{"c":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-421">
      <description> element node - request list format though there are text node children. Fall back to mixed. </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz"><b/>rhubarb<b/></a>')/a, map{'layouts':map{QName('','a'):'list'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"@id":"zz"},{"b":""},"rhubarb",{"b":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-422">
      <description> element node - request list format though there are attributes. Drop the attributes. </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz"><b>one</b><b>two</b></a>')/a, map{'layouts':map{QName('','a'):'list'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":["one","two"]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-430">
      <description> element node - select record format though element names repeat</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a id="zz"><b>x</b><b>y</b><c/></a>')/a, 
                          map{'layouts': map{ QName('','a'): 'record' } }
                         )
      ]]></test>
      <result>
         <assert-deep-eq>{ "a":{ "@id": "zz", "b": ["x", "y"], "c": "" } }</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-431">
      <description> element node - select record layout though element names repeat, nested</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(
            parse-xml('<a id="zz"><b><p/></b><b><p/><p/></b></a>')/a, 
            map{'layouts': map{ QName('','a'): 'record',
                                QName('','b'): 'record'}
               })
      ]]></test>
      <result>
         <assert-deep-eq>{"a":{"@id":"zz",
                          "b":[{"p":""}, 
                               {"p":["",""]}] }}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-440">
      <description> element node - select mixed/simple layout though there is no non-whitespace text</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b> </b> <b>_</b></a>')/a, map{'layouts':map{QName('','a'):'mixed',QName('','b'):'simple'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"b":" "}," ",{"b":"_"}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-500">
      <description> element node - uniform across empty and empty-plus elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b/><b id="x"/><b/><c/></a>')/a, map{'uniform':true()})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"b":{}},{"b":{"@id":"x"}},{"b":{}},{"c":""}]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-501">
      <description> element node - uniform across simple and empty-plus elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b>-</b><b id="x"/><b>+</b><c/></a>')/a, map{'uniform':true()})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"b":{"#content":"-"}},{"b":{"@id":"x","#content":""}},{"b":{"#content":"+"}},{"c":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-502">
      <description> element node - uniform across list and single-child and empty elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b></b><b><i/><i/><i/></b><b><i/></b></a>')/a, map{'uniform':true(),'layouts':map{QName('','b'):'list-plus'}})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[[],{"i":["","",""]},[{"i":""}]]}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-503">
      <description> element node - uniform across lists with different child elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b></b><b><j/><j/><j/></b><b><i/></b></a>')/a, map{'uniform':true()})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[[],["","",""],[""]]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-504">
      <description> element node - uniform across list and list-plus elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b id="x"></b><b><i/><i/><i/></b><b><i/></b><c/></a>')/a, map{'uniform':true()})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"b":{"@id":"x","i":[]}},{"b":{"i":["","",""]}},{"b":{"i":[""]}},{"c":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-505">
      <description> element node - uniform across list and record elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(parse-xml('<a><b><i/><j/><k/></b><b><i>A</i><i>B</i><i>C</i></b><c/></a>')/a, map{'uniform':true()})
      ]]></test>
      <result>
         <assert-deep-eq>{"a":[{"b":{"i":"","j":"","k":""}},{"b":{"i":["A", "B", "C"]}},{"c":""}]}</assert-deep-eq> 
      </result>
   </test-case>
   
   <test-case name="elements-to-maps-506">
      <description> element node - uniform across list and mixed elements</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         elements-to-maps(
             parse-xml('<a><b><i/><j/>zzz<k/></b><b><i/><i/><i/></b><c/></a>')/a, 
             map{'uniform':true()}
         )
      ]]></test>
      <result>
         <assert-deep-eq>{
            "a": [
               {"b": [ {"i":""}, {"j":""}, "zzz", {"k":""} ] },
               {"b": [ {"i":""}, {"i":""}, {"i":""} ] },
               {"c": ""}
            ]}</assert-deep-eq>
      </result>
   </test-case>
   
   
   
   
   
</test-set>
   

 
