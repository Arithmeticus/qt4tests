<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-transitive-closure"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" covers-40="fn-transitive-closure">
    <description>Tests for the fn:transitive-closure function introduced in XPath 4.0</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-transitive-closure"/>
    <dependency type="spec" value="XP40+ XQ40+"/>
    <dependency type="feature" value="higherOrderFunctions"/>
    
    <environment name="trans-A">
        <source role="." file="transitive-closure/xpath-grammar.xml"/>
    </environment>

    <test-case name="trans-closure-001">
        <description>Empty sequence as input</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <environment ref="trans-A"/>
        <test>transitive-closure(identity#1)(())</test>
        <result>
            <assert-empty/>
        </result>
    </test-case>
    
    <test-case name="trans-closure-002">
        <description>Closure of identity function</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <environment ref="trans-A"/>
        <test>transitive-closure(identity#1)(.)</test>
        <result>
            <assert>/Q{http://www.w3.org/2001/03/XPath/grammar}grammar</assert>
        </result>
    </test-case>
    
    <test-case name="trans-closure-003">
        <description>Closure over @ref element references</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <environment ref="trans-A"/>
        <test>transitive-closure(
                    function($prod){root($prod)//*:production[@name = $prod//*:ref/@name]})
                       (//*:production[@name="VarRef"]) 
                    /@name
               => string-join(' ')
        </test>
        <result>
            <assert-eq>"VarName _QName_or_EQName EQName QName FunctionQName"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-003a">
        <description>Closure over @ref element references - test XQuery reference implementation</description>
        <created by="Michael Kay" on="2023-10-18"/>       
        <environment ref="trans-A"/>
        <test>
            declare %private function local:tc-inclusive(
              $start  as node()*,
              $step as (function(node()) as node()*)	
            ) as node()* {
              let $nextStep := $start/$step(.)
              let $newNodes := $nextStep except $start
              return (if (exists($newNodes))
                      then $start | local:tc-inclusive($newNodes, $step)
                      else $start)
            };
            declare function local:transitive-closure (
              $start  as node(),
              $step as (function(node()) as node()*)	
            ) as node()* {
              local:tc-inclusive($start/$step(.), $step)
            };

            local:transitive-closure(
                //*:production[@name="VarRef"],
                function($prod){root($prod)//*:production[@name = $prod//*:ref/@name]})
                /@name
                => string-join(' ')
        </test>
        <result>
            <assert-eq>"VarName _QName_or_EQName EQName QName FunctionQName"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-004">
        <description>Closure over @ref element references</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <environment ref="trans-A"/>
        <test>transitive-closure(
            function($prod){root($prod)//(*:production|*:token)[@name = $prod//*:ref/@name]})
              (//*:production[@name="NumericLiteral"])/@name
            => string-join(' ')
        </test>
        <result>
            <assert-eq>"IntegerLiteral HexIntegerLiteral BinaryIntegerLiteral DecimalLiteral DoubleLiteral Digits DecDigit HexDigits HexDigit BinaryDigits BinaryDigit"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-004a">
        <description>Closure over @ref element references - test XQuery reference implementation</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <environment ref="trans-A"/>
        <test>
            declare %private function local:tc-inclusive(
              $start  as node()*,
              $step as (function(node()) as node()*)	
            ) as node()* {
              let $nextStep := $start/$step(.)
              let $newNodes := $nextStep except $start
              return (if (exists($newNodes))
                      then $start | local:tc-inclusive($newNodes, $step)
                      else $start)
            };
            declare function local:transitive-closure (
              $start  as node(),
              $step as (function(node()) as node()*)	
            ) as node()* {
              local:tc-inclusive($start/$step(.), $step)
            };
                        
            local:transitive-closure(
              //*:production[@name="NumericLiteral"],
              function($prod){root($prod)//(*:production|*:token)[@name = $prod//*:ref/@name]})/@name
               => string-join(' ')
        </test>
        <result>
            <assert-eq>"IntegerLiteral HexIntegerLiteral BinaryIntegerLiteral DecimalLiteral DoubleLiteral Digits DecDigit HexDigits HexDigit BinaryDigits BinaryDigit"</assert-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-005">
        <description>Example from spec</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <test><![CDATA[let $data := parse-xml('
            <doc>
                <person id="0"/>
                <person id="1" manager="0"/>
                <person id="2" manager="0"/>
                <person id="3" manager="2"/>
                <person id="4" manager="2"/>
                <person id="5" manager="1"/>
                <person id="6" manager="3"/>
                <person id="7" manager="6"/>
                <person id="8" manager="6"/>
            </doc>')
            return transitive-closure(function($p){$data//person[@manager=$p/@id]})
                    ($data//person[@id='2'])/string(@id)               
        ]]></test>
        <result>
            <assert-deep-eq>("3", "4", "6", "7", "8")</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-006">
        <description>Example from spec with min=0</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <test><![CDATA[let $data := parse-xml('
            <doc>
                <person id="0"/>
                <person id="1" manager="0"/>
                <person id="2" manager="0"/>
                <person id="3" manager="2"/>
                <person id="4" manager="2"/>
                <person id="5" manager="1"/>
                <person id="6" manager="3"/>
                <person id="7" manager="6"/>
                <person id="8" manager="6"/>
            </doc>')
            return transitive-closure(function($p){$data//person[@manager=$p/@id]}, min:=0)
                    ($data//person[@id='2'])/string(@id)               
        ]]></test>
        <result>
            <assert-deep-eq>("2", "3", "4", "6", "7", "8")</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-007">
        <description>Example from spec with max="2"</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <test><![CDATA[let $data := parse-xml('
            <doc>
                <person id="0"/>
                <person id="1" manager="0"/>
                <person id="2" manager="0"/>
                <person id="3" manager="2"/>
                <person id="4" manager="2"/>
                <person id="5" manager="1"/>
                <person id="6" manager="3"/>
                <person id="7" manager="6"/>
                <person id="8" manager="6"/>
            </doc>')
            return transitive-closure(function($p){$data//person[@manager=$p/@id]}, max:=2)
                    ($data//person[@id='2'])/string(@id)               
        ]]></test>
        <result>
            <assert-deep-eq>("3", "4", "6")</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-008">
        <description>Example from spec</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <test><![CDATA[let $data := parse-xml('
            <doc>
                <person id="0"/>
                <person id="1" manager="0"/>
                <person id="2" manager="0"/>
                <person id="3" manager="2"/>
                <person id="4" manager="2"/>
                <person id="5" manager="1"/>
                <person id="6" manager="3"/>
                <person id="7" manager="6"/>
                <person id="8" manager="6"/>
            </doc>')
            return transitive-closure(function{child::*})($data)/@id/string()               
        ]]></test>
        <result>
            <assert-deep-eq>("0", "1", "2", "3", "4", "5", "6", "7", "8")</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-009">
        <description>Cycles are not a problem</description>
        <created by="Michael Kay" on="2023-05-23"/>       
        <test><![CDATA[let $data := parse-xml('
            <doc>
                <person id="0"/>
                <person id="1" manager="0"/>
                <person id="2" manager="0"/>
                <person id="3" manager="2"/>
                <person id="4" manager="2"/>
                <person id="5" manager="1"/>
                <person id="6" manager="3"/>
                <person id="7" manager="6"/>
                <person id="8" manager="6"/>
            </doc>')
            return transitive-closure(function{../child::*})($data//person[@id='4'])/@id/string()               
        ]]></test>
        <result>
            <assert-deep-eq>("0", "1", "2", "3", "4", "5", "6", "7", "8")</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="trans-closure-010">
        <description>Step function creates new nodes: relies on max for termination</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            let $step := function($node){(<b/>,<b/>)}
            return count(transitive-closure($step, min:=0, max:=4)($data))             
        ]]></test>
        <result>
            <assert-eq>31</assert-eq>
        </result>
    </test-case>
    
    
    <test-case name="trans-closure-900">
        <description>min lt 0</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            return count(transitive-closure(identity#1, min:=-1, max:=4)($data))             
        ]]></test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="trans-closure-901">
        <description>max lt 1</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            return count(transitive-closure(identity#1, min:=0, max:=0)($data))             
        ]]></test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="trans-closure-902">
        <description>max lt min (TODO: rule missing from spec)</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            return count(transitive-closure(identity#1, min:=2, max:=1)($data))             
        ]]></test>
        <result>
            <error code="FORG0013"/>
        </result>
    </test-case>
    
    <test-case name="trans-closure-903">
        <description>Apply result to non-node</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            let $tc := transitive-closure(root#1)
            return $tc(42)             
        ]]></test>
        <result>
            <error code="XXXX9999"/>
        </result>
    </test-case>
    
    <test-case name="trans-closure-904">
        <description>call result with too many args</description>
        <created by="Michael Kay" on="2023-05-23"/>
        <dependency type="spec" value="XQ40+"/>
        <test><![CDATA[
            let $data := parse-xml('<a/>')
            let $tc := transitive-closure(root#1)
            return $tc($data, 12)             
        ]]></test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
 

</test-set>
