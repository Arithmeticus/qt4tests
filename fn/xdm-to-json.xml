<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="fn-xdm-to-json" covers-40="fn-xdm-to-json">
   <description>Tests for the iexists() function</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-xdm-to-json"/>

   <test-case name="xdm-to-json-001">
      <description> Empty sequence </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(())</test>
      <result>
         <assert-string-value>null</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-002">
      <description> Single string </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json("today")</test>
      <result>
         <assert-string-value>"today"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-003">
      <description> Single number </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(23)</test>
      <result>
         <assert-string-value>23</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-004">
      <description> Single boolean </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(true())</test>
      <result>
         <assert-string-value>true</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-005">
      <description> Single boolean </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(false())</test>
      <result>
         <assert-string-value>false</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-006">
      <description> Large number </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(1_000_000_000_000)</test>
      <result>
         <assert-string-value>1000000000000</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-007">
      <description> Negative number </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(-42)</test>
      <result>
         <assert-string-value>-42</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-008">
      <description> Date </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(xs:date('2023-05-28'))</test>
      <result>
         <assert-string-value>"2023-05-28"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-009">
      <description> +INF </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(xs:double("+INF"))</test>
      <result>
         <assert-string-value>"INF"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-010">
      <description> -INF </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(xs:double("-INF"))</test>
      <result>
         <assert-string-value>"-INF"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-011">
      <description> NaN </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(number("not a number"))</test>
      <result>
         <assert-string-value>"NaN"</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-012">
      <description> Empty string </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json("")</test>
      <result>
         <assert-string-value>""</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-013">
      <description> Sequence of numbers </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json((1,2,3))</test>
      <result>
         <assert-string-value>[1,2,3]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-014">
      <description> Sequence of strings </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(("a","b","c"))</test>
      <result>
         <assert-string-value>["a","b","c"]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-015">
      <description> Sequence of booleans </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json((true(),false(),true()))</test>
      <result>
         <assert-string-value>[true,false,true]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-016">
      <description> Array of numbers </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json([1,2,3])</test>
      <result>
         <assert-string-value>[1,2,3]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-017">
      <description> Array of strings </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(["a","b","c"])</test>
      <result>
         <assert-string-value>["a","b","c"]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-018">
      <description> Array of booleans </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json([true(),false(),true()])</test>
      <result>
         <assert-string-value>[true,false,true]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-019">
      <description> Empty array </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json([])</test>
      <result>
         <assert-string-value>[]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-020">
      <description> Singleton array </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(["a"])</test>
      <result>
         <assert-string-value>["a"]</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-021">
      <description> Map with string keys and numeric values </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(map{"a":1,"b":2})</test>
      <result>
         <any-of>
            <assert-string-value>{"a":1,"b":2}</assert-string-value>
            <assert-string-value>{"b":2,"a":1}</assert-string-value>
         </any-of>        
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-022">
      <description> Map with string keys and boolean values </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(map{"a":true(),"b":false()})</test>
      <result>
         <any-of>
            <assert-string-value>{"a":true,"b":false}</assert-string-value>
            <assert-string-value>{"b":false,"a":true}</assert-string-value>
         </any-of>        
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-023">
      <description> Map with string keys and string values </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(map{"a":"x","b":"y"})</test>
      <result>
         <any-of>
            <assert-string-value>{"a":"x","b":"y"}</assert-string-value>
            <assert-string-value>{"b":"y","a":"x"}</assert-string-value>
         </any-of>        
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-024">
      <description> Array of maps </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json([map{"a":"x"},map{"a":1},map{"a":true()}])</test>
      <result>
         <assert-string-value>[{"a":"x"},{"a":1},{"a":true}]</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-025">
      <description> Map of arrays </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(map{"a":["x","y","z"],"b":[1,2,3]})</test>
      <result>
         <any-of>
            <assert-string-value>{"a":["x","y","z"],"b":[1,2,3]}</assert-string-value> 
            <assert-string-value>{"b":[1,2,3],"a":["x","y","z"]}</assert-string-value> 
         </any-of>            
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-026">
      <description> Array of arrays </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(["x","y","z",[1,2,3,[true(),false()]]])</test>
      <result>
         <assert-string-value>["x","y","z",[1,2,3,[true,false]]]</assert-string-value>           
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-027">
      <description> Internal null </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json([1,2,3,(),(),6])</test>
      <result>
         <assert-string-value>[1,2,3,null,null,6]</assert-string-value>           
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-028">
      <description> Internal null </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(map{"a":1,"b":()})</test>
      <result>
         <any-of>
            <assert-string-value>{"a":1,"b":null}</assert-string-value> 
            <assert-string-value>{"b":null,"a":1}</assert-string-value> 
         </any-of>      
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-029">
      <description> Function reference </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(count#1)</test>
      <result>
         <assert-string-value>{"#function":{"#name":"Q{http://www.w3.org/2005/xpath-functions}count","#arity":"1"}}</assert-string-value>      
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-030">
      <description> Inline function expression </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json($a -> {$a+1})</test>
      <result>
         <assert-string-value>{"#function":{"#arity":"1"}}</assert-string-value>      
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-031">
      <description> Partially applied function </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>xdm-to-json(contains(?,'e'))</test>
      <result>
         <assert-string-value>{"#function":{"#arity":"1"}}</assert-string-value>      
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-032">
      <description> Map of arrays with indentation </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>
         let $out := xdm-to-json(map{"a":["x","y","z"],"b":[1,2,3]}, map{'indent':true()})
         return map{'A':contains($out, ' '), 'B': $out => parse-json() => xdm-to-json()}
      </test>
      <result>
         <all-of>
            <assert>$result?A</assert>
            <any-of>
               <assert>$result?B = '{"a":["x","y","z"],"b":[1,2,3]}'</assert>
               <assert>$result?B = '{"b":[1,2,3],"a":["x","y","z"]}'</assert>
            </any-of>
         </all-of>            
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-033">
      <description> Array of arrays with indentation </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test>
         let $out := xdm-to-json(["x","y","z",[1,2,3,[true(),false()]]], map{'indent':true()})
         return map{'A':contains($out, ' '), 'B': $out => parse-json() => xdm-to-json()}
      </test>
      <result>
         <all-of>
            <assert>$result?A</assert>
            <assert>$result?B = '["x","y","z",[1,2,3,[true,false]]]'</assert>
         </all-of>          
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-104">
      <description> Text node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[xdm-to-json(parse-xml("<a>jigsaw</a>")//text())]]></test>
      <result>
         <assert-string-value>{"#text":"jigsaw"}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-105">
      <description> Comment node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[xdm-to-json(parse-xml("<a><!--remarkable--></a>")//comment())]]></test>
      <result>
         <assert-string-value>{"#comment":"remarkable"}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-106">
      <description> PI node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[xdm-to-json(parse-xml("<a><?go man go?></a>")//processing-instruction())]]></test>
      <result>
         <assert-string-value>{"#processing-instruction":{"#name":"go","#data":"man go"}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-107">
      <description> attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[xdm-to-json(parse-xml("<a code='835'/>")//@*)]]></test>
      <result>
         <assert-string-value>{"@code":"835"}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-108">
      <description> namespaced attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml("<a xml:id='thing'/>")//@*)
      ]]></test>
      <result>
         <assert-string-value>{"@xml:id":"thing"}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-109">
      <description> namespaced attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml("<a p:id='thing' xmlns:p='http://p.com/'/>")//@*)
      ]]></test>
      <result>
         <assert-string-value>{"@Q{http://p.com/}id":"thing"}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-110">
      <description> numeric typed attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="atomic"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
         import schema namespace atomic="http://www.w3.org/XQueryTest"; 
         xdm-to-json(//atomic:decimal/@atomic:attr)
      </test>
      <result>
         <assert-string-value>{"@Q{http://www.w3.org/XQueryTest}attr":12678967.543233}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-111">
      <description> list typed attribute node </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <environment ref="atomic"/>
      <dependency type="spec" value="XQ10+"/>
      <dependency type="feature" value="schemaImport"/>
      <test>
         import schema namespace atomic="http://www.w3.org/XQueryTest"; 
         xdm-to-json(//atomic:idrefs/@atomic:attr)
      </test>
      <result>
         <assert-string-value>{"@Q{http://www.w3.org/XQueryTest}attr":["id1","id2"]}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-112">
      <description> namespace node (namespace axis not available in XQuery) </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XP40+"/>
      <test><![CDATA[
         xdm-to-json(parse-xml("<a p:id='thing' xmlns:p='http://p.com/'/>")//namespace::p)
      ]]></test>
      <result>
         <assert-string-value>{"#namespace":{"#prefix":"p","#uri":"http://p.com/"}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-112a">
      <description> namespace node (can be constructed in XQuery) </description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         xdm-to-json(namespace{"p"}{"http://p.com/"})
      ]]></test>
      <result>
         <assert-string-value>{"#namespace":{"#prefix":"p","#uri":"http://p.com/"}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-113">
      <description> document node - URI</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(doc('abs/e1.xml'))
      ]]></test>
      <result>
         <assert-string-value>{"#document":{"#content":[{"e":"1"}]}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-114">
      <description> document node - content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a/>'))
      ]]></test>
      <result>
         <assert-string-value>{"#document":{"#content":[{"a":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-115">
      <description> document node - comments and whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<!--start--> <a/> <!--end-->'))
      ]]></test>
      <result>
         <assert-string-value>{"#document":{"#content":[{"#comment":"start"},{"a":""},{"#comment":"end"}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-116">
      <description> document node - ill-formed - contains text node</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         xdm-to-json(document{text{"ill-formed"}})
      ]]></test>
      <result>
         <assert-string-value>{"#document":{"#content":["ill-formed"]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-200">
      <description> element node - implicit - empty</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a/>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":""}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-201">
      <description> element node - implicit - empty - whitespace significant</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":" "}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-202">
      <description> element node - implicit - empty - default namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xmlns="http://one.com/"/>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":""}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-203">
      <description> element node - implicit - empty - non-default namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<p:a xmlns:p="http://one.com/"/>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":""}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-204">
      <description> element node - implicit - nested</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a><b/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-205">
      <description> element node - implicit - nested same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xmlns="http://one.com/"><b/></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":{"b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-206">
      <description> element node - implicit - nested same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<p:a xmlns:p="http://one.com/"><p:b/></p:a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":{"b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-207">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xmlns="http://one.com/"><b xmlns=""/></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":{"Q{}b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-208">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<p:a xmlns:p="http://one.com/"><b/></p:a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":{"Q{}b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-209">
      <description> element node - implicit - nested different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a><p:b xmlns:p="http://two.com/"/></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"Q{http://two.com/}b":""}}</assert-string-value>     
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-210">
      <description> element node - implicit - empty-plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a x="1" y="2"/>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-string-value>{"a":{"@x":"1","@y":"2"}}</assert-string-value> 
            <assert-string-value>{"a":{"@y":"2","@x":"1"}}</assert-string-value>  
         </any-of>           
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-211">
      <description> element node - implicit - simple</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a>babel</a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":"babel"}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-212">
      <description> element node - implicit - simple - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":" "}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-220">
      <description> element node - implicit - simple plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="zz">babel</a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@id":"zz","#content":"babel"}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-221">
      <description> element node - implicit - simple plus</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="zz" x="22">babel</a>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-string-value>{"a":{"@id":"zz","@x":"22","#content":"babel"}}</assert-string-value> 
            <assert-string-value>{"a":{"@x":"22","@id":"zz","#content":"babel"}}</assert-string-value> 
         </any-of>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-222">
      <description> element node - implicit - simple plus - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="zz" x="22"> </a>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-string-value>{"a":{"@id":"zz","@x":"22","#content":" "}}</assert-string-value> 
            <assert-string-value>{"a":{"@x":"22","@id":"zz","#content":" "}}</assert-string-value> 
         </any-of>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-223">
      <description> element node - implicit - simple plus - nested</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="aa"><b id="bb">bertie</b></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@id":"aa","b":{"@id":"bb","#content":"bertie"}}}</assert-string-value>  
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-224">
      <description> element node - implicit - simple plus - nested, different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="aa"><b id="bb" xmlns="http://bertie.com/">bertie</b></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@id":"aa","Q{http://bertie.com/}b":{"@id":"bb","#content":"bertie"}}}</assert-string-value>  
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-225">
      <description> element node - implicit - simple plus - attribute in namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="zz" p:x="22" xmlns:p="http://p.com/">babel</a>')/a)
      ]]></test>
      <result>
         <any-of>
            <assert-string-value>{"a":{"@id":"zz","@Q{http://p.com/}x":"22","#content":"babel"}}</assert-string-value> 
            <assert-string-value>{"a":{"@Q{http://p.com/}x":"22","@id":"zz","#content":"babel"}}</assert-string-value> 
         </any-of>
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-230">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a id="zz"><b/><b/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@id":"zz","b":["",""]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-231">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"><b>xxx</b><b>yyy</b><b>zzz</b></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","b":["xxx","yyy","zzz"]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-232">
      <description> element node - implicit - list</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"><b><p/></b><b><q/></b><b><r/></b></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-233">
      <description> element node - implicit - list - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"><b> <p/> </b><b> <q/> </b><b> <r/> </b></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-234">
      <description> element node - implicit - list - same namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xmlns="http://one.com/" xml:id="zz"><b><p/></b><b><q/></b><b><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://one.com/}a":{"@xml:id":"zz","b":[{"p":""},{"q":""},{"r":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-235">
      <description> element node - implicit - list - different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"><b xmlns="http://one.com/"><p/></b><b xmlns="http://one.com/"><q/></b><b xmlns="http://one.com/"><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","Q{http://one.com/}b":[{"p":""},{"q":""},{"r":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-236">
      <description> element node - implicit - list - different namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xmlns="http://zero.com/" xml:id="zz"><b xmlns="http://one.com/"><p/></b><b xmlns="http://one.com/"><q/></b><b xmlns="http://one.com/"><r/></b></a>')/*:a)
      ]]></test>
      <result>
         <assert-string-value>{"Q{http://zero.com/}a":{"@xml:id":"zz","Q{http://one.com/}b":[{"p":""},{"q":""},{"r":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-240">
      <description> element node - implicit - record</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"><p/><q/><r/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","p":"","q":"","r":""}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-241">
      <description> element node - implicit - record - whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"> <p/> <q/> <r/> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","p":"","q":"","r":""}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-242">
      <description> element node - implicit - record - namespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a xml:id="zz"> <p/> <z:q xmlns:z="http://z.com/" z:id="cow"/> <r/> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@xml:id":"zz","p":"","Q{http://z.com/}q":{"@Q{http://z.com/}id":"cow"},"r":""}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-250">
      <description> element node - implicit - sequence</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a><head/><p/><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"#content":[{"head":""},{"p":""},{"p":""},{"p":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-251">
      <description> element node - implicit - sequence - with attributes and content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a diff="chg"><head/><p>Intro</p><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@diff":"chg","#content":[{"head":""},{"p":"Intro"},{"p":""},{"p":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-252">
      <description> element node - implicit - sequence - with whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a diff="chg"> <head/> <p>Intro</p> <p/> <p/> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@diff":"chg","#content":[{"head":""},{"p":"Intro"},{"p":""},{"p":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-260">
      <description> element node - implicit - mixed</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a><head/><p/><p/><p/>The end</a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"#content":[{"head":""},{"p":""},{"p":""},{"p":""},"The end"]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-261">
      <description> element node - implicit - mixed - with attributes and content</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a diff="chg"><head/>The beginning<p>Intro</p><p/><p/></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@diff":"chg","#content":[{"head":""},"The beginning",{"p":"Intro"},{"p":""},{"p":""}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-262">
      <description> element node - implicit - mixed - with whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a diff="chg"> <head/> <p>Intro</p> The middle <p/> <p/> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"@diff":"chg","#content":[" ",{"head":""}," ",{"p":"Intro"}," The middle ",{"p":""}," ",{"p":""}," "]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-263">
      <description> element node - implicit - mixed - with comment</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a><head>Title</head><!--lets start--><p>Intro</p><p>Outtro</p><!--the end--></a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"#content":[{"head":"Title"},{"#comment":"lets start"},{"p":"Intro"},{"p":"Outtro"},{"#comment":"the end"}]}}</assert-string-value> 
      </result>
   </test-case>
   
   <test-case name="xdm-to-json-264">
      <description> element node - implicit - mixed - with comments and whitespace</description>
      <created by="Michael Kay" on="2023-05-28"/>
      <test><![CDATA[
         xdm-to-json(parse-xml('<a> <head>Title</head> Lets start <p>Intro</p> <p>Outtro</p> <!--the end--> </a>')/a)
      ]]></test>
      <result>
         <assert-string-value>{"a":{"#content":[" ",{"head":"Title"}," Lets start ",{"p":"Intro"}," ",{"p":"Outtro"}," ",{"#comment":"the end"}," "]}}</assert-string-value> 
      </result>
   </test-case>
   
   
   
</test-set>
   

 