<?xml version="1.0" encoding="UTF-8"?>
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<!--DO NOT EDIT: GENERATED BY generate-qt3-test-set.xsl-->
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
           xmlns:saxon="http://saxon.sf.net/"
           xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
           name="app-spec-examples">
   <description>Tests the example code in the F+O 4.0 specification</description>
   <environment name="global">
      <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
      <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
      <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
      <decimal-format name="ch" decimal-separator="·" grouping-separator="ʹ"/>
      <decimal-format name="fortran" exponent-separator="E"/>
   </environment>
   <dependency type="spec" value="XP40+ XQ40+" satisfied="true"/>

   <test-case name="fo-test-fn-string-001">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string(23)
      </test>
      <result>
         <assert-deep-eq>"23"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-002">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string(false())
      </test>
      <result>
         <assert-deep-eq>"false"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-003">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string("Paris")
      </test>
      <result>
         <assert-deep-eq>"Paris"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-004">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string((1, 2, 3))
      </test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-005">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string([[1, 2], [3, 4]])
      </test>
      <result>
         <error code="FOTY0014"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-006">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string(abs#1)
      </test>
      <result>
         <error code="FOTY0014"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-007">
      <description>Test case for fn:string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        string($para)
      </test>
      <result>
         <assert-deep-eq>"In a hole in the ground there lived a hobbit."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-001">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        data(123)
      </test>
      <result>
         <assert-deep-eq>123</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-002">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        data((123, 456))
      </test>
      <result>
         <assert-deep-eq>123, 456</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-003">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        data([[1,2],[3,4]])
      </test>
      <result>
         <assert-deep-eq>1, 2, 3, 4</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-004">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        data($para)
      </test>
      <result>
         <assert-deep-eq>xs:untypedAtomic("In a hole in the ground there lived a hobbit.")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-005">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $para := 
          
&lt;para&gt;In a hole in the ground there lived a &lt;term author="Tolkien"&gt;hobbit&lt;/term&gt;.&lt;/para&gt;
         
           return 

        
        data($para/term/@author)
      </test>
      <result>
         <assert-deep-eq>xs:untypedAtomic("Tolkien")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-data-006">
      <description>Test case for fn:data</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        data(abs#1)
      </test>
      <result>
         <error code="FOTY0013"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-error-001">
      <description>Test case for fn:error</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        error()
      </test>
      <result>
         <error code="FOER0000"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-error-002">
      <description>Test case for fn:error</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        error(
  QName(
    'http://www.example.com/HR',
    'myerr:toohighsal'
  ),
  'Salary is too high'
)
      </test>
      <result>
         <error code="*"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-abs-001">
      <description>Test case for fn:abs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        abs(10.5)
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-abs-002">
      <description>Test case for fn:abs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        abs(-10.5)
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-abs-003">
      <description>Test case for fn:abs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        abs(-math:log(0))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ceiling-001">
      <description>Test case for fn:ceiling</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ceiling(10.5)
      </test>
      <result>
         <assert-deep-eq>11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ceiling-002">
      <description>Test case for fn:ceiling</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ceiling(-10.5)
      </test>
      <result>
         <assert-deep-eq>-10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ceiling-003">
      <description>Test case for fn:ceiling</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ceiling(math:log(0))
      </test>
      <result>
         <assert-deep-eq>-xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-floor-001">
      <description>Test case for fn:floor</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        floor(10.5)
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-floor-002">
      <description>Test case for fn:floor</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        floor(-10.5)
      </test>
      <result>
         <assert-deep-eq>-11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-floor-003">
      <description>Test case for fn:floor</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(0) =&gt; floor()
      </test>
      <result>
         <assert-deep-eq>-xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-001">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(2.5)
      </test>
      <result>
         <assert-deep-eq>3.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-002">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(2.4999)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-003">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(-2.5)
      </test>
      <result>
         <assert-deep-eq>-2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-004">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(1.125, 2)
      </test>
      <result>
         <assert-deep-eq>1.13</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-005">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(8452, -2)
      </test>
      <result>
         <assert-deep-eq>8500</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-006">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round(3.1415e0, 2)
      </test>
      <result>
         <assert-deep-eq>3.14e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-007">
      <description>Test case for fn:round</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(0) =&gt; round()
      </test>
      <result>
         <assert-deep-eq>-xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-001">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(0.5)
      </test>
      <result>
         <assert-deep-eq>0.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-002">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(1.5)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-003">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(2.5)
      </test>
      <result>
         <assert-deep-eq>2.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-004">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(3.567812e+3, 2)
      </test>
      <result>
         <assert-deep-eq>3567.81e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-005">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(4.7564e-3, 2)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-006">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        round-half-to-even(35612.25, -2)
      </test>
      <result>
         <assert-deep-eq>35600</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-round-half-to-even-007">
      <description>Test case for fn:round-half-to-even</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(0) =&gt; round-half-to-even()
      </test>
      <result>
         <assert-deep-eq>-xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-001">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(123, '0000')
      </test>
      <result>
         <assert-deep-eq>"0123"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-002">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(21, '1;o', 'en')
      </test>
      <result>
         <assert-deep-eq>"21st"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-003">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(7, 'a')
      </test>
      <result>
         <assert-deep-eq>"g"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-004">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(27, 'a')
      </test>
      <result>
         <assert-deep-eq>"aa"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-005">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(57, 'I')
      </test>
      <result>
         <assert-deep-eq>"LVII"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-006">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1234, '#;##0;')
      </test>
      <result>
         <assert-deep-eq>"1;234"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-007">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1234, '16^xxxx')
      </test>
      <result>
         <assert-deep-eq>"04d2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-008">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1234, '16^X')
      </test>
      <result>
         <assert-deep-eq>"4D2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-009">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(12345678, '16^xxxx_xxxx')
      </test>
      <result>
         <assert-deep-eq>"00bc_614e"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-010">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(12345678, '16^#_xxxx')
      </test>
      <result>
         <assert-deep-eq>"bc_614e"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-011">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(255, '2^xxxx xxxx')
      </test>
      <result>
         <assert-deep-eq>"1111 1111"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-012">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1023, '32^XXXX')
      </test>
      <result>
         <assert-deep-eq>"00VV"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-013">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1023, '10^XXXX')
      </test>
      <result>
         <assert-deep-eq>"1023"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-integer-014">
      <description>Test case for fn:format-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-integer(1023, '10^00')
      </test>
      <result>
         <assert-deep-eq>"10^23"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-001">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(12345.6, '#,###.00')
      </test>
      <result>
         <assert-deep-eq>"12,345.60"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-002">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(12345678.9, '9,999.99')
      </test>
      <result>
         <assert-deep-eq>"12,345,678.90"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-003">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(123.9, '9999')
      </test>
      <result>
         <assert-deep-eq>"0124"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-004">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(0.14, '01%')
      </test>
      <result>
         <assert-deep-eq>"14%"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-005">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(-6, '000')
      </test>
      <result>
         <assert-deep-eq>"-006"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-006">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(
  1234.5678,
  '#ʹ##0·00',
  'ch'
)
      </test>
      <result>
         <assert-deep-eq>"1ʹ234·57"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-007">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(1234.5678, '00.000E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"12.346E2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-008">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '0.0E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"2.3E-1"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-009">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '#.00E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>"0.23E0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-format-number-010">
      <description>Test case for fn:format-number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        format-number(0.234, '.00E0', 'fortran')
      </test>
      <result>
         <assert-deep-eq>".23E0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-001">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer(" 200 ")
      </test>
      <result>
         <assert-deep-eq>200</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-002">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("-20")
      </test>
      <result>
         <assert-deep-eq>-20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-003">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer(" +100")
      </test>
      <result>
         <assert-deep-eq>100</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-004">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("ff", 16)
      </test>
      <result>
         <assert-deep-eq>255</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-005">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("FFFF FFFF", 16)
      </test>
      <result>
         <assert-deep-eq>4294967295</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-006">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("-FFFF_FFFF", 16)
      </test>
      <result>
         <assert-deep-eq>-4294967295</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-007">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("377", 8)
      </test>
      <result>
         <assert-deep-eq>255</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-008">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("101", 2)
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-009">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-integer("vv", 32)
      </test>
      <result>
         <assert-deep-eq>1023</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-010">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lower-case("AAB")
=&gt; translate("abcdefghijklmnopqrstuvwxyz", "0123456789abcdefghijklmnop")
=&gt; parse-integer(26)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-integer-011">
      <description>Test case for fn:parse-integer</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        translate('٢٠٢٣', '٠١٢٣٤٥٦٧٨٩', '0123456789')
=&gt; parse-integer()
      </test>
      <result>
         <assert-deep-eq>2023</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pi-001">
      <description>Test case for math:pi</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        2*math:pi()
      </test>
      <result>
         <assert-deep-eq>6.283185307179586e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-001">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-002">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-003">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(1)
      </test>
      <result>
         <assert>abs($result - 2.7182818284590455e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-004">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(2)
      </test>
      <result>
         <assert-deep-eq>7.38905609893065e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-005">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(-1)
      </test>
      <result>
         <assert-deep-eq>0.36787944117144233e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-006">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(math:pi())
      </test>
      <result>
         <assert-deep-eq>23.140692632779267e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-007">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-008">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp-009">
      <description>Test case for math:exp</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-001">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-002">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-003">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(1)
      </test>
      <result>
         <assert-deep-eq>1.0e1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-004">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(0.5)
      </test>
      <result>
         <assert-deep-eq>3.1622776601683795e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-005">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(-1)
      </test>
      <result>
         <assert-deep-eq>1.0e-1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-006">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-007">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-exp10-008">
      <description>Test case for math:exp10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:exp10(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-001">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-002">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-003">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(math:exp(1))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-004">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(1.0e-3)
      </test>
      <result>
         <assert-deep-eq>-6.907755278982137e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-005">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(2)
      </test>
      <result>
         <assert-deep-eq>0.6931471805599453e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-006">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(-1)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-007">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-008">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log-009">
      <description>Test case for math:log</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-001">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-002">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-003">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(1.0e3)
      </test>
      <result>
         <assert-deep-eq>3.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-004">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(1.0e-3)
      </test>
      <result>
         <assert-deep-eq>-3.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-005">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(2)
      </test>
      <result>
         <assert-deep-eq>0.3010299956639812e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-006">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(-1)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-007">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-008">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-log10-009">
      <description>Test case for math:log10</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:log10(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-001">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-002">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(0.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-003">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-004">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(1.0e6)
      </test>
      <result>
         <assert-deep-eq>1.0e3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-005">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(2.0e0)
      </test>
      <result>
         <assert-deep-eq>1.4142135623730951e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-006">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(-2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-007">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-008">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sqrt-009">
      <description>Test case for math:sqrt</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sqrt(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-001">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow((), 93.7)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-002">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(2, 3)
      </test>
      <result>
         <assert-deep-eq>8.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-003">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-2, 3)
      </test>
      <result>
         <assert-deep-eq>-8.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-004">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(2, -3)
      </test>
      <result>
         <assert-deep-eq>0.125e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-005">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-2, -3)
      </test>
      <result>
         <assert-deep-eq>-0.125e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-006">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(2, 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-007">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0, 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-008">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(xs:double('INF'), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-009">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(xs:double('NaN'), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-010">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-math:pi(), 0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-011">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-012">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 4)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-013">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-014">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0, 4)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-015">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-016">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -4)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-017">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-018">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0, -4)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-019">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(16, 0.5e0)
      </test>
      <result>
         <assert-deep-eq>4.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-020">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(16, 0.25e0)
      </test>
      <result>
         <assert-deep-eq>2.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-021">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-022">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('-INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-023">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, -3.1e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-024">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, -3.1e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('INF')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-025">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-026">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-027">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(0e0, 3.1e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-028">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-0e0, 3.1e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-029">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-1, xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-030">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-1, xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-031">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-032">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-033">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(1, xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-034">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-2.5e0, 2.0e0)
      </test>
      <result>
         <assert-deep-eq>6.25e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-pow-035">
      <description>Test case for math:pow</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:pow(-2.5e0, 2.00000001e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-001">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-002">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-003">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-004">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-005">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-006">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(math:pi())
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-007">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-008">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-sin-009">
      <description>Test case for math:sin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:sin(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-001">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-002">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-003">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>1.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-004">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-005">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-006">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(math:pi())
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-007">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-008">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-cos-009">
      <description>Test case for math:cos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:cos(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-001">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-002">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-003">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-004">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(math:pi() div 4)
      </test>
      <result>
         <assert>abs($result - 1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-005">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(-math:pi() div 4)
      </test>
      <result>
         <assert>abs($result - -1.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-006">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        1 div math:tan(math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-007">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        1 div math:tan(-math:pi() div 2)
      </test>
      <result>
         <assert>abs($result - -0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-008">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(math:pi())
      </test>
      <result>
         <assert>abs($result - 0.0e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-009">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-010">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-tan-011">
      <description>Test case for math:tan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:tan(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-001">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-002">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-003">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-004">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(1.0e0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-005">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(-1.0e0)
      </test>
      <result>
         <assert>abs($result - -1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-006">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-007">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-008">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-asin-009">
      <description>Test case for math:asin</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:asin(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-001">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-002">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-003">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(-0.0e0)
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-004">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(1.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-005">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(-1.0e0)
      </test>
      <result>
         <assert>abs($result - 3.141592653589793e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-006">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(2.0e0)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-007">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-008">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-acos-009">
      <description>Test case for math:acos</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:acos(xs:double('-INF'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-001">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-002">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-003">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(-0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-004">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(1.0e0)
      </test>
      <result>
         <assert>abs($result - 0.7853981633974483e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-005">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(-1.0e0)
      </test>
      <result>
         <assert>abs($result - -0.7853981633974483e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-006">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('NaN'))
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-007">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('INF'))
      </test>
      <result>
         <assert>abs($result - 1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan-008">
      <description>Test case for math:atan</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan(xs:double('-INF'))
      </test>
      <result>
         <assert>abs($result - -1.5707963267948966e0) lt 1e-5</assert>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-001">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-002">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-003">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, -0.0e0)
      </test>
      <result>
         <assert-deep-eq>3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-004">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, -0.0e0)
      </test>
      <result>
         <assert-deep-eq>-3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-005">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(-1, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>-1.5707963267948966e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-006">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(+1, 0.0e0)
      </test>
      <result>
         <assert-deep-eq>1.5707963267948966e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-007">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, -1)
      </test>
      <result>
         <assert-deep-eq>-3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-008">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, -1)
      </test>
      <result>
         <assert-deep-eq>3.141592653589793e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-009">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(-0.0e0, +1)
      </test>
      <result>
         <assert-deep-eq>-0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-math-atan2-010">
      <description>Test case for math:atan2</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        math:atan2(+0.0e0, +1)
      </test>
      <result>
         <assert-deep-eq>+0.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoints-to-string-001">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoints-to-string((66, 65, 67, 72))
      </test>
      <result>
         <assert-deep-eq>"BACH"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoints-to-string-002">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoints-to-string((2309, 2358, 2378, 2325))
      </test>
      <result>
         <assert-deep-eq>"अशॊक"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoints-to-string-003">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoints-to-string(())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoints-to-string-004">
      <description>Test case for fn:codepoints-to-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoints-to-string(0)
      </test>
      <result>
         <error code="FOCH0001"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-to-codepoints-001">
      <description>Test case for fn:string-to-codepoints</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-to-codepoints("Thérèse")
      </test>
      <result>
         <assert-deep-eq>(84, 104, 233, 114, 232, 115, 101)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-compare-001">
      <description>Test case for fn:compare</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        compare('abc', 'abc')
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-compare-002">
      <description>Test case for fn:compare</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment>
         <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
         <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
         <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
         <collation uri="http://www.w3.org/2013/collation/UCA?lang=de;strength=primary"
                     default="true"/>
      </environment>
      <test>
        compare('Strasse', 'Straße')
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-compare-003">
      <description>Test case for fn:compare</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        compare(
  'Strasse',
  'Straße',
  'http://www.w3.org/2013/collation/UCA?lang=de;strength=primary'
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-compare-004">
      <description>Test case for fn:compare</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment>
         <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
         <namespace prefix="map" uri="http://www.w3.org/2005/xpath-functions/map"/>
         <namespace prefix="array" uri="http://www.w3.org/2005/xpath-functions/array"/>
         <collation uri="http://www.w3.org/2013/collation/UCA?lang=de" default="true"/>
      </environment>
      <test>
        compare('Strassen', 'Straße')
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoint-equal-001">
      <description>Test case for fn:codepoint-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoint-equal("abcd", "abcd")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoint-equal-002">
      <description>Test case for fn:codepoint-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoint-equal("abcd", "abcd ")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoint-equal-003">
      <description>Test case for fn:codepoint-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoint-equal("", "")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoint-equal-004">
      <description>Test case for fn:codepoint-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoint-equal("", ())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-codepoint-equal-005">
      <description>Test case for fn:codepoint-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        codepoint-equal((), ())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-001">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat('un', 'grateful')
      </test>
      <result>
         <assert-deep-eq>"ungrateful"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-002">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat(
  'Thy ', (), 'old ', "groans", "", ' ring',
  ' yet', ' in', ' my', ' ancient',' ears.'
)
      </test>
      <result>
         <assert-deep-eq>"Thy old groans ring yet in my ancient ears."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-003">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat('Ciao!',())
      </test>
      <result>
         <assert-deep-eq>"Ciao!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-004">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat('Ingratitude, ', 'thou ', ('marble-hearted', ' fiend!'))
      </test>
      <result>
         <assert-deep-eq>"Ingratitude, thou marble-hearted fiend!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-005">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat(01, 02, 03, 04, true())
      </test>
      <result>
         <assert-deep-eq>"1234true"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-006">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat()
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-concat-007">
      <description>Test case for fn:concat</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        10 || '/' || 6
      </test>
      <result>
         <assert-deep-eq>"10/6"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-001">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-join(1 to 9)
      </test>
      <result>
         <assert-deep-eq>"123456789"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-002">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-join(('Now', 'is', 'the', 'time', '...'), ' ')
      </test>
      <result>
         <assert-deep-eq>"Now is the time ..."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-003">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-join(
  ('Blow, ', 'blow, ', 'thou ', 'winter ', 'wind!'),
  ''
)
      </test>
      <result>
         <assert-deep-eq>"Blow, blow, thou winter wind!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-004">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-join((), 'separator')
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-005">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-join(1 to 5, ', ')
      </test>
      <result>
         <assert-deep-eq>"1, 2, 3, 4, 5"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-006">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $doc := 
          &lt;doc&gt;
  &lt;chap&gt;
    &lt;section xml:id="xyz"/&gt;
  &lt;/chap&gt;
&lt;/doc&gt;
           return 

        
        $doc//@xml:id
! string-join((node-name(), '="', ., '"'))
      </test>
      <result>
         <assert-deep-eq>'xml:id="xyz"'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-join-007">
      <description>Test case for fn:string-join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $doc := 
          &lt;doc&gt;
  &lt;chap&gt;
    &lt;section xml:id="xyz"/&gt;
  &lt;/chap&gt;
&lt;/doc&gt;
           return 

        
        $doc//section
! string-join(ancestor-or-self::*/name(), '/')
      </test>
      <result>
         <assert-deep-eq>"doc/chap/section"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-001">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("motor car", 6)
      </test>
      <result>
         <assert-deep-eq>" car"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-002">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("metadata", 4, 3)
      </test>
      <result>
         <assert-deep-eq>"ada"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-003">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", 1.5, 2.6)
      </test>
      <result>
         <assert-deep-eq>"234"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-004">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", 0, 3)
      </test>
      <result>
         <assert-deep-eq>"12"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-005">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", 5, -3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-006">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", -3, 5)
      </test>
      <result>
         <assert-deep-eq>"1"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-007">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", 0 div 0E0, 3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-008">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", 1, 0 div 0E0)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-009">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring((), 1, 3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-010">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", -42, 1 div 0E0)
      </test>
      <result>
         <assert-deep-eq>"12345"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-011">
      <description>Test case for fn:substring</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring("12345", -1 div 0E0, 1 div 0E0)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-length-001">
      <description>Test case for fn:string-length</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-length(
  "Harp not on that string, madam; that is past."
)
      </test>
      <result>
         <assert-deep-eq>45</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-string-length-002">
      <description>Test case for fn:string-length</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        string-length(())
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-normalize-space-001">
      <description>Test case for fn:normalize-space</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        normalize-space(" The    wealthy curled darlings
           of    our    nation. ")
      </test>
      <result>
         <assert-deep-eq>"The wealthy curled darlings of our nation."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-normalize-space-002">
      <description>Test case for fn:normalize-space</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        normalize-space(())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-upper-case-001">
      <description>Test case for fn:upper-case</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        upper-case("abCd0")
      </test>
      <result>
         <assert-deep-eq>"ABCD0"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lower-case-001">
      <description>Test case for fn:lower-case</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lower-case("ABc!D")
      </test>
      <result>
         <assert-deep-eq>"abc!d"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-translate-001">
      <description>Test case for fn:translate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        translate("bar","abc","ABC")
      </test>
      <result>
         <assert-deep-eq>"BAr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-translate-002">
      <description>Test case for fn:translate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        translate("--aaa--","abc-","ABC")
      </test>
      <result>
         <assert-deep-eq>"AAA"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-translate-003">
      <description>Test case for fn:translate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        translate("abcdabc", "abc", "AB")
      </test>
      <result>
         <assert-deep-eq>"ABdAB"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-encode-for-uri-001">
      <description>Test case for fn:encode-for-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        encode-for-uri(
  "http://example.com/00/Weather/CA/Los%20Angeles#ocean"
)
      </test>
      <result>
         <assert-deep-eq>"http%3A%2F%2Fexample.com%2F00%2FWeather%2FCA%2FLos%2520Angeles%23ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-encode-for-uri-002">
      <description>Test case for fn:encode-for-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat(
  "http://example.com/",
  encode-for-uri("~bébé")
)
      </test>
      <result>
         <assert-deep-eq>"http://example.com/~b%C3%A9b%C3%A9"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-encode-for-uri-003">
      <description>Test case for fn:encode-for-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        concat(
  "http://example.com/",
  encode-for-uri("100% organic")
)
      </test>
      <result>
         <assert-deep-eq>"http://example.com/100%25%20organic"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-decode-from-uri-001">
      <description>Test case for fn:decode-from-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        decode-from-uri("http://example.com/")
      </test>
      <result>
         <assert-deep-eq>"http://example.com/"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-decode-from-uri-002">
      <description>Test case for fn:decode-from-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        decode-from-uri("~b%C3%A9b%C3%A9?a=b+c")
      </test>
      <result>
         <assert-deep-eq>"~bébé?a=b c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-decode-from-uri-003">
      <description>Test case for fn:decode-from-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        decode-from-uri("%00-%XX-%F0%9F%92%41-%F0%F0%9F%92%A1")
      </test>
      <result>
         <assert-deep-eq>"�-�-�A-�💡"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iri-to-uri-001">
      <description>Test case for fn:iri-to-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        iri-to-uri(
  "http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
)
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iri-to-uri-002">
      <description>Test case for fn:iri-to-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        iri-to-uri("http://www.example.com/~bébé")
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/~b%C3%A9b%C3%A9"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-escape-html-uri-001">
      <description>Test case for fn:escape-html-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        escape-html-uri(
  "http://www.example.com/00/Weather/CA/Los Angeles#ocean"
)
      </test>
      <result>
         <assert-deep-eq>"http://www.example.com/00/Weather/CA/Los Angeles#ocean"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-escape-html-uri-002">
      <description>Test case for fn:escape-html-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        escape-html-uri(
  "javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~bébé');"
)
      </test>
      <result>
         <assert-deep-eq>"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-001">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains("tattoo", "t")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-002">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains("tattoo", "ttt")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-003">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains("", ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-004">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains(
  "abcdefghi",
  "-d-e-f-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-005">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains(
  "a*b*c*d*e*f*g*h*i*",
  "d-ef-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-006">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains(
  "abcd***e---f*--*ghi",
  "def",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-007">
      <description>Test case for fn:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-001">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with("tattoo", "tat")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-002">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with("tattoo", "att")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-003">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-004">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with(
  "abcdefghi",
  "-a-b-c-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-005">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with(
  "a*b*c*d*e*f*g*h*i*",
  "a-bc-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-006">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with(
  "abcd***e---f*--*ghi",
  "abcdef",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-007">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-008">
      <description>Test case for fn:starts-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with(
  "-abcdefghi",
  "-abc",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-001">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with("tattoo", "tattoo")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-002">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with("tattoo", "atto")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-003">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-004">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with(
  "abcdefghi",
  "-g-h-i-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-005">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with(
  "abcd***e---f*--*ghi",
  "defghi",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-006">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with(
  "abcd***e---f*--*ghi",
  "defghi",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-007">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with(
  (),
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-008">
      <description>Test case for fn:ends-with</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with(
  "abcdefghi",
  "ghi-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-001">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before("tattoo", "attoo")
      </test>
      <result>
         <assert-deep-eq>"t"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-002">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before("tattoo", "tatto")
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-003">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before((), ())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-004">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before(
  "abcdefghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-005">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before(
  "abc--d-e-fghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"abc--"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-006">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before(
  "a*b*c*d*e*f*g*h*i*",
  "***cde",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"a*b*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-before-007">
      <description>Test case for fn:substring-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-before(
  "Eureka!",
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-001">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after("tattoo", "tat")
      </test>
      <result>
         <assert-deep-eq>"too"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-002">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after("tattoo", "tattoo")
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-003">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after((), ())
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-004">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after(
  "abcdefghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"fghi"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-005">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after(
  "abc--d-e-fghi",
  "--d-e-",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"-fghi"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-006">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after(
  "a*b*c*d*e*f*g*h*i*",
  "***cde***",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"*f*g*h*i*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-substring-after-007">
      <description>Test case for fn:substring-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        substring-after(
  "Eureka!",
  "--***-*---",
  "http://www.w3.org/2013/collation/UCA?lang=en;alternate=blanked;strength=primary"
)
      </test>
      <result>
         <assert-deep-eq>"Eureka!"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-001">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        matches("abracadabra", "bra")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-002">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        matches("abracadabra", "^a.*a$")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-003">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        matches("abracadabra", "^bra")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-004">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        matches($poem, "Kaum.*krähen")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-005">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        matches($poem, "Kaum.*krähen", "s")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-006">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        matches($poem, "^Kaum.*gesehen,$", "m")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-007">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        matches($poem, "^Kaum.*gesehen,$")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-matches-008">
      <description>Test case for fn:matches</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $poem := 
          
&lt;poem author="Wilhelm Busch"&gt;
Kaum hat dies der Hahn gesehen,
Fängt er auch schon an zu krähen:
Kikeriki! Kikikerikih!!
Tak, tak, tak! - da kommen sie.
&lt;/poem&gt;
           return 

        
        matches($poem, "kiki", "i")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-001">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("abracadabra", "bra", "*")
      </test>
      <result>
         <assert-deep-eq>"a*cada*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-002">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("abracadabra", "a.*a", "*")
      </test>
      <result>
         <assert-deep-eq>"*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-003">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("abracadabra", "a.*?a", "*")
      </test>
      <result>
         <assert-deep-eq>"*c*bra"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-004">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("abracadabra", "a", "")
      </test>
      <result>
         <assert-deep-eq>"brcdbr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-005">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("abracadabra", "a(.)", "a$1$1")
      </test>
      <result>
         <assert-deep-eq>"abbraccaddabbra"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-006">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("AAAA", "A+", "b")
      </test>
      <result>
         <assert-deep-eq>"b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-007">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("AAAA", "A+?", "b")
      </test>
      <result>
         <assert-deep-eq>"bbbb"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-008">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace("darted", "^(.*?)d(.*)$", "$1c$2")
      </test>
      <result>
         <assert-deep-eq>"carted"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-009">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace(
  "abracadabra",
  "bra",
  action := function { "*" }
)
      </test>
      <result>
         <assert-deep-eq>"a*cada*"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-010">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace(
  "abracadabra",
  "bra",
  action := upper-case#1
)
      </test>
      <result>
         <assert-deep-eq>aBRAcadaBRA</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-011">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace(
  "Chapter 9",
  "[0-9]+",
  action := function { string(number(.) + 1) }
)
      </test>
      <result>
         <assert-deep-eq>"Chapter 10"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-012">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace(
  "LHR to LAX",
  "[A-Z]{3}",
  action := map {'LAX': 'Los Angeles', 'LHR': 'London' }
)
      </test>
      <result>
         <assert-deep-eq>"London to Los Angeles"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replace-013">
      <description>Test case for fn:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replace(
  "57°43′30″",
  "([0-9]+)°([0-9]+)′([0-9]+)″",
  action := function($s, $groups) {
    string(number($groups[1]) + number($groups[2]) ÷ 60 + number($groups[3]) ÷ 3600) || '°'
  }
)
      </test>
      <result>
         <assert-deep-eq>"57.725°"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-001">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize(" red green blue ")
      </test>
      <result>
         <assert-deep-eq>("red", "green", "blue")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-002">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize("The cat sat on the mat", "\s+")
      </test>
      <result>
         <assert-deep-eq>("The", "cat", "sat", "on", "the", "mat")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-003">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize(" red green blue ", "\s+")
      </test>
      <result>
         <assert-deep-eq>("", "red", "green", "blue", "")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-004">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize("1, 15, 24, 50", ",\s*")
      </test>
      <result>
         <assert-deep-eq>("1", "15", "24", "50")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-005">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize("1,15,,24,50,", ",")
      </test>
      <result>
         <assert-deep-eq>("1", "15", "", "24", "50", "")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tokenize-006">
      <description>Test case for fn:tokenize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tokenize(
  "Some unparsed &lt;br&gt; HTML &lt;BR&gt; text",
  "\s*&lt;br&gt;\s*", "i"
)
      </test>
      <result>
         <assert-deep-eq>("Some unparsed", "HTML", "text")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-analyze-string-001">
      <description>Test case for fn:analyze-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        analyze-string("The cat sat on the mat.", "\w+")
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match>The</match><non-match> </non-match><match>cat</match><non-match> </non-match><match>sat</match><non-match> </non-match><match>on</match><non-match> </non-match><match>the</match><non-match> </non-match><match>mat</match><non-match>.</non-match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-analyze-string-002">
      <description>Test case for fn:analyze-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        analyze-string(
  "2008-12-03",
  "^(\d+)\-(\d+)\-(\d+)$"
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match><group nr="1">2008</group>-<group nr="2">12</group>-<group nr="3">03</group></match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-analyze-string-003">
      <description>Test case for fn:analyze-string</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        analyze-string(
  "A1,C15,,D24, X50,",
  "([A-Z])([0-9]+)"
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<analyze-string-result xmlns="http://www.w3.org/2005/xpath-functions"><match><group nr="1">A</group><group nr="2">1</group></match><non-match>,</non-match><match><group nr="1">C</group><group nr="2">15</group></match><non-match>,,</non-match><match><group nr="1">D</group><group nr="2">24</group></match><non-match>, </non-match><match><group nr="1">X</group><group nr="2">50</group></match><non-match>,</non-match></analyze-string-result>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-token-001">
      <description>Test case for fn:contains-token</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-token("red green blue ", "red")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-token-002">
      <description>Test case for fn:contains-token</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-token(("red", "green", "blue"), " red ")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-token-003">
      <description>Test case for fn:contains-token</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-token("red, green, blue", "red")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-token-004">
      <description>Test case for fn:contains-token</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-token(
  "red green blue",
  "RED",
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-true-001">
      <description>Test case for fn:true</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        true()
      </test>
      <result>
         <assert-deep-eq>xs:boolean(1)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-false-001">
      <description>Test case for fn:false</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        false()
      </test>
      <result>
         <assert-deep-eq>xs:boolean(0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-boolean-001">
      <description>Test case for fn:boolean</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        boolean($abc[1])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-boolean-002">
      <description>Test case for fn:boolean</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        boolean($abc[0])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-boolean-003">
      <description>Test case for fn:boolean</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "")
          
           return 

        
        boolean($abc[3])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-not-001">
      <description>Test case for fn:not</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        not(true())
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-not-002">
      <description>Test case for fn:not</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        not(())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-not-003">
      <description>Test case for fn:not</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        not("false")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-years-from-duration-001">
      <description>Test case for fn:years-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        years-from-duration(
  xs:yearMonthDuration("P20Y15M")
)
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-years-from-duration-002">
      <description>Test case for fn:years-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        years-from-duration(
  xs:yearMonthDuration("-P15M")
)
      </test>
      <result>
         <assert-deep-eq>-1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-years-from-duration-003">
      <description>Test case for fn:years-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        years-from-duration(
  xs:dayTimeDuration("-P2DT15H")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-months-from-duration-001">
      <description>Test case for fn:months-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        months-from-duration(
  xs:yearMonthDuration("P20Y15M")
)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-months-from-duration-002">
      <description>Test case for fn:months-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        months-from-duration(
  xs:yearMonthDuration("-P20Y18M")
)
      </test>
      <result>
         <assert-deep-eq>-6</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-months-from-duration-003">
      <description>Test case for fn:months-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        months-from-duration(
  xs:dayTimeDuration("-P2DT15H0M0S")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-days-from-duration-001">
      <description>Test case for fn:days-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        days-from-duration(
  xs:dayTimeDuration("P3DT10H")
)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-days-from-duration-002">
      <description>Test case for fn:days-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        days-from-duration(
  xs:dayTimeDuration("P3DT55H")
)
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-days-from-duration-003">
      <description>Test case for fn:days-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        days-from-duration(
  xs:yearMonthDuration("P3Y5M")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-duration-001">
      <description>Test case for fn:hours-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-duration(
  xs:dayTimeDuration("P3DT10H")
)
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-duration-002">
      <description>Test case for fn:hours-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-duration(
  xs:dayTimeDuration("P3DT12H32M12S")
)
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-duration-003">
      <description>Test case for fn:hours-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-duration(
  xs:dayTimeDuration("PT123H")
)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-duration-004">
      <description>Test case for fn:hours-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-duration(
  xs:dayTimeDuration("-P3DT10H")
)
      </test>
      <result>
         <assert-deep-eq>-10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-minutes-from-duration-001">
      <description>Test case for fn:minutes-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        minutes-from-duration(
  xs:dayTimeDuration("P3DT10H")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-minutes-from-duration-002">
      <description>Test case for fn:minutes-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        minutes-from-duration(
  xs:dayTimeDuration("-P5DT12H30M")
)
      </test>
      <result>
         <assert-deep-eq>-30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-seconds-from-duration-001">
      <description>Test case for fn:seconds-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        seconds-from-duration(
  xs:dayTimeDuration("P3DT10H12.5S")
)
      </test>
      <result>
         <assert-deep-eq>12.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-seconds-from-duration-002">
      <description>Test case for fn:seconds-from-duration</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        seconds-from-duration(
  xs:dayTimeDuration("-PT256S")
)
      </test>
      <result>
         <assert-deep-eq>-16.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-dateTime-001">
      <description>Test case for fn:dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        dateTime(
  xs:date("1999-12-31"),
  xs:time("12:00:00")
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1999-12-31T12:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-dateTime-002">
      <description>Test case for fn:dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        dateTime(
  xs:date("1999-12-31"),
  xs:time("24:00:00")
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1999-12-31T00:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-dateTime-001">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-dateTime-002">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-dateTime(
  xs:dateTime("1999-05-31T21:30:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-dateTime-003">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-dateTime(
  xs:dateTime("1999-12-31T19:20:00")
)
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-dateTime-004">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-dateTime(
  xs:dateTime("1999-12-31T24:00:00")
)
      </test>
      <result>
         <assert-deep-eq>2000</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-dateTime-005">
      <description>Test case for fn:year-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-dateTime(
  xs:dateTime("-0002-06-06T00:00:00")
)
      </test>
      <result>
         <assert-deep-eq>-2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-month-from-dateTime-001">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        month-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-month-from-dateTime-002">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        month-from-dateTime(
  xs:dateTime("1999-12-31T19:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-month-from-dateTime-003">
      <description>Test case for fn:month-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        month-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T19:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-day-from-dateTime-001">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        day-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-day-from-dateTime-002">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        day-from-dateTime(
  xs:dateTime("1999-12-31T20:00:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-day-from-dateTime-003">
      <description>Test case for fn:day-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        day-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T19:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-dateTime-001">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-dateTime(
  xs:dateTime("1999-05-31T08:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>8</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-dateTime-002">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-dateTime(
  xs:dateTime("1999-12-31T21:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-dateTime-003">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-dateTime(
  adjust-dateTime-to-timezone(
    xs:dateTime("1999-12-31T21:20:00-05:00"),
    xs:dayTimeDuration("PT0S")
  )
)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-dateTime-004">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-dateTime(
  xs:dateTime("1999-12-31T12:00:00")
)
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-dateTime-005">
      <description>Test case for fn:hours-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-dateTime(
  xs:dateTime("1999-12-31T24:00:00")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-minutes-from-dateTime-001">
      <description>Test case for fn:minutes-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        minutes-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-minutes-from-dateTime-002">
      <description>Test case for fn:minutes-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        minutes-from-dateTime(
  xs:dateTime("1999-05-31T13:30:00+05:30")
)
      </test>
      <result>
         <assert-deep-eq>30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-seconds-from-dateTime-001">
      <description>Test case for fn:seconds-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        seconds-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-dateTime-001">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-dateTime(
  xs:dateTime("1999-05-31T13:20:00-05:00")
)
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-dateTime-002">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-dateTime(
  xs:dateTime("2000-06-12T13:20:00Z")
)
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("PT0S")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-dateTime-003">
      <description>Test case for fn:timezone-from-dateTime</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-dateTime(
  xs:dateTime("2004-08-27T00:00:00")
)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-date-001">
      <description>Test case for fn:year-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-date(
  xs:date("1999-05-31")
)
      </test>
      <result>
         <assert-deep-eq>1999</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-date-002">
      <description>Test case for fn:year-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-date(
  xs:date("2000-01-01+05:00")
)
      </test>
      <result>
         <assert-deep-eq>2000</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-year-from-date-003">
      <description>Test case for fn:year-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        year-from-date(
  xs:date("-0002-06-01")
)
      </test>
      <result>
         <assert-deep-eq>-2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-month-from-date-001">
      <description>Test case for fn:month-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        month-from-date(
  xs:date("1999-05-31-05:00")
)
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-month-from-date-002">
      <description>Test case for fn:month-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        month-from-date(
  xs:date("2000-01-01+05:00")
)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-day-from-date-001">
      <description>Test case for fn:day-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        day-from-date(
  xs:date("1999-05-31-05:00")
)
      </test>
      <result>
         <assert-deep-eq>31</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-day-from-date-002">
      <description>Test case for fn:day-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        day-from-date(
  xs:date("2000-01-01+05:00")
)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-date-001">
      <description>Test case for fn:timezone-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-date(
  xs:date("1999-05-31-05:00")
)
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-date-002">
      <description>Test case for fn:timezone-from-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-date(
  xs:date("2000-06-12Z")
)
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("PT0S")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-time-001">
      <description>Test case for fn:hours-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-time(xs:time("11:23:00"))
      </test>
      <result>
         <assert-deep-eq>11</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-time-002">
      <description>Test case for fn:hours-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-time(xs:time("21:23:00"))
      </test>
      <result>
         <assert-deep-eq>21</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-time-003">
      <description>Test case for fn:hours-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-time(xs:time("01:23:00+05:00"))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-time-004">
      <description>Test case for fn:hours-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-time(
  adjust-time-to-timezone(
    xs:time("01:23:00+05:00"),
    xs:dayTimeDuration("PT0S")
  )
)
      </test>
      <result>
         <assert-deep-eq>20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-hours-from-time-005">
      <description>Test case for fn:hours-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        hours-from-time(xs:time("24:00:00"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-minutes-from-time-001">
      <description>Test case for fn:minutes-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        minutes-from-time(xs:time("13:00:00Z"))
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-seconds-from-time-001">
      <description>Test case for fn:seconds-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        seconds-from-time(xs:time("13:20:10.5"))
      </test>
      <result>
         <assert-deep-eq>10.5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-time-001">
      <description>Test case for fn:timezone-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-time(xs:time("13:20:00-05:00"))
      </test>
      <result>
         <assert-deep-eq>xs:dayTimeDuration("-PT5H")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-timezone-from-time-002">
      <description>Test case for fn:timezone-from-time</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        timezone-from-time(xs:time("13:20:00"))
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-002">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00')
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T12:00:00-05:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-003">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00'),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00-10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-004">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T07:00:00-10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-005">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  xs:dayTimeDuration("PT10H")
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-08T03:00:00+10:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-006">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T00:00:00+01:00'),
  xs:dayTimeDuration("-PT8H")
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-06T15:00:00-08:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-007">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00'),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-dateTime-to-timezone-008">
      <description>Test case for fn:adjust-dateTime-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-dateTime-to-timezone(
  xs:dateTime('2002-03-07T10:00:00-07:00'),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:dateTime('2002-03-07T10:00:00')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-date-to-timezone-003">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-date-to-timezone(
  xs:date("2002-03-07"),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-date-to-timezone-004">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-date-to-timezone(
  xs:date("2002-03-07-07:00"),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-06-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-date-to-timezone-005">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-date-to-timezone(
  xs:date("2002-03-07"),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-date-to-timezone-006">
      <description>Test case for fn:adjust-date-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-date-to-timezone(
  xs:date("2002-03-07-07:00"),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:date("2002-03-07")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-002">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-time-to-timezone(
  xs:time("10:00:00-07:00")
)
      </test>
      <result>
         <assert-deep-eq>xs:time("12:00:00-05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-003">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-time-to-timezone(
  xs:time("10:00:00"),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-004">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $tz-10 := xs:dayTimeDuration("-PT10H")
          
           return 

        
        adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  $tz-10
)
      </test>
      <result>
         <assert-deep-eq>xs:time("07:00:00-10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-005">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-time-to-timezone(
  xs:time("10:00:00"),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-006">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  ()
)
      </test>
      <result>
         <assert-deep-eq>xs:time("10:00:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-adjust-time-to-timezone-007">
      <description>Test case for fn:adjust-time-to-timezone</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        adjust-time-to-timezone(
  xs:time("10:00:00-07:00"),
  xs:dayTimeDuration("PT10H")
)
      </test>
      <result>
         <assert-deep-eq>xs:time("03:00:00+10:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-ietf-date-001">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-ietf-date("Wed, 06 Jun 1994 07:29:35 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-ietf-date-002">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-ietf-date("Wed, 6 Jun 94 07:29:35 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-ietf-date-003">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-ietf-date("Wed Jun 06 11:54:45 EST 2013")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("2013-06-06T11:54:45-05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-ietf-date-004">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-ietf-date("Sunday, 06-Nov-94 08:49:37 GMT")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-11-06T08:49:37Z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-ietf-date-005">
      <description>Test case for fn:parse-ietf-date</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-ietf-date("Wed, 6 Jun 94 07:29:35 +0500")
      </test>
      <result>
         <assert-deep-eq>xs:dateTime("1994-06-06T07:29:35+05:00")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-expanded-QName-001">
      <description>Test case for fn:expanded-QName</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        QName("http:/example.com", "person")
=&gt; expanded-QName()
      </test>
      <result>
         <assert-deep-eq>"Q{http://example.com}person"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-expanded-QName-002">
      <description>Test case for fn:expanded-QName</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        QName("", "person")
=&gt; expanded-QName()
      </test>
      <result>
         <assert-deep-eq>"Q{}person"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-local-name-from-QName-001">
      <description>Test case for fn:local-name-from-QName</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        local-name-from-QName(
  QName("http://www.example.com/example", "person")
)
      </test>
      <result>
         <assert-deep-eq>"person"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-namespace-uri-from-QName-001">
      <description>Test case for fn:namespace-uri-from-QName</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        namespace-uri-from-QName(
  QName("http://www.example.com/example", "person")
)
      </test>
      <result>
         <assert-deep-eq>xs:anyURI("http://www.example.com/example")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-namespace-uri-for-prefix-001">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        namespace-uri-for-prefix("z", $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/two"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-namespace-uri-for-prefix-002">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        namespace-uri-for-prefix("", $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/one"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-namespace-uri-for-prefix-003">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        namespace-uri-for-prefix((), $e)
      </test>
      <result>
         <assert-deep-eq>"http://example.org/one"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-namespace-uri-for-prefix-004">
      <description>Test case for fn:namespace-uri-for-prefix</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        namespace-uri-for-prefix("xml", $e)
      </test>
      <result>
         <assert-deep-eq>"http://www.w3.org/XML/1998/namespace"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-in-scope-namespaces-001">
      <description>Test case for fn:in-scope-namespaces</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
&lt;z:a xmlns="http://example.org/one" xmlns:z="http://example.org/two"&gt;
  &lt;b xmlns=""/&gt;
&lt;/z:a&gt;
           return 

        
        in-scope-namespaces($e)
      </test>
      <result>
         <assert-deep-eq>map{"": "http://example.org/one", "z": "http://example.org/two",
                  "xml": "http://www.w3.org/XML/1998/namespace"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-number-001">
      <description>Test case for fn:number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item1 := $po/line-item[1]
          
           return 

        
        number($item1/quantity)
      </test>
      <result>
         <assert-deep-eq>5.0e0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-number-002">
      <description>Test case for fn:number</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item2 := $po/line-item[2]
          
           return 

        
        number($item2/description)
      </test>
      <result>
         <assert-deep-eq>xs:double('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-001">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path($e)
      </test>
      <result>
         <assert-deep-eq>'/'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-002">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path($e/*:p)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-003">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path($e/*:p/@xml:lang)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/@Q{http://www.w3.org/XML/1998/namespace}lang'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-004">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path($e/*:p/@author)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/@author'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-005">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path($e/*:p/*:br[2])
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/Q{http://example.com/one}br[2]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-006">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          
document {            
&lt;p xmlns="http://example.com/one" xml:lang="de" author="Friedrich von Schiller"&gt;
Freude, schöner Götterfunken,&lt;br/&gt;
Tochter aus Elysium,&lt;br/&gt;
Wir betreten feuertrunken,&lt;br/&gt;
Himmlische, dein Heiligtum.&lt;/p&gt;}
         
           return 

        
        path(
  $e//text()[
    starts-with(normalize-space(), 'Tochter')
  ]
)
      </test>
      <result>
         <assert-deep-eq>'/Q{http://example.com/one}p[1]/text()[2]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-007">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
  &lt;employee xml:id="ID21256"&gt;
     &lt;empnr&gt;E21256&lt;/empnr&gt;
     &lt;first&gt;John&lt;/first&gt;
     &lt;last&gt;Brown&lt;/last&gt;
  &lt;/employee&gt;
         
           return 

        
        path($emp)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-008">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
  &lt;employee xml:id="ID21256"&gt;
     &lt;empnr&gt;E21256&lt;/empnr&gt;
     &lt;first&gt;John&lt;/first&gt;
     &lt;last&gt;Brown&lt;/last&gt;
  &lt;/employee&gt;
         
           return 

        
        path($emp/@xml:id)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()/@Q{http://www.w3.org/XML/1998/namespace}id'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-path-009">
      <description>Test case for fn:path</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
  &lt;employee xml:id="ID21256"&gt;
     &lt;empnr&gt;E21256&lt;/empnr&gt;
     &lt;first&gt;John&lt;/first&gt;
     &lt;last&gt;Brown&lt;/last&gt;
  &lt;/employee&gt;
         
           return 

        
        path($emp/empnr)
      </test>
      <result>
         <assert-deep-eq>'Q{http://www.w3.org/2005/xpath-functions}root()/Q{}empnr[1]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-of-001">
      <description>Test case for fn:index-of</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-of((10, 20, 30, 40), 35)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-of-002">
      <description>Test case for fn:index-of</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-of((10, 20, 30, 30, 20, 10), 20)
      </test>
      <result>
         <assert-deep-eq>(2, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-of-003">
      <description>Test case for fn:index-of</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-of(
  ("a", "sport", "and", "a", "pastime"),
  "a"
)
      </test>
      <result>
         <assert-deep-eq>(1, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-of-004">
      <description>Test case for fn:index-of</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-of(current-date(), 23)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-of-005">
      <description>Test case for fn:index-of</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-of([1, [5, 6], [6, 7]], 6)
      </test>
      <result>
         <assert-deep-eq>(3, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-empty-001">
      <description>Test case for fn:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        empty((1,2,3)[10])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-empty-002">
      <description>Test case for fn:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        empty(remove(("hello", "world"), 1))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-empty-003">
      <description>Test case for fn:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        empty([])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-empty-004">
      <description>Test case for fn:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        empty(map{})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-empty-005">
      <description>Test case for fn:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        empty("")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-exists-001">
      <description>Test case for fn:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        exists(remove(("hello"), 1))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-exists-002">
      <description>Test case for fn:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        exists(remove(("hello", "world"), 1))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-exists-003">
      <description>Test case for fn:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        exists([])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-exists-004">
      <description>Test case for fn:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        exists(map{})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-exists-005">
      <description>Test case for fn:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        exists("")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-distinct-values-001">
      <description>Test case for fn:distinct-values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        distinct-values((1, 2.0, 3, 2))
      </test>
      <result>
         <assert-permutation>(1, 3, 2.0)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-fn-distinct-values-002">
      <description>Test case for fn:distinct-values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        distinct-values((
  xs:untypedAtomic("cherry"),
  xs:untypedAtomic("plum"),
  xs:untypedAtomic("plum")
))
      </test>
      <result>
         <assert-permutation>(xs:untypedAtomic("cherry"),
                  xs:untypedAtomic("plum"))</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-fn-duplicate-values-001">
      <description>Test case for fn:duplicate-values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        duplicate-values((1, 2, 3, 1.0, 1e0))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-duplicate-values-002">
      <description>Test case for fn:duplicate-values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        duplicate-values(1 to 100)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-duplicate-values-003">
      <description>Test case for fn:duplicate-values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        duplicate-values(('1', &lt;x&gt;1&lt;/x&gt;, '2', 2))
      </test>
      <result>
         <assert-deep-eq>"1"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-identity-001">
      <description>Test case for fn:identity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        identity(0)
      </test>
      <result>
         <assert-deep-eq>(0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-identity-002">
      <description>Test case for fn:identity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        identity(1 to 10)
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-identity-003">
      <description>Test case for fn:identity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-xml('&lt;a/&gt;') ! (identity(/) is /)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-identity-004">
      <description>Test case for fn:identity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        identity(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-insert-before-001">
      <description>Test case for fn:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        insert-before($abc, 0, "z")
      </test>
      <result>
         <assert-deep-eq>("z", "a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-insert-before-002">
      <description>Test case for fn:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        insert-before($abc, 1, "z")
      </test>
      <result>
         <assert-deep-eq>("z", "a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-insert-before-003">
      <description>Test case for fn:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        insert-before($abc, 2, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "z", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-insert-before-004">
      <description>Test case for fn:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        insert-before($abc, 3, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "b", "z", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-insert-before-005">
      <description>Test case for fn:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        insert-before($abc, 4, "z")
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c", "z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-001">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove($abc, 0)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-002">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove($abc, 1)
      </test>
      <result>
         <assert-deep-eq>("b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-003">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove($abc, 6)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-004">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove((), 3)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-005">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove($abc, 2 to 3)
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-remove-006">
      <description>Test case for fn:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        remove($abc, ())
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-head-001">
      <description>Test case for fn:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        head(1 to 5)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-head-002">
      <description>Test case for fn:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        head(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-head-003">
      <description>Test case for fn:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        head(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-head-004">
      <description>Test case for fn:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        head([1,2,3])
      </test>
      <result>
         <assert-deep-eq>[1,2,3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tail-001">
      <description>Test case for fn:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tail(1 to 5)
      </test>
      <result>
         <assert-deep-eq>(2, 3, 4, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tail-002">
      <description>Test case for fn:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tail(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>("b", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tail-003">
      <description>Test case for fn:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tail("a")
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tail-004">
      <description>Test case for fn:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tail(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-tail-005">
      <description>Test case for fn:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        tail([1,2,3])
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-trunk-001">
      <description>Test case for fn:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        trunk(1 to 5)
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-trunk-002">
      <description>Test case for fn:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        trunk(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>("a", "b")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-trunk-003">
      <description>Test case for fn:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        trunk("a")
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-trunk-004">
      <description>Test case for fn:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        trunk(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-trunk-005">
      <description>Test case for fn:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        trunk([1,2,3])
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replicate-001">
      <description>Test case for fn:replicate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replicate(0, 6)
      </test>
      <result>
         <assert-deep-eq>(0, 0, 0, 0, 0, 0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replicate-002">
      <description>Test case for fn:replicate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replicate(("A", "B", "C"), 3)
      </test>
      <result>
         <assert-deep-eq>("A", "B", "C", "A", "B", "C", "A", "B", "C")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replicate-003">
      <description>Test case for fn:replicate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replicate((), 5)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replicate-004">
      <description>Test case for fn:replicate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replicate(("A", "B", "C"), 1)
      </test>
      <result>
         <assert-deep-eq>("A", "B", "C")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-replicate-005">
      <description>Test case for fn:replicate</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        replicate(("A", "B", "C"), 0)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-intersperse-001">
      <description>Test case for fn:intersperse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        intersperse(1 to 5, "|")
      </test>
      <result>
         <assert-deep-eq>(1, "|", 2, "|" , 3, "|", 4, "|", 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-intersperse-002">
      <description>Test case for fn:intersperse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        intersperse((), "|")
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-intersperse-003">
      <description>Test case for fn:intersperse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        intersperse("A", "|")
      </test>
      <result>
         <assert-deep-eq>"A"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-intersperse-004">
      <description>Test case for fn:intersperse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        intersperse(1 to 5, ())
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-intersperse-005">
      <description>Test case for fn:intersperse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        intersperse(1 to 5, ("⅓", "⅔"))
      </test>
      <result>
         <assert-deep-eq>(1, "⅓", "⅔", 2, "⅓", "⅔", 3, "⅓", "⅔", 4, "⅓", "⅔", 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-foot-001">
      <description>Test case for fn:foot</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        foot(1 to 5)
      </test>
      <result>
         <assert-deep-eq>(5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-foot-002">
      <description>Test case for fn:foot</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        foot(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-reverse-001">
      <description>Test case for fn:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $abc := ("a", "b", "c")
          
           return 

        
        reverse($abc)
      </test>
      <result>
         <assert-deep-eq>("c", "b", "a")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-reverse-002">
      <description>Test case for fn:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        reverse(("hello"))
      </test>
      <result>
         <assert-deep-eq>("hello")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-reverse-003">
      <description>Test case for fn:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        reverse(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-reverse-004">
      <description>Test case for fn:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        reverse([1,2,3])
      </test>
      <result>
         <assert-deep-eq>[1,2,3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-reverse-005">
      <description>Test case for fn:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        reverse(([1,2,3],[4,5,6]))
      </test>
      <result>
         <assert-deep-eq>([4,5,6],[1,2,3])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-subsequence-001">
      <description>Test case for fn:subsequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq := ("item1", "item2", "item3", "item4", "item5")
          
           return 

        
        subsequence($seq, 4)
      </test>
      <result>
         <assert-deep-eq>("item4", "item5")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-subsequence-002">
      <description>Test case for fn:subsequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq := ("item1", "item2", "item3", "item4", "item5")
          
           return 

        
        subsequence($seq, 3, 2)
      </test>
      <result>
         <assert-deep-eq>("item3", "item4")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-001">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at(11 to 20, 4)
      </test>
      <result>
         <assert-deep-eq>14</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-002">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at(11 to 20, 4 to 6)
      </test>
      <result>
         <assert-deep-eq>14, 15, 16</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-003">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at(11 to 20, (7, 3))
      </test>
      <result>
         <assert-deep-eq>17, 13</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-004">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at(11 to 20, index-of(("a", "b", "c"), "b"))
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-005">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at(characters("quintessential"), (4, 8, 3))
      </test>
      <result>
         <assert-deep-eq>("n", "s", "i")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-006">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at((), 832)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-at-007">
      <description>Test case for fn:items-at</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-at((), ())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-001">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 2, end := 4)
      </test>
      <result>
         <assert-deep-eq>("b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-002">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 2)
      </test>
      <result>
         <assert-deep-eq>("b", "c", "d", "e")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-003">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, end := 2)
      </test>
      <result>
         <assert-deep-eq>("a", "b")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-004">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 3, end := 3)
      </test>
      <result>
         <assert-deep-eq>("c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-005">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 4, end := 3)
      </test>
      <result>
         <assert-deep-eq>("d", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-006">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 2, end := 5, step := 2)
      </test>
      <result>
         <assert-deep-eq>("b", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-007">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 5, end := 2, step := -2)
      </test>
      <result>
         <assert-deep-eq>("e", "c")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-008">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 2, end := 5, step := -2)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-009">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 5, end := 2, step := 2)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-010">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c", "d", "e")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-011">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -1)
      </test>
      <result>
         <assert-deep-eq>("e")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-012">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -3)
      </test>
      <result>
         <assert-deep-eq>("c", "d", "e")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-013">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, end := -2)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-014">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := 2, end := -2)
      </test>
      <result>
         <assert-deep-eq>("b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-015">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -2, end := 2)
      </test>
      <result>
         <assert-deep-eq>("d", "c", "b")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-016">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -4, end := -2)
      </test>
      <result>
         <assert-deep-eq>("b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-017">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -2, end := -4)
      </test>
      <result>
         <assert-deep-eq>("d", "c", "b")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-018">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -4, end := -2, step := 2)
      </test>
      <result>
         <assert-deep-eq>("b", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-019">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice($in, start := -2, end := -4, step := -2)
      </test>
      <result>
         <assert-deep-eq>("d", "b")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-slice-020">
      <description>Test case for fn:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ('a', 'b', 'c', 'd', 'e')
          
           return 

        
        slice(("a", "b", "c", "d"), 0)
      </test>
      <result>
         <assert-deep-eq>("a", "b", "c", "d")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-001">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-002">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(1 to 10, 1 to 5)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-003">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(1 to 10, ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-004">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(1 to 10, 1 to 10)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-005">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(1 to 10, 1)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-006">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(
  1 to 10,
  101 to 105,
  function($x, $y) { $x mod 100 = $y mod 100 }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-007">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(
  ("A", "B", "C"),
  ("a", "b"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-008">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $p := parse-xml("&lt;doc&gt;&lt;chap&gt;&lt;p/&gt;&lt;p/&gt;&lt;/chap&gt;&lt;/doc&gt;")//p[2]
return starts-with-sequence(
  $p/ancestor::*[1],
  $p/parent::*,
  op("is")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-009">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(10 to 20, 1 to 5, op("gt"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-010">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(
  ("Alpha", "Beta", "Gamma"),
  ("A", "B"),
  starts-with#2
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-starts-with-sequence-011">
      <description>Test case for fn:starts-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        starts-with-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"),
  1 to 3,
  function($x, $y) { ends-with($x, 'a' ) }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-001">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-002">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(1 to 10, 5 to 10)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-003">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(1 to 10, ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-004">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(1 to 10, 1 to 10)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-005">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(1 to 10, 10)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-006">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(
  1 to 10,
  108 to 110,
  function($x, $y) { $x mod 100 = $y mod 100 }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-007">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(
  ("A", "B", "C"),
  ("b", "c"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-008">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $p := parse-xml("&lt;doc&gt;&lt;chap&gt;&lt;p/&gt;&lt;p/&gt;&lt;/chap&gt;&lt;/doc&gt;")//p[2]
return ends-with-sequence(
  $p/ancestor::node()[last()],
  $p/root(),
  op("is")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-009">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(10 to 20, 1 to 5, op("gt"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-010">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(
  ("Alpha", "Beta", "Gamma"),
  ("B", "G"),
  starts-with#2
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-ends-with-sequence-011">
      <description>Test case for fn:ends-with-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ends-with-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"),
  1 to 2,
  function($x, $y) { string-length($x) eq 5 }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-001">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence((), ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-002">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(1 to 10, 3 to 6)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-003">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(1 to 10, (2, 4, 6))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-004">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(1 to 10, ())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-005">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(1 to 10, 1 to 10)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-006">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(1 to 10, 5)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-007">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(
  1 to 10,
  103 to 105,
  function($x, $y) { $x mod 100 = $y mod 100 }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-008">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(
  ("A", "B", "C", "D"),
  ("b", "c"),
  function($x, $y) {
    compare(
      $x,
      $y,
      "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
    ) eq 0
  }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-009">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $chap := parse-xml("&lt;doc&gt;&lt;chap&gt;&lt;h1/&gt;&lt;p/&gt;&lt;p/&gt;&lt;footnote/&gt;&lt;/chap&gt;&lt;/doc&gt;")//chap
return contains-sequence(
  $chap ! child::*,
  $chap ! child::p,
  op("is")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-010">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(10 to 20, (5, 3, 1), op("gt"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-011">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(
  ("Alpha", "Beta", "Gamma", "Delta"), ("B", "G"),
  starts-with#2
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-contains-sequence-012">
      <description>Test case for fn:contains-sequence</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        contains-sequence(
  ("Zero", "Alpha", "Beta", "Gamma", "Delta", "Epsilon"),
  1 to 4,
  function($x, $y) { ends-with($x, 'a') }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-unordered-001">
      <description>Test case for fn:unordered</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        unordered((1, 2, 3, 4, 5))
      </test>
      <result>
         <assert-permutation>(1, 2, 3, 4, 5)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-fn-void-001">
      <description>Test case for fn:void</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        void(1 to 1000000)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-void-002">
      <description>Test case for fn:void</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:get(array { 1, 2, 3 }, 4, void#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-void-003">
      <description>Test case for fn:void</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for $f in (identity#1, void#1) return $f(123)
      </test>
      <result>
         <assert-deep-eq>123</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-001">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt;
  &lt;name last="Parker" first="Peter"/&gt;
  &lt;name last="Barker" first="Bob"/&gt;
  &lt;name last="Parker" first="Peter"/&gt;
&lt;/attendees&gt;
           return 

        
        deep-equal($at, $at/*)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-002">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt;
  &lt;name last="Parker" first="Peter"/&gt;
  &lt;name last="Barker" first="Bob"/&gt;
  &lt;name last="Parker" first="Peter"/&gt;
&lt;/attendees&gt;
           return 

        
        deep-equal($at/name[1], $at/name[2])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-003">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt;
  &lt;name last="Parker" first="Peter"/&gt;
  &lt;name last="Barker" first="Bob"/&gt;
  &lt;name last="Parker" first="Peter"/&gt;
&lt;/attendees&gt;
           return 

        
        deep-equal($at/name[1], $at/name[3])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-004">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $at := 
          &lt;attendees&gt;
  &lt;name last="Parker" first="Peter"/&gt;
  &lt;name last="Barker" first="Bob"/&gt;
  &lt;name last="Parker" first="Peter"/&gt;
&lt;/attendees&gt;
           return 

        
        deep-equal($at/name[1], 'Peter Parker')
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-005">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(map{1:'a', 2:'b'}, map{2:'b', 1:'a'})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-006">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal([1, 2, 3], [1, 2, 3])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-007">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal((1, 2, 3), [1, 2, 3])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-008">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml("&lt;a xmlns='AA'/&gt;"),
    parse-xml("&lt;p:a xmlns:p='AA'/&gt;"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-009">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml("&lt;a xmlns='AA'/&gt;"),
    parse-xml("&lt;p:a xmlns:p='AA'/&gt;"),
    options := map{'namespace-prefixes':true()})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-010">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml("&lt;a xmlns='AA'/&gt;"),
    parse-xml("&lt;p:a xmlns:p='AA'/&gt;"),
    options := map{'in-scope-namespaces':true()})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-011">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml("&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;"),
    parse-xml("&lt;a&gt;&lt;c/&gt;&lt;b/&gt;&lt;/a&gt;"))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-012">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml("&lt;a&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;"),
    parse-xml("&lt;a&gt;&lt;c/&gt;&lt;b/&gt;&lt;/a&gt;"),
    options := map{'unordered-elements': parse-QName('a')})
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-013">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml(
      "&lt;para style='bold'&gt;&lt;span&gt;x&lt;/span&gt;&lt;/para&gt;"),
    parse-xml(
      "&lt;para style=' bold'&gt; &lt;span&gt;x&lt;/span&gt;&lt;/para&gt;"))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-deep-equal-014">
      <description>Test case for fn:deep-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        deep-equal(
    parse-xml(
      "&lt;para style='bold'&gt;&lt;span&gt;x&lt;/span&gt;&lt;/para&gt;"),
    parse-xml(
      "&lt;para style=' bold'&gt; &lt;span&gt;x&lt;/span&gt;&lt;/para&gt;"),
    options := map{'whitespace': 'normalize'})
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-001">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $po := 
          &lt;PurchaseOrder&gt; &lt;line-item&gt;
         &lt;description&gt;Large widget&lt;/description&gt; &lt;price&gt;8.95&lt;/price&gt;
         &lt;quantity&gt;5.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Small widget&lt;/description&gt; &lt;price&gt;3.99&lt;/price&gt;
         &lt;quantity&gt;2.0&lt;/quantity&gt; &lt;/line-item&gt; &lt;line-item&gt;
         &lt;description&gt;Tiny widget&lt;/description&gt; &lt;price&gt;1.49&lt;/price&gt;a
         &lt;quantity&gt;805&lt;/quantity&gt; &lt;/line-item&gt;
         &lt;/PurchaseOrder&gt;
           return 

        
          let $item1 := $po/line-item[1]
          
           return 

        
          let $item2 := $po/line-item[2]
          
           return 

        
          let $seq1 := ($item1, $item2)
          
           return 

        
        count($seq1)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-002">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq3 := ()
          
           return 

        
        count($seq3)
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-003">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq2 := (98.5, 98.3, 98.9)
          
           return 

        
        count($seq2)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-004">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq2 := (98.5, 98.3, 98.9)
          
           return 

        
        count($seq2[. &gt; 100])
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-005">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        count([])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-count-006">
      <description>Test case for fn:count</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        count([1,2,3])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-avg-001">
      <description>Test case for fn:avg</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        avg($seq3)
      </test>
      <result>
         <assert-deep-eq>4.0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-avg-002">
      <description>Test case for fn:avg</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        avg(($d1, $d2))
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P10Y5M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-avg-003">
      <description>Test case for fn:avg</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        avg(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-avg-004">
      <description>Test case for fn:avg</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        avg((xs:float('INF'), xs:float('-INF')))
      </test>
      <result>
         <assert-deep-eq>xs:float('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-avg-005">
      <description>Test case for fn:avg</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        avg(($seq3, xs:float('NaN')))
      </test>
      <result>
         <assert-deep-eq>xs:float('NaN')</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-max-001">
      <description>Test case for fn:max</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        max((3,4,5))
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-max-002">
      <description>Test case for fn:max</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        max([3,4,5])
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-max-003">
      <description>Test case for fn:max</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        max((xs:integer(5), xs:float(5.0), xs:double(0)))
      </test>
      <result>
         <assert-deep-eq>xs:double(5.0e0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-max-004">
      <description>Test case for fn:max</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        max((current-date(), xs:date("2100-01-01")))
      </test>
      <result>
         <assert-deep-eq>xs:date("2100-01-01")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-max-005">
      <description>Test case for fn:max</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        max(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"c"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-min-001">
      <description>Test case for fn:min</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        min((3,4,5))
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-min-002">
      <description>Test case for fn:min</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        min([3,4,5])
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-min-003">
      <description>Test case for fn:min</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        min((xs:integer(5), xs:float(5), xs:double(10)))
      </test>
      <result>
         <assert-deep-eq>xs:double(5.0e0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-min-004">
      <description>Test case for fn:min</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        min((current-date(), xs:date("1900-01-01")))
      </test>
      <result>
         <assert-deep-eq>xs:date("1900-01-01")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-min-005">
      <description>Test case for fn:min</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        min(("a", "b", "c"))
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-001">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        sum(($d1, $d2))
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P20Y10M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-002">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
          let $seq1 := ($d1, $d2)
          
           return 

        
        sum(
  $seq1[. lt xs:yearMonthDuration('P3M')],
  xs:yearMonthDuration('P0M')
)
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P0M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-003">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $seq3 := (3, 4, 5)
          
           return 

        
        sum($seq3)
      </test>
      <result>
         <assert-deep-eq>12</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-004">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sum(())
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-005">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sum((),())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-006">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sum((1 to 100)[. lt 0], 0) 
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-007">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $d1 := xs:yearMonthDuration("P20Y")
          
           return 

        
          let $d2 := xs:yearMonthDuration("P10M")
          
           return 

        
        sum(($d1, $d2), "ein Augenblick")
      </test>
      <result>
         <assert-deep-eq>xs:yearMonthDuration("P20Y10M")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-008">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sum([1, 2, 3])
      </test>
      <result>
         <assert-deep-eq>6</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sum-009">
      <description>Test case for fn:sum</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sum([[1, 2], [3, 4]])
      </test>
      <result>
         <assert-deep-eq>10</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-id-001">
      <description>Test case for fn:id</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
        validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/id('ID21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-id-002">
      <description>Test case for fn:id</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
        validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/id('E21256')/name()
      </test>
      <result>
         <assert-deep-eq>"empnr"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-element-with-id-001">
      <description>Test case for fn:element-with-id</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
         validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/element-with-id('ID21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-element-with-id-002">
      <description>Test case for fn:element-with-id</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
         validate lax{    
          document{
            &lt;employee xml:id="ID21256"
                      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                      xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
            &lt;/employee&gt;
          }
        }
         
           return 

        
        $emp/element-with-id('E21256')/name()
      </test>
      <result>
         <assert-deep-eq>"employee"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-idref-001">
      <description>Test case for fn:idref</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
      validate lax {  
        document {    
          &lt;employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;  
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;Anil&lt;/first&gt;
               &lt;last&gt;Singh&lt;/last&gt;
               &lt;deputy xsi:type="xs:IDREF"&gt;E30561&lt;/deputy&gt;
            &lt;/employee&gt;
            &lt;employee xml:id="ID30561"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E30561&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
               &lt;manager xsi:type="xs:IDREF"&gt;ID21256&lt;/manager&gt;
            &lt;/employee&gt;
          &lt;/employees&gt;
        }
      }
         
           return 

        
        $emp/(
  element-with-id('ID21256')/@xml:id =&gt; idref()
)/ancestor::employee/last
=&gt; string()
      </test>
      <result>
         <assert-deep-eq>"Brown"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-idref-002">
      <description>Test case for fn:idref</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $emp := 
          
      validate lax {  
        document {    
          &lt;employees xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
                     xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;  
            &lt;employee xml:id="ID21256"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E21256&lt;/empnr&gt;
               &lt;first&gt;Anil&lt;/first&gt;
               &lt;last&gt;Singh&lt;/last&gt;
               &lt;deputy xsi:type="xs:IDREF"&gt;E30561&lt;/deputy&gt;
            &lt;/employee&gt;
            &lt;employee xml:id="ID30561"&gt;
               &lt;empnr xsi:type="xs:ID"&gt;E30561&lt;/empnr&gt;
               &lt;first&gt;John&lt;/first&gt;
               &lt;last&gt;Brown&lt;/last&gt;
               &lt;manager xsi:type="xs:IDREF"&gt;ID21256&lt;/manager&gt;
            &lt;/employee&gt;
          &lt;/employees&gt;
        }
      }
         
           return 

        
        $emp/(
  element-with-id('E30561')/empnr =&gt; idref()
)/ancestor::employee/last
=&gt; string()
      </test>
      <result>
         <assert-deep-eq>"Singh"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-serialize-001">
      <description>Test case for fn:serialize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $params := 
          
&lt;output:serialization-parameters 
        xmlns:output="http://www.w3.org/2010/xslt-xquery-serialization"&gt;
  &lt;output:omit-xml-declaration value="yes"/&gt;
&lt;/output:serialization-parameters&gt;
         
           return 

        
          let $data := 
          
&lt;a b="3"/&gt;
         
           return 

        
        serialize($data, $params)
      </test>
      <result>
         <assert-deep-eq>'&lt;a b="3"/&gt;'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-serialize-002">
      <description>Test case for fn:serialize</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $data := 
          
&lt;a b="3"/&gt;
         
           return 

        
        serialize(
  $data,
  map { "method": "xml", "omit-xml-declaration": true() }
)
      </test>
      <result>
         <assert-deep-eq>'&lt;a b="3"/&gt;'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-last-001">
      <description>Test case for fn:last</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        (1 to 20)[last() - 1]
      </test>
      <result>
         <assert-deep-eq>19</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-lookup-001">
      <description>Test case for fn:function-lookup</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-lookup(xs:QName('fn:substring'), 2)('abcd', 2)
      </test>
      <result>
         <assert-deep-eq>'bcd'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-name-001">
      <description>Test case for fn:function-name</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-name(substring#2)
      </test>
      <result>
         <assert-deep-eq>QName("http://www.w3.org/2005/xpath-functions", "fn:substring")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-name-002">
      <description>Test case for fn:function-name</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-name(function($node) { count($node/*) })
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-arity-001">
      <description>Test case for fn:function-arity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-arity(substring#2)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-arity-002">
      <description>Test case for fn:function-arity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-arity(function($node) { name($node) })
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-arity-003">
      <description>Test case for fn:function-arity</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $initial := substring(?, 1, 1)
return function-arity($initial)
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-annotations-001">
      <description>Test case for fn:function-annotations</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        
declare %private function local:inc($c) { $c + 1 };
function-annotations(local:inc#1)
      </test>
      <result>
         <assert-deep-eq>map { Q{http://www.w3.org/2012/xquery}private: () }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-annotations-002">
      <description>Test case for fn:function-annotations</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        
let $old := %local:deprecated('0.1', '0.2') function() {}
let $ann := function-annotations($old)
return map:keys($ann) || ': ' || string-join(map:values($ann), ', ')

      </test>
      <result>
         <assert-deep-eq>local:deprecated: 0.1, 0.2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-function-annotations-003">
      <description>Test case for fn:function-annotations</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        function-annotations(true#0)
      </test>
      <result>
         <assert-deep-eq>map { }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-001">
      <description>Test case for fn:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each(1 to 5, function($a) { $a * $a })
      </test>
      <result>
         <assert-deep-eq>(1, 4, 9, 16, 25)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-002">
      <description>Test case for fn:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each(
  ("john", "jane"),
  string-to-codepoints#1
)
      </test>
      <result>
         <assert-deep-eq>(106, 111, 104, 110, 106, 97, 110, 101)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-003">
      <description>Test case for fn:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each(("23", "29"), xs:int#1)
      </test>
      <result>
         <assert-deep-eq>(23, 29)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-filter-001">
      <description>Test case for fn:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        filter(1 to 10, function($a) {$a mod 2 = 0})
      </test>
      <result>
         <assert-deep-eq>(2, 4, 6, 8, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-filter-002">
      <description>Test case for fn:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        filter((), lang("en", ?))
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-001">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  1 to 5,
  0,
  function($a, $b) { $a + $b }
)
      </test>
      <result>
         <assert-deep-eq>15</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-002">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  (2,3,5,7),
  1,
  function($a, $b) { $a * $b }
)
      </test>
      <result>
         <assert-deep-eq>210</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-003">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  (true(), false(), false()),
  false(),
  function($a, $b) { $a or $b }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-004">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  (true(), false(), false()),
  false(),
  function($a, $b) { $a and $b }
)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-005">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  1 to 5,
  (),
  function($a, $b) { $b, $a }
)
      </test>
      <result>
         <assert-deep-eq>(5,4,3,2,1)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-006">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  1 to 5,
  "",
  concat(?, ".", ?)
)
      </test>
      <result>
         <assert-deep-eq>".1.2.3.4.5"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-007">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  1 to 5,
  "$zero",
  concat("$f(", ?, ", ", ?, ")")
)
      </test>
      <result>
         <assert-deep-eq>"$f($f($f($f($f($zero, 1), 2), 3), 4), 5)"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-left-008">
      <description>Test case for fn:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  1 to 5,
  map { },
  function($map, $n) { map:put($map, $n, $n * 2) }
)
      </test>
      <result>
         <assert-deep-eq>map{1:2, 2:4, 3:6, 4:8, 5:10}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-right-001">
      <description>Test case for fn:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-right(
  1 to 5,
  0,
  function($a, $b) { $a + $b }
)
      </test>
      <result>
         <assert-deep-eq>15</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-right-002">
      <description>Test case for fn:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-right(
  1 to 5,
  "",
  concat(?, ".", ?)
)
      </test>
      <result>
         <assert-deep-eq>"1.2.3.4.5."</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-fold-right-003">
      <description>Test case for fn:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-right(
  1 to 5,
  "$zero",
  concat("$f(", ?, ", ", ?, ")")
)
      </test>
      <result>
         <assert-deep-eq>"$f(1, $f(2, $f(3, $f(4, $f(5, $zero)))))"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iterate-while-001">
      <description>Test case for fn:iterate-while</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        iterate-while(
  2,
  function { . &lt; 100 },
  function { . * . }
)
      </test>
      <result>
         <assert-deep-eq>256</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iterate-while-002">
      <description>Test case for fn:iterate-while</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $input := (0 to 4, 6 to 10)
return iterate-while(
  0, 
  function($n) { $n = $input }, 
  function($n) { $n + 1 }
)
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iterate-while-003">
      <description>Test case for fn:iterate-while</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        iterate-while(
  1 to 9,
  function($seq) { head($seq) &lt; 5 },
  function($seq) { tail($seq) }
)
      </test>
      <result>
         <assert-deep-eq>(5, 6, 7, 8, 9)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-iterate-while-004">
      <description>Test case for fn:iterate-while</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $input := 3936256
return iterate-while(
  $input,
  function($result) { abs($result * $result - $input) &gt;= 0.0000000001 },
  function($guess) { ($guess + $input div $guess) div 2 }
) =&gt; round(5)
      </test>
      <result>
         <assert-deep-eq>1984</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-pair-001">
      <description>Test case for fn:for-each-pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each-pair(
  ("a", "b", "c"),
  ("x", "y", "z"),
  concat#2
)
      </test>
      <result>
         <assert-deep-eq>("ax", "by", "cz")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-pair-002">
      <description>Test case for fn:for-each-pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each-pair(
  1 to 5,
  1 to 5,
  function($a, $b) { 10 * $a + $b }
)
      </test>
      <result>
         <assert-deep-eq>(11, 22, 33, 44, 55)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-for-each-pair-003">
      <description>Test case for fn:for-each-pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $s := 1 to 8
return for-each-pair($s, tail($s), function($a, $b) { $a * $b })
      </test>
      <result>
         <assert-deep-eq>(2, 6, 12, 20, 30, 42, 56)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sort-001">
      <description>Test case for fn:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sort((1, 4, 6, 5, 3))
      </test>
      <result>
         <assert-deep-eq>(1, 3, 4, 5, 6)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sort-002">
      <description>Test case for fn:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sort((1, 4, 4e0, 6, 5, 3), order:="descending")
      </test>
      <result>
         <assert-deep-eq>(6, 5, 4, 4e0, 3, 1)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-sort-003">
      <description>Test case for fn:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        sort((1, -2, 5, 10, -10, 10, 8), (), abs#1)
      </test>
      <result>
         <assert-deep-eq>(1, -2, 5, 8, 10, -10, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-transitive-closure-001">
      <description>Test case for fn:transitive-closure</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $data := 
          document{&lt;doc&gt;
   &lt;person id="0"/&gt;
   &lt;person id="1" manager="0"/&gt;
   &lt;person id="2" manager="0"/&gt;
   &lt;person id="3" manager="2"/&gt;
   &lt;person id="4" manager="2"/&gt;
   &lt;person id="5" manager="1"/&gt;
   &lt;person id="6" manager="3"/&gt;
   &lt;person id="7" manager="6"/&gt;
   &lt;person id="8" manager="6"/&gt;
&lt;/doc&gt;}
         
           return 

        
        let $tc := transitive-closure($direct-reports)
return $tc($data//person[@id="2"])/string(@id)
      </test>
      <result>
         <assert-deep-eq>("3", "4", "6", "7", "8")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-transitive-closure-002">
      <description>Test case for fn:transitive-closure</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $data := 
          document{&lt;doc&gt;
   &lt;person id="0"/&gt;
   &lt;person id="1" manager="0"/&gt;
   &lt;person id="2" manager="0"/&gt;
   &lt;person id="3" manager="2"/&gt;
   &lt;person id="4" manager="2"/&gt;
   &lt;person id="5" manager="1"/&gt;
   &lt;person id="6" manager="3"/&gt;
   &lt;person id="7" manager="6"/&gt;
   &lt;person id="8" manager="6"/&gt;
&lt;/doc&gt;}
         
           return 

        
        let $tc := transitive-closure($direct-reports, min:=0)
return $tc($data//person[@id="2"])/string(@id)
      </test>
      <result>
         <assert-deep-eq>("2", "3", "4", "6", "7", "8")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-transitive-closure-003">
      <description>Test case for fn:transitive-closure</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $data := 
          document{&lt;doc&gt;
   &lt;person id="0"/&gt;
   &lt;person id="1" manager="0"/&gt;
   &lt;person id="2" manager="0"/&gt;
   &lt;person id="3" manager="2"/&gt;
   &lt;person id="4" manager="2"/&gt;
   &lt;person id="5" manager="1"/&gt;
   &lt;person id="6" manager="3"/&gt;
   &lt;person id="7" manager="6"/&gt;
   &lt;person id="8" manager="6"/&gt;
&lt;/doc&gt;}
         
           return 

        
        let $tc := transitive-closure($direct-reports, max:=2)
return $tc($data//person[@id="2"])/string(@id)
      </test>
      <result>
         <assert-deep-eq>("3", "4", "6")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-transitive-closure-004">
      <description>Test case for fn:transitive-closure</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $data := 
          document{&lt;doc&gt;
   &lt;person id="0"/&gt;
   &lt;person id="1" manager="0"/&gt;
   &lt;person id="2" manager="0"/&gt;
   &lt;person id="3" manager="2"/&gt;
   &lt;person id="4" manager="2"/&gt;
   &lt;person id="5" manager="1"/&gt;
   &lt;person id="6" manager="3"/&gt;
   &lt;person id="7" manager="6"/&gt;
   &lt;person id="8" manager="6"/&gt;
&lt;/doc&gt;}
         
           return 

        
        let $tc := transitive-closure(function { child::* })
return $tc($data)/@id/string()
      </test>
      <result>
         <assert-deep-eq>("0", "1", "2", "3", "4", "5", "6", "7","8")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-apply-001">
      <description>Test case for fn:apply</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        apply(concat#3, ["a", "b", "c"])
      </test>
      <result>
         <assert-deep-eq>"abc"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-op-001">
      <description>Test case for fn:op</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each-pair(21 to 25, 1 to 5, op("+"))
      </test>
      <result>
         <assert-deep-eq>22, 24, 26, 28, 30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-op-002">
      <description>Test case for fn:op</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        for-each-pair(21 to 25, 1 to 5, op("-"))
      </test>
      <result>
         <assert-deep-eq>20, 20, 20, 20, 20</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-001">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal(3, 3)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-002">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal(3, 3e0)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-003">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal(xs:double('NaN'), xs:float('NaN'))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-004">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal("a", "a")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-005">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal("a", "A")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-006">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal("a", xs:untypedAtomic("a"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-007">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal(
  "https://www.w3.org/",
  xs:anyURI("https://www.w3.org/")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-atomic-equal-008">
      <description>Test case for fn:atomic-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        atomic-equal(12, "12")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-001">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:merge(())
      </test>
      <result>
         <assert-deep-eq>map{}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-002">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:merge((
  map:entry(0, "no"),
  map:entry(1, "yes")
))
      </test>
      <result>
         <assert-deep-eq>map{0:"no", 1:"yes"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-003">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge((
  ($week, map { 7: "Unbekannt" })
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-004">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "use-last" }
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-005">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "use-first" }
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-merge-006">
      <description>Test case for map:merge</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:merge(
  ($week, map { 6: "Sonnabend" }),
  map { "duplicates": "combine" }
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:("Samstag", "Sonnabend")}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-001">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:of-pairs(())
      </test>
      <result>
         <assert-deep-eq>map{}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-002">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map { 0: "Sonntag", 1: "Montag", 2: "Dienstag",
     3: "Mittwoch", 4: "Donnerstag", 5: "Freitag", 6 :"Samstag" }
          
           return 

        
        map:of-pairs(map:pairs($week))
      </test>
      <result>
         <assert-deep-eq>$week</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-003">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:of-pairs((
  map { "key": 0, "value": "no" },
  map { "key": 1, "value": "yes" }
))
      </test>
      <result>
         <assert-deep-eq>map{0:"no", 1:"yes"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-004">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map { 0: "Sonntag", 1: "Montag", 2: "Dienstag",
     3: "Mittwoch", 4: "Donnerstag", 5: "Freitag", 6 :"Samstag" }
          
           return 

        
        map:of-pairs((
  map:pairs($week),
  map { "key": 7, "value": "Unbekannt" }
))
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", 7:"Unbekannt"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-005">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map { 0: "Sonntag", 1: "Montag", 2: "Dienstag",
     3: "Mittwoch", 4: "Donnerstag", 5: "Freitag", 6 :"Samstag" }
          
           return 

        
        map:of-pairs((
  map:pairs($week),
  map { "key": 6, "value": "Sonnabend" }
))
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:("Samstag", "Sonnabend")}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-006">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map { 0: "Sonntag", 1: "Montag", 2: "Dienstag",
     3: "Mittwoch", 4: "Donnerstag", 5: "Freitag", 6 :"Samstag" }
          
           return 

        
        map:of-pairs(
  (map:pairs($week),
   map { "key": 6, "value": "Sonnabend" }),
  function($old, $new)  { $new }
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-of-pairs-007">
      <description>Test case for map:of-pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map { 0: "Sonntag", 1: "Montag", 2: "Dienstag",
     3: "Mittwoch", 4: "Donnerstag", 5: "Freitag", 6 :"Samstag" }
          
           return 

        
        map:of-pairs(
  (map:pairs($week),
   map { "key": 6, "value": "Sonnabend" }),
  function($old, $new) { `{$old}|{$new}` }
)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag|Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-keys-001">
      <description>Test case for map:keys</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:keys(map{1:"yes", 2:"no"})
      </test>
      <result>
         <assert-permutation>(1,2)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-keys-002">
      <description>Test case for map:keys</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        
let $numbers := map {
  0: 'zero',
  1: 'one',
  2: 'two',
  3: 'three'
}
return map:keys($numbers, function { . = ('two', 'three') })
               
      </test>
      <result>
         <assert-deep-eq>(2, 3)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-keys-003">
      <description>Test case for map:keys</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        
let $square := map:merge(
  (1 to 5) ! map:entry(., . * .)
)
return map:keys($square, function { . &gt; 5 and . &lt; 20 })
               
      </test>
      <result>
         <assert-deep-eq>(3, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-keys-004">
      <description>Test case for map:keys</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        
let $birthdays := map {
  'jack': xs:date('1980-12-31'),
  'joel': xs:date('1969-11-10'),
  'john': xs:date('2001-05-05')
}
return map:keys($birthdays, function($date) {
  year-from-date($date) = 1969
})
               
      </test>
      <result>
         <assert-deep-eq>"joel"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-values-001">
      <description>Test case for map:values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:values(
  map{ 1: "yes", 2: "no" }
)
      </test>
      <result>
         <assert-permutation>("yes", "no")</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-values-002">
      <description>Test case for map:values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:values(
  map {
    1: ("red", "green"),
    2: ("blue", "yellow"),
    3:()
  }
)
      </test>
      <result>
         <assert-permutation>("red", "green", "blue", "yellow")</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-entries-001">
      <description>Test case for map:entries</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:entries(
  map { 1: "yes", 2: "no" }
)
      </test>
      <result>
         <assert-permutation>(map{1:"yes"}, map{2:"no"})</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-pairs-001">
      <description>Test case for map:pairs</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:pairs(
  map { 1: "yes", 2: "no" }
)
      </test>
      <result>
         <assert-permutation>(map{"key":1, "value":"yes"}, map{"key":2, "value":"no"})</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-contains-001">
      <description>Test case for map:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:contains($week, 2)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-map-contains-002">
      <description>Test case for map:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:contains($week, 9)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-map-contains-003">
      <description>Test case for map:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:contains(map{}, "xyz")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-map-contains-004">
      <description>Test case for map:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:contains(map{"xyz":23}, "xyz")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-map-contains-005">
      <description>Test case for map:contains</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:contains(map{"abc":23, "xyz":()}, "xyz")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-map-get-001">
      <description>Test case for map:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:get($week, 4)
      </test>
      <result>
         <assert-deep-eq>"Donnerstag"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-get-002">
      <description>Test case for map:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
     3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:get($week, 9)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-get-003">
      <description>Test case for map:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:get(map:entry(7,()), 7)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-get-004">
      <description>Test case for map:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map { 1: "single", 2: "double", 3: "triple" }
=&gt; map:get(10, function { . || "-fold" })
      </test>
      <result>
         <assert-deep-eq>"10-fold"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-find-001">
      <description>Test case for map:find</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, 
                  map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 0)
      </test>
      <result>
         <assert-deep-eq>['no', 'non', 'nein']</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-find-002">
      <description>Test case for map:find</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, 
                  map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 1)
      </test>
      <result>
         <assert-deep-eq>['yes', 'oui', ('ja', 'doch')]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-find-003">
      <description>Test case for map:find</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $responses := [map{0:'no', 1:'yes'}, map{0:'non', 1:'oui'}, 
                  map{0:'nein', 1:('ja', 'doch')}]
          
           return 

        
        map:find($responses, 2)
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-find-004">
      <description>Test case for map:find</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $inventory := map{"name":"car", "id":"QZ123", 
      "parts": [map{"name":"engine", "id":"YW678", "parts":[]}]}
          
           return 

        
        map:find($inventory, "parts")
      </test>
      <result>
         <assert-deep-eq>[[map{"name":"engine", "id":"YW678", "parts":[]}], []]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-put-001">
      <description>Test case for map:put</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:put($week, 6, "Sonnabend")
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Sonnabend"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-put-002">
      <description>Test case for map:put</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:put($week, -1, "Unbekannt")
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag", -1:"Unbekannt"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-entry-001">
      <description>Test case for map:entry</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:entry("M", "Monday")
      </test>
      <result>
         <assert-deep-eq>map{"M":"Monday"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-pair-001">
      <description>Test case for map:pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:pair("M", "Monday")
      </test>
      <result>
         <assert-deep-eq>map { "key": "M", "value": "Monday" }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-remove-001">
      <description>Test case for map:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, 4)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 5:"Freitag",
                  6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-remove-002">
      <description>Test case for map:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, 23)
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag",
                  5:"Freitag", 6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-remove-003">
      <description>Test case for map:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, (0, 6 to 7))
      </test>
      <result>
         <assert-deep-eq>map{1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-remove-004">
      <description>Test case for map:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $week := map{0:"Sonntag", 1:"Montag", 2:"Dienstag",
       3:"Mittwoch", 4:"Donnerstag", 5:"Freitag", 6:"Samstag"}
          
           return 

        
        map:remove($week, ())
      </test>
      <result>
         <assert-deep-eq>map{0:"Sonntag", 1:"Montag", 2:"Dienstag", 3:"Mittwoch", 4:"Donnerstag", 5:"Freitag",
                  6:"Samstag"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-for-each-001">
      <description>Test case for map:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:for-each(
  map { 1: "yes", 2: "no" },
  function($k, $v) { $k }
)
      </test>
      <result>
         <assert-permutation>(1,2)</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-for-each-002">
      <description>Test case for map:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        distinct-values(
  map:for-each(
    map { 1: "yes", 2: "no" },
    function($k, $v) { $v }
  )
)
      </test>
      <result>
         <assert-permutation>("yes", "no")</assert-permutation>
      </result>
   </test-case>

   <test-case name="fo-test-map-for-each-003">
      <description>Test case for map:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:merge(
  map:for-each(
    map { "a": 1, "b": 2 },
    function($k, $v) { map:entry($k, $v + 1) }
  )
)
      </test>
      <result>
         <assert-deep-eq>map{"a":2, "b":3}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-filter-001">
      <description>Test case for map:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:filter(
  map { 1: "Sunday", 2: "Monday", 
        3: "Tuesday", 4:"Wednesday",
        5: "Thursday", 6: "Friday", 
        7: "Saturday" },
  function($k, $v) { $k = (1, 7) }
)
      </test>
      <result>
         <assert-deep-eq>map{1:"Sunday", 7:"Saturday"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-filter-002">
      <description>Test case for map:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:filter(
  map { 1: "Sunday", 2: "Monday", 
        3: "Tuesday", 4: "Wednesday",
        5: "Thursday", 6:"Friday", 
        7:"Saturday" },
  function($k, $v) { $v = ("Saturday", "Sunday") }
)
      </test>
      <result>
         <assert-deep-eq>map{1:"Sunday", 7:"Saturday"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-replace-001">
      <description>Test case for map:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:replace(map{1:"alpha", 2:"beta"}, 1, upper-case#1)
      </test>
      <result>
         <assert-deep-eq>map { 1: "ALPHA", 2: "beta" }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-replace-002">
      <description>Test case for map:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:replace(map{1:"alpha", 2:"beta"}, 3, upper-case#1)
      </test>
      <result>
         <assert-deep-eq>map { 1: "alpha", 2: "beta" 3: "" }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-replace-003">
      <description>Test case for map:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        fold-left(
  ("a", "b", "c", "a"),
  map { },
  function($map, $key) {
    map:replace($map, $key, function($val) {
      ($val otherwise 0) + 1
    })
  }
)
      </test>
      <result>
         <assert-deep-eq>map{"a":2, "b":1, "c":1}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-substitute-001">
      <description>Test case for map:substitute</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:substitute(
  map { 1: true(), 2: false() },
  function($k, $v) { not($v) }
)
      </test>
      <result>
         <assert-deep-eq>map{1:false(), 2:true()}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-substitute-002">
      <description>Test case for map:substitute</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:substitute(
  map { 1: "yes", 2: "no" },
  function($k, $v) { $v || ' (' || $k || ')' }
)
      </test>
      <result>
         <assert-deep-eq>map{1:"yes (1)", 2:"no (2)"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-build-001">
      <description>Test case for map:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:build((), string#1)
      </test>
      <result>
         <assert-deep-eq>map{}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-build-002">
      <description>Test case for map:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:build(1 to 10, function { . mod 3 })
      </test>
      <result>
         <assert-deep-eq>map{0: (3, 6, 9), 1: (1, 4, 7, 10), 2: (2, 5, 8)}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-build-003">
      <description>Test case for map:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:build(
  1 to 5,
  value := format-integer(?, "w")
)
      </test>
      <result>
         <assert-deep-eq>map{1: "one", 2: "two", 3: "three", 4: "four", 5: "five"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-build-004">
      <description>Test case for map:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:build(
  ("January", "February", "March", "April",
   "May", "June", "July", "August", "September",
   "October", "November", "December"),
  substring(?, 1, 1)
)
      </test>
      <result>
         <assert-deep-eq>map{"A": ("April", "August"), "D": ("December"), "F": ("February"), "J": ("January", "June", "July"), 
                  "M": ("March", "May"), "N": ("November"), "O": ("October"), "S": ("September")}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-build-005">
      <description>Test case for map:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:build(
  ("apple", "apricot", "banana",
   "blueberry", "cherry"), 
  substring(?, 1, 1),
  string-length#1,
  op("+")
)
      </test>
      <result>
         <assert-deep-eq>map{"a": 12, "b": 15, "c": 6}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-size-001">
      <description>Test case for map:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:size(map{})
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-map-size-002">
      <description>Test case for map:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        map:size(map{"true":1, "false":0})
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-collation-key-001">
      <description>Test case for fn:collation-key</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'
          
           return 

        
        map:merge(
  (map { collation-key("A", $C): 1 },
   map { collation-key("a", $C): 2 }),
  map { "duplicates": "use-last" }
)(collation-key("A", $C))
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-collation-key-002">
      <description>Test case for fn:collation-key</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $C := 'http://www.w3.org/2013/collation/UCA?strength=primary'
          
           return 

        
        let $M := map {
  collation-key("A", $C): 1,
  collation-key("B", $C): 2
}
return $M(collation-key("a", $C))
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-to-xml-001">
      <description>Test case for fn:json-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json-to-xml(
  '{"x": 1, "y": [3,4,5]}',
  map { "validate": false() }
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><number key="x">1</number><array key="y"><number>3</number><number>4</number><number>5</number></array></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-to-xml-002">
      <description>Test case for fn:json-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json-to-xml(
  '"abcd"',
  map { 'liberal': false() }
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<string xmlns="http://www.w3.org/2005/xpath-functions">abcd</string>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-to-xml-003">
      <description>Test case for fn:json-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json-to-xml(
  '{"x": "\\", "y": "\u0025"}',
  map { "validate": false() }
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><string key="x">\</string><string key="y">%</string></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-to-xml-004">
      <description>Test case for fn:json-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json-to-xml(
  '{"x": "\\", "y": "\u0025"}',
  map { 'escape': true(), "validate": false() }
)
      </test>
      <result>
         <assert-xml ignore-prefixes="true"><![CDATA[<map xmlns="http://www.w3.org/2005/xpath-functions"><string escaped="true" key="x">\\</string><string key="y">%</string></map>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-001">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
        parse-csv(`name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`)
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-002">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $cr := 
          char('x0D')
           return 

        
        parse-csv(`name,city{$cr}Bob,Berlin{$cr}Alice,Aachen{$cr}`)
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-003">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $lf := 
          char('x0A')
           return 

        
        parse-csv(`name,city{$lf}Bob,Berlin{$lf}Alice,Aachen{$lf}`)
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-004">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
        parse-csv(`"name","city"${crlf}"Bob","Berlin"${crlf}"Alice","Aachen"${crlf}`)
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-005">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
        parse-csv(`"name","city"${crlf}"Bob ""The Exemplar"" Mustermann","Berlin"${crlf}`)
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ['Bob "The Exemplar" Mustermann', "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-006">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-csv("name;city§Bob;Berlin§Alice;Aachen", map{"record-separator": "§", "field-separator": ";"})
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-007">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
        parse-csv(`|name|,|city|${crlf}|Bob|,|Berlin|${crlf}`, map{"quote-character": "|"})
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-csv-008">
      <description>Test case for fn:parse-csv</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
        parse-csv(`name  ,city  ${crlf}Bob   ,Berlin${crlf}Alice ,Aachen${crlf}`, map{"trim-whitespace: true()})
      </test>
      <result>
         <assert-deep-eq>(
   ["name", "city"]
   ["Bob", "Berlin"],
   ["Alice", "Aachen"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-001">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        map:keys(csv-to-xdm($csv-string))
      </test>
      <result>
         <assert-deep-eq>("header", "rows")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-002">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string)?columns
      </test>
      <result>
         <assert-deep-eq>map {
  "names": map {},
  "fields": (),
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-003">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        count(csv-to-xdm($csv-string)?rows)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-004">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string)?rows[1]?field("name")
      </test>
      <result>
         <error code="CV"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-005">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string)?rows[1]?field(2)
      </test>
      <result>
         <assert-deep-eq>"city"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-006">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string, map {"columns": true()})?columns
      </test>
      <result>
         <assert-deep-eq>map {
  "names": map { "name": 1, "city": 2 },
  "fields": ("name", "city"),
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-007">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        count(csv-to-xdm($csv-string, map {"columns": true()})?rows)
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-008">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string), map {"columns": true()}?rows[1]?fields
      </test>
      <result>
         <assert-deep-eq>("Bob", "Berlin")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-009">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string, map {"columns": true()})?rows[1]?field("name")
      </test>
      <result>
         <assert-deep-eq>"Bob"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-010">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xdm($csv-string, map {"columns": true()})?rows[1]?field(2)
      </test>
      <result>
         <assert-deep-eq>"Berlin"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-011">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $options := 
          map { "record-separator": "§", "field-separator": ";", "quote-character": "|" }
           return 

        
          let $non-std-csv := 
          `|name|;|city|§|Bob|;|Berlin|§|Alice|;|Aachen|`
           return 

        
        map:keys(csv-to-xdm($non-std-csv, $options))
      </test>
      <result>
         <assert-deep-eq>("header", "rows")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-012">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $options := 
          map { "record-separator": "§", "field-separator": ";", "quote-character": "|" }
           return 

        
          let $non-std-csv := 
          `|name|;|city|§|Bob|;|Berlin|§|Alice|;|Aachen|`
           return 

        
        csv-to-xdm($non-std-csv, $options)?columns
      </test>
      <result>
         <assert-deep-eq>map {
                  "names": map {},
                  "fields": (),
                  }</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-013">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $options := 
          map { "record-separator": "§", "field-separator": ";", "quote-character": "|" }
           return 

        
          let $non-std-csv := 
          `|name|;|city|§|Bob|;|Berlin|§|Alice|;|Aachen|`
           return 

        
        count(csv-to-xdm($non-std-csv, $options)?rows)
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-014">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $options := 
          map { "record-separator": "§", "field-separator": ";", "quote-character": "|" }
           return 

        
          let $non-std-csv := 
          `|name|;|city|§|Bob|;|Berlin|§|Alice|;|Aachen|`
           return 

        
        csv-to-xdm($non-std-csv, $options)?rows[3]?field(1)
      </test>
      <result>
         <assert-deep-eq>"Alice"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-015">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $trim-opts := 
          map { "trim-whitespace": true() }
           return 

        
        csv-to-xdm(`name  ,city  ${crlf}Bob   ,Berlin${crlf}Alice ,Aachen${crlf}`, $trim-opts)?rows?fields
      </test>
      <result>
         <assert-deep-eq>("name", "city", "Bob", "Berlin", "Alice", "Aachen")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-016">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xdm($csv-uneven-cols, map { "columns": true(), "filter-columns": (2,1,4) })?columns?fields
      </test>
      <result>
         <assert-deep-eq>("name","date","amount")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-017">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "filter-columns": (2,1,4) })?rows return array { $r?fields }
      </test>
      <result>
         <assert-deep-eq>(
   ["Bob","2023-07-19","10.00"],
   ["Alice","2023-07-20","15.00"],
   ["Charlie","2023-07-20","15.00"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-018">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })?columns?fields
      </test>
      <result>
         <assert-deep-eq>("date","name","city","amount","currency","original amount","note")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-019">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })?rows return array { $r?fields }
      </test>
      <result>
         <assert-deep-eq>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99"],
   ["2023-07-20","Alice","Aachen","15.00"],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99","cake","not a lie"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-020">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })?columns?fields
      </test>
      <result>
         <assert-deep-eq>("date","name","city","amount","currency","original amount","note")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-021">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })?rows return array { $r?fields }
      </test>
      <result>
         <assert-deep-eq>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99",""],
   ["2023-07-20","Alice","Aachen","15.00","","",""],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99","cake"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-022">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })?columns?fields
      </test>
      <result>
         <assert-deep-eq>("date","name","city","amount","currency","original amount")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xdm-023">
      <description>Test case for fn:csv-to-xdm</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        for $r in csv-to-xdm($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })?rows return array { $r?fields }
      </test>
      <result>
         <assert-deep-eq>(
   ["2023-07-19","Bob","Berlin","10.00","USD","13.99"],
   ["2023-07-20","Alice","Aachen","15.00","",""],
   ["2023-07-20","Charlie","Celle","15.00","GBP","11.99"]
)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-001">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        csv-to-xml("")
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:rows/>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-002">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        csv-to-xml("", map { "columns": true() })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header/>
   <fn:rows/>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-003">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        csv-to-xml("", map { "columns": map { "name": 1, "city": 3 })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:column>name</fn:field>
      <fn:column/>
      <fn:column>city</fn:field>
   </fn:header>
   <fn:rows/>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-004">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xml($csv-string, map { "columns": true() })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:column>name</fn:field>
      <fn:column>city</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-005">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-string := 
          `name,city{$crlf}Bob,Berlin{$crlf}Alice,Aachen{$crlf}`
           return 

        
        csv-to-xml($csv-string, map { "columns": true() })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-006">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xml($csv-string, map { "columns": true(), "filter-columns": (2,1,4) })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>name</fn:field>
      <fn:field>date</fn:field>
      <fn:field>amount</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="amount">10.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-007">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": "all" })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
      <fn:field>note</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
         <fn:field column="note">cake</fn:field>
         <fn:field>not a lie</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-008">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": "first-row" })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
      <fn:field>note</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
         <fn:field column="note"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency"/>
         <fn:field column="original amount"/>
         <fn:field column="note"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
         <fn:field column="note">cake</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-to-xml-009">
      <description>Test case for fn:csv-to-xml</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $crlf := 
          char('x0D')||char('x0A')
           return 

        
          let $csv-uneven-cols := 
          `date,name,city,amount,currency,original amount,note{$crlf}2023-07-19,Bob,Berlin,10.00,USD,13.99{$crlf}2023-07-20,Alice,Aachen,15.00{$crlf}2023-07-20,Charlie,Celle,15.00,GBP,11.99,cake,not a lie{$crlf}`
           return 

        
        csv-to-xml($csv-uneven-cols, map { "columns": true(), "number-of-columns": 6 })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[
<fn:csv>
   <fn:header>
      <fn:field>date</fn:field>
      <fn:field>name</fn:field>
      <fn:field>city</fn:field>
      <fn:field>amount</fn:field>
      <fn:field>currency</fn:field>
      <fn:field>original amount</fn:field>
   </fn:header>
   <fn:rows>
      <fn:row>
         <fn:field column="date">2023-07-19</fn:field>
         <fn:field column="name">Bob</fn:field>
         <fn:field column="city">Berlin</fn:field>
         <fn:field column="amount">10.00</fn:field>
         <fn:field column="currency">USD</fn:field>
         <fn:field column="original amount">13.99</fn:field>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Alice</fn:field>
         <fn:field column="city">Aachen</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency"/>
         <fn:field column="original amount"/>
      </fn:row>
      <fn:row>
         <fn:field column="date">2023-07-20</fn:field>
         <fn:field column="name">Charlie</fn:field>
         <fn:field column="city">Celle</fn:field>
         <fn:field column="amount">15.00</fn:field>
         <fn:field column="currency">GBP</fn:field>
         <fn:field column="original amount">11.99</fn:field>
      </fn:row>
   </fn:rows>
</fn:csv>
]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-fetch-field-by-column-001">
      <description>Test case for fn:csv-fetch-field-by-column</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $columns := 
          map {
   "names": map { "name": 1, "city": 2 },
   "fields: ("name", "city")
}
           return 

        
          let $fields := 
          ("Bob", "Berlin")
           return 

        
        csv-fetch-field-by-column($columns, $fields, "name")
      </test>
      <result>
         <assert-deep-eq>"Bob"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-fetch-field-by-column-002">
      <description>Test case for fn:csv-fetch-field-by-column</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $columns := 
          map {
   "names": map { "name": 1, "city": 2 },
   "fields: ("name", "city")
}
           return 

        
          let $fields := 
          ("Bob", "Berlin")
           return 

        
        csv-fetch-field-by-column($columns, $fields, "amount")
      </test>
      <result>
         <error code="FOCV0004"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-fetch-field-by-column-003">
      <description>Test case for fn:csv-fetch-field-by-column</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $columns := 
          map {
   "names": map { "name": 1, "city": 2 },
   "fields: ("name", "city")
}
           return 

        
          let $fields := 
          ("Bob", "Berlin")
           return 

        
        csv-fetch-field-by-column($columns, $fields, 2)
      </test>
      <result>
         <assert-deep-eq>"Berlin"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-csv-fetch-field-by-column-004">
      <description>Test case for fn:csv-fetch-field-by-column</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $columns := 
          map {
   "names": map { "name": 1, "city": 2 },
   "fields: ("name", "city")
}
           return 

        
          let $fields := 
          ("Bob", "Berlin")
           return 

        
        csv-fetch-field-by-column($columns, $fields, 3)
      </test>
      <result>
         <assert-deep-eq>""</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-001">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":1, "y":[3,4,5]}')
      </test>
      <result>
         <assert-deep-eq>map{"x":1e0,"y":[3e0,4e0,5e0]}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-002">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json('"abcd"')
      </test>
      <result>
         <assert-deep-eq>"abcd"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-003">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json('{"x":"\\", "y":"\u0025"}')
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":"%"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-004">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json(
  '{"x":"\\", "y":"\u0025"}',
  map { 'escape': true() }
)
      </test>
      <result>
         <assert-deep-eq>map{"x":"\\","y":"%"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-005">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json(
  '{"x":"\\", "y":"\u0000"}'
)
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":codepoints-to-string(65533)}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-006">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json(
  '{"x":"\\", "y":"\u0000"}',
  map { 'escape': true() }
)
      </test>
      <result>
         <assert-deep-eq>map{"x":"\\","y":"\u0000"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-json-007">
      <description>Test case for fn:parse-json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-json(
  '{"x":"\\", "y":"\u0000"}',
  map {
    'fallback': function($s) { '['||$s||']' }
  }
)
      </test>
      <result>
         <assert-deep-eq>map{"x":"\","y":"[\u0000]"}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-001">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(())
      </test>
      <result>
         <assert-deep-eq>'null'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-002">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(12)
      </test>
      <result>
         <assert-deep-eq>'12'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-003">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json((12, "December"))
      </test>
      <result>
         <assert-deep-eq>'[12,"December"]'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-004">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(true())
      </test>
      <result>
         <assert-deep-eq>'true'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-005">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(map{"a":1,"b":number('NaN'),"c":(1,2,3)})
      </test>
      <result>
         <assert-deep-eq>'{"a":1,"b":"NaN","c":[1,2,3]}'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-006">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(&lt;a x="2"&gt;banana&lt;/a&gt;)
      </test>
      <result>
         <assert-deep-eq>'{"#element":"a","@x":"2","#value":"banana"}'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-007">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(&lt;a&gt;&lt;b/&gt;&lt;c&gt;2&lt;/c&gt;&lt;/a&gt;)
      </test>
      <result>
         <assert-deep-eq>'{"#element":"a","#content":{"b":null,"c":"2"}}'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-008">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(&lt;a&gt;&lt;b/&gt;&lt;b/&gt;&lt;c/&gt;&lt;/a&gt;)
      </test>
      <result>
         <assert-deep-eq>'{"#name":"a","#content":[{"#name":"b"},{"#name":"b"},{"#name":"c}]}'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-json-009">
      <description>Test case for fn:json</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        json(&lt;a&gt;A &lt;i&gt;nice&lt;/i&gt; one!&lt;/a&gt;)
      </test>
      <result>
         <assert-deep-eq>'{"#name":"a","#content":["A ",{"#name":"i", "#value":"nice"}," one!"]}'</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-size-001">
      <description>Test case for array:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:size(["a", "b", "c"])
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-size-002">
      <description>Test case for array:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:size(["a", ["b", "c"]])
      </test>
      <result>
         <assert-deep-eq>2</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-size-003">
      <description>Test case for array:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:size([ ])
      </test>
      <result>
         <assert-deep-eq>0</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-size-004">
      <description>Test case for array:size</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:size([[ ]])
      </test>
      <result>
         <assert-deep-eq>1</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-empty-001">
      <description>Test case for array:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:empty(["a", "b", "c"])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-empty-002">
      <description>Test case for array:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:empty([])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-empty-003">
      <description>Test case for array:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:empty([[]])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-empty-004">
      <description>Test case for array:empty</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:empty([()])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-exists-001">
      <description>Test case for array:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:exists(["a", "b", "c"])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-exists-002">
      <description>Test case for array:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:exists([])
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-exists-003">
      <description>Test case for array:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:exists([[]])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-exists-004">
      <description>Test case for array:exists</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:exists([()])
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-get-001">
      <description>Test case for array:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ["a", "b", "c"] =&gt; array:get(2)
      </test>
      <result>
         <assert-deep-eq>"b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-get-002">
      <description>Test case for array:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ["a", ["b", "c"]] =&gt; array:get(2)
      </test>
      <result>
         <assert-deep-eq>["b", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-get-003">
      <description>Test case for array:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ["a"] =&gt; array:get(1, void#1)
      </test>
      <result>
         <assert-deep-eq>"a"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-get-004">
      <description>Test case for array:get</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        [] =&gt; array:get(1, void#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-put-001">
      <description>Test case for array:put</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:put(["a", "b", "c"], 2, "d")
      </test>
      <result>
         <assert-deep-eq>["a", "d", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-put-002">
      <description>Test case for array:put</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:put(["a", "b", "c"], 2, ("d", "e"))
      </test>
      <result>
         <assert-deep-eq>["a", ("d", "e"), "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-put-003">
      <description>Test case for array:put</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:put(["a"], 1, ["d", "e"])
      </test>
      <result>
         <assert-deep-eq>[["d", "e"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-replace-001">
      <description>Test case for array:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:replace([10, 11, 12], 2, function { . + 10 })
      </test>
      <result>
         <assert-deep-eq>[10, 21, 12]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-replace-002">
      <description>Test case for array:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:replace(["a", "b", "c"], 2, concat(?, "x"))
      </test>
      <result>
         <assert-deep-eq>["a", "bx", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-replace-003">
      <description>Test case for array:replace</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:replace([("a", "b"), ("c", "d")], 2, reverse#1)
      </test>
      <result>
         <assert-deep-eq>[("a", "b"), ("d", "c")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-append-001">
      <description>Test case for array:append</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], "d")
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-append-002">
      <description>Test case for array:append</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], ("d", "e"))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", ("d", "e")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-append-003">
      <description>Test case for array:append</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:append(["a", "b", "c"], ["d", "e"])
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", ["d", "e"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-join-001">
      <description>Test case for array:join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:join(())
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-join-002">
      <description>Test case for array:join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:join([1, 2, 3])
      </test>
      <result>
         <assert-deep-eq>[1, 2, 3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-join-003">
      <description>Test case for array:join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-join-004">
      <description>Test case for array:join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"], [ ]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-join-005">
      <description>Test case for array:join</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:join((["a", "b"], ["c", "d"], [["e", "f"]]))
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d", ["e", "f"]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-001">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-002">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 5)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-003">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-004">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 1)
      </test>
      <result>
         <assert-deep-eq>["b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-005">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 2, 2)
      </test>
      <result>
         <assert-deep-eq>["b", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-006">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray(["a", "b", "c", "d"], 5, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-subarray-007">
      <description>Test case for array:subarray</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:subarray([ ], 1, 0)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-index-where-001">
      <description>Test case for array:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:index-where([], boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-index-where-002">
      <description>Test case for array:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:index-where([0, (), 4, 9], boolean#1)
      </test>
      <result>
         <assert-deep-eq>(3, 4)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-index-where-003">
      <description>Test case for array:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:index-where(
  array { 1 to 10 },
  function {. mod 2 = 0 }
)
      </test>
      <result>
         <assert-deep-eq>(2, 4, 6, 8, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-index-where-004">
      <description>Test case for array:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:index-where(
  [ "January", "February", "March", "April",
    "May", "June", "July", "August", "September",
    "October", "November", "December" ],
  contains(?, "r")
)
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 9, 10, 11, 12)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-index-where-005">
      <description>Test case for array:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:index-where(
  [(1, 2, 3), (4, 5, 6), (7, 8)],
  function($m) { count($m) = 3 }
)
      </test>
      <result>
         <assert-deep-eq>(1, 2)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-001">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 2, end := 4)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-002">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 2)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d", "e"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-003">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, end := 2)
      </test>
      <result>
         <assert-deep-eq>["a", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-004">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 3, end := 3)
      </test>
      <result>
         <assert-deep-eq>["c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-005">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 4, end := 3)
      </test>
      <result>
         <assert-deep-eq>["d", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-006">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 2, end := 5, step := 2)
      </test>
      <result>
         <assert-deep-eq>["b", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-007">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 5, end := 2, step := -2)
      </test>
      <result>
         <assert-deep-eq>["e", "c"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-008">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 2, end := 5, step := -2)
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-009">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 5, end := 2, step := 2)
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-010">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in)
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d", "e"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-011">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -1)
      </test>
      <result>
         <assert-deep-eq>["e"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-012">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -3)
      </test>
      <result>
         <assert-deep-eq>["c", "d", "e"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-013">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, end := -2)
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-014">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := 2, end := -2)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-015">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -2, end := 2)
      </test>
      <result>
         <assert-deep-eq>["d", "c", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-016">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -4, end := -2)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-017">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -2, end := -4)
      </test>
      <result>
         <assert-deep-eq>["d", "c", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-018">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -4, end := -2, step := 2)
      </test>
      <result>
         <assert-deep-eq>["b", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-019">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice($in, start := -2, end := -4, step := -2)
      </test>
      <result>
         <assert-deep-eq>["d", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-slice-020">
      <description>Test case for array:slice</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $in := ['a', 'b', 'c', 'd', 'e']
          
           return 

        
        array:slice(["a", "b", "c", "d"], 0)
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-remove-001">
      <description>Test case for array:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 1)
      </test>
      <result>
         <assert-deep-eq>["b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-remove-002">
      <description>Test case for array:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 2)
      </test>
      <result>
         <assert-deep-eq>["a", "c", "d" ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-remove-003">
      <description>Test case for array:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:remove(["a"], 1)
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-remove-004">
      <description>Test case for array:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], 1 to 3)
      </test>
      <result>
         <assert-deep-eq>["d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-remove-005">
      <description>Test case for array:remove</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:remove(["a", "b", "c", "d"], ())
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-insert-before-001">
      <description>Test case for array:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:insert-before(
  ["a", "b", "c", "d"],
  3,
  ("x", "y")
)
      </test>
      <result>
         <assert-deep-eq>["a", "b", ("x", "y"), "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-insert-before-002">
      <description>Test case for array:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:insert-before(
  ["a", "b", "c", "d"],
  5,
  ("x", "y")
)
      </test>
      <result>
         <assert-deep-eq>["a", "b", "c", "d", ("x", "y")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-insert-before-003">
      <description>Test case for array:insert-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:insert-before(
  ["a", "b", "c", "d"],
  3,
  ["x", "y"]
)
      </test>
      <result>
         <assert-deep-eq>["a", "b", ["x", "y"], "c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-head-001">
      <description>Test case for array:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:head([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>5</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-head-002">
      <description>Test case for array:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:head([["a", "b"], ["c", "d"]])
      </test>
      <result>
         <assert-deep-eq>["a", "b"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-head-003">
      <description>Test case for array:head</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:head([("a", "b"), ("c", "d")])
      </test>
      <result>
         <assert-deep-eq>"a", "b"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-foot-001">
      <description>Test case for array:foot</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:foot([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>8</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-foot-002">
      <description>Test case for array:foot</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:foot([["a", "b"], ["c", "d"]])
      </test>
      <result>
         <assert-deep-eq>["c", "d"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-foot-003">
      <description>Test case for array:foot</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:foot([("a", "b"), ("c", "d")])
      </test>
      <result>
         <assert-deep-eq>"c", "d"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-tail-001">
      <description>Test case for array:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:tail([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>[6, 7, 8]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-tail-002">
      <description>Test case for array:tail</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:tail([5])
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-trunk-001">
      <description>Test case for array:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:trunk([5, 6, 7, 8])
      </test>
      <result>
         <assert-deep-eq>[5, 6, 7]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-trunk-002">
      <description>Test case for array:trunk</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:trunk([5])
      </test>
      <result>
         <assert-deep-eq>[ ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-reverse-001">
      <description>Test case for array:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:reverse(["a", "b", "c", "d"])
      </test>
      <result>
         <assert-deep-eq>["d", "c", "b", "a"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-reverse-002">
      <description>Test case for array:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:reverse([("a", "b"), ("c", "d")])
      </test>
      <result>
         <assert-deep-eq>[("c", "d"), ("a", "b")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-reverse-003">
      <description>Test case for array:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:reverse([(1 to 5)])
      </test>
      <result>
         <assert-deep-eq>[(1, 2, 3, 4, 5)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-reverse-004">
      <description>Test case for array:reverse</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:reverse([])
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-for-each-001">
      <description>Test case for array:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:for-each(
  [ "A", "B", 1, 2 ],
  function($z) { $z instance of xs:integer }
)
      </test>
      <result>
         <assert-deep-eq>[false(), false(), true(), true()]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-for-each-002">
      <description>Test case for array:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:for-each(
  [ "the cat", "sat", "on the mat" ],
  tokenize#1
)
      </test>
      <result>
         <assert-deep-eq>[("the", "cat"), "sat", ("on", "the", "mat")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-for-each-003">
      <description>Test case for array:for-each</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:for-each(
  [ [ "the", "cat" ], [ "sat" ], [ "on", "the", "mat" ] ],
  array:flatten#1
)
      </test>
      <result>
         <assert-deep-eq>[("the", "cat"), "sat", ("on", "the", "mat")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-filter-001">
      <description>Test case for array:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:filter(
  ["A", "B", 1, 2],
  function($x) { $x instance of xs:integer }
)
      </test>
      <result>
         <assert-deep-eq>[1, 2]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-filter-002">
      <description>Test case for array:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:filter(
  ["the cat", "sat", "on the mat"],
  function { count(tokenize(.)) &gt; 1 }
)
      </test>
      <result>
         <assert-deep-eq>["the cat", "on the mat"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-filter-003">
      <description>Test case for array:filter</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:filter(["A", "B", "", 0, 1], boolean#1)
      </test>
      <result>
         <assert-deep-eq>["A", "B", 1]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-left-001">
      <description>Test case for array:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-left(
  [true(), true(), false()],
  true(),
  function($x, $y) { $x and $y }
)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-left-002">
      <description>Test case for array:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-left(
  [true(), true(), false()],
  false(), 
  function($x, $y) { $x or $y }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-left-003">
      <description>Test case for array:fold-left</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-left(
  [ 1, 2, 3 ],
  [],
  function($x, $y) { [ $x, $y ] }
)
      </test>
      <result>
         <assert-deep-eq>[[[[], 1], 2], 3]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-right-001">
      <description>Test case for array:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-right(
  [true(), true(), false()],
  true(),
  function($x, $y) { $x and $y }
)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-right-002">
      <description>Test case for array:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-right(
  [true(), true(), false()],
  false(),
  function($x, $y) { $x or $y }
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-fold-right-003">
      <description>Test case for array:fold-right</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:fold-right(
  [ 1, 2, 3 ],
  [],
  function($x, $y) { [ $x, $y ] }
)
      </test>
      <result>
         <assert-deep-eq>[1, [2, [3, []]]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-for-each-pair-001">
      <description>Test case for array:for-each-pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:for-each-pair(
  ["A", "B", "C"],
  [1, 2, 3],
  function($x, $y) { array { $x, $y }}
)
      </test>
      <result>
         <assert-deep-eq>[["A", 1], ["B", 2], ["C", 3]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-for-each-pair-002">
      <description>Test case for array:for-each-pair</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $array := ["A", "B", "C", "D"]
return array:for-each-pair(
  $array,
  array:tail($array),
  concat#2
)
      </test>
      <result>
         <assert-deep-eq>["AB", "BC", "CD"]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-build-001">
      <description>Test case for array:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:build(1 to 5)
      </test>
      <result>
         <assert-deep-eq>[1, 2, 3, 4, 5]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-build-002">
      <description>Test case for array:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:build(
  1 to 5,
  function { 2 * . }
)
      </test>
      <result>
         <assert-deep-eq>[2, 4, 6, 8, 10]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-build-003">
      <description>Test case for array:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:build(
  1 to 5,
  function { 1 to . }
)
      </test>
      <result>
         <assert-deep-eq>[1, (1,2), (1,2,3), (1,2,3,4), (1,2,3,4,5)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-build-004">
      <description>Test case for array:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:build(
  ("red", "green", "blue"),
  characters#1
)
      </test>
      <result>
         <assert-deep-eq>[("r", "e", "d"), ("g", "r", "e", "e", "n"), ("b", "l", "u", "e")]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-build-005">
      <description>Test case for array:build</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:build(
  1 to 5,
  function { array { 1 to . } }
)
      </test>
      <result>
         <assert-deep-eq>[[1], [1,2], [1,2,3], [1,2,3,4], [1,2,3,4,5]]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-members-001">
      <description>Test case for array:members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:members([])
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-members-002">
      <description>Test case for array:members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:members([1 to 5])?value
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 5)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-members-003">
      <description>Test case for array:members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:members([(1,1), (2,4), (3,9), (4,16), (5,25)])
! sum(?value)
      </test>
      <result>
         <assert-deep-eq>(2, 6, 12, 20, 30)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-members-004">
      <description>Test case for array:members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $array := [ "any array" ]
return deep-equal(
  $array,
  array:of-members(array:members($array))
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-001">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:split([])
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-002">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:split([ () ])
      </test>
      <result>
         <assert-deep-eq>[ () ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-003">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:split([ 1 to 5 ])
      </test>
      <result>
         <assert-deep-eq>[ (1, 2, 3, 4, 5) ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-004">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:split(
  array { 1 to 5 }
)
      </test>
      <result>
         <assert-deep-eq>[ 1 ], [ 2 ], [ 3 ], [ 4 ], [ 5 ]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-005">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:split(
  [ (1,1), (2,4), (3,9), (4,16), (5,25) ]
) ! sum(.)
      </test>
      <result>
         <assert-deep-eq>2, 6, 12, 20, 30</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-split-006">
      <description>Test case for array:split</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        let $array := [ "any array" ]
return deep-equal(
  $array,
  array:join(array:split($array))
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-array-of-members-001">
      <description>Test case for array:of-members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:of-members(())
      </test>
      <result>
         <assert-deep-eq>[]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-of-members-002">
      <description>Test case for array:of-members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:of-members(map { 'value': (1 to 5) })
      </test>
      <result>
         <assert-deep-eq>[(1, 2, 3, 4, 5)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-of-members-003">
      <description>Test case for array:of-members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:of-members((1 to 5) ! map { 'value': . })
      </test>
      <result>
         <assert-deep-eq>[1, 2, 3, 4, 5]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-of-members-004">
      <description>Test case for array:of-members</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:of-members((1 to 5) ! map { 'value': (., .*.) })
      </test>
      <result>
         <assert-deep-eq>[(1,1), (2,4), (3,9), (4,16), (5,25)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-sort-001">
      <description>Test case for array:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:sort([1, 4, 6, 5, 3])
      </test>
      <result>
         <assert-deep-eq>[1, 3, 4, 5, 6]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-sort-002">
      <description>Test case for array:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:sort([1, -2, 5, 10, -10, 10, 8], (), abs#1)
      </test>
      <result>
         <assert-deep-eq>[1, -2, 5, 8, 10, -10, 10]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-sort-003">
      <description>Test case for array:sort</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:sort([(1,0), (1,1), (0,1), (0,0)])
      </test>
      <result>
         <assert-deep-eq>[(0,0), (0,1), (1,0), (1,1)]</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-flatten-001">
      <description>Test case for array:flatten</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:flatten([1, 4, 6, 5, 3])
      </test>
      <result>
         <assert-deep-eq>(1, 4, 6, 5, 3)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-flatten-002">
      <description>Test case for array:flatten</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:flatten(([1, 2, 5], [[10, 11], 12], [], 13))
      </test>
      <result>
         <assert-deep-eq>(1, 2, 5, 10, 11, 12, 13)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-flatten-003">
      <description>Test case for array:flatten</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:flatten([(1,0), (1,1), (0,1), (0,0)])
      </test>
      <result>
         <assert-deep-eq>(1, 0, 1, 1, 0, 1, 0, 0)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-values-001">
      <description>Test case for array:values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:values(array { "one", "two", "three" })
      </test>
      <result>
         <assert-deep-eq>("one", "two", "three")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-array-values-002">
      <description>Test case for array:values</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        array:values([ (), 1, (2 to 4), [ 5 ] ])
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, [ 5 ])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-001">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every(())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-002">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every((1=1, 2=2, 3=4))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-003">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every((), boolean#1)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-004">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every((1, 3, 7), function { . mod 2 = 1 })
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-005">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every(-5 to +5, function { . ge 0 })
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-006">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every(
  ("January", "February", "March", "April",
   "September", "October", "November", "December"),
  contains(?, "r")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-every-007">
      <description>Test case for fn:every</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        every(
  ("January", "February", "March", "April",
   "September", "October", "November", "December")
  =!&gt; contains("r")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-001">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("#32")
      </test>
      <result>
         <assert-deep-eq>" "</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-002">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("#x20")
      </test>
      <result>
         <assert-deep-eq>" "</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-003">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("\t")
      </test>
      <result>
         <assert-deep-eq>codepoints-to-string(9)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-004">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("#x1D1CA")
      </test>
      <result>
         <assert-deep-eq>"𝇊"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-005">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("aacute")
      </test>
      <result>
         <assert-deep-eq>"á"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-006">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("eth")
      </test>
      <result>
         <assert-deep-eq>"ð"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-char-007">
      <description>Test case for fn:char</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        char("NotEqualTilde")
      </test>
      <result>
         <assert-deep-eq>codepoints-to-string((8770, 824))</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-001">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        characters("Thérèse")
      </test>
      <result>
         <assert-deep-eq>("T", "h", "é", "r", "è", "s", "e")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-002">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        characters("")
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-003">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        characters(())
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-004">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        characters("Banana") =&gt; index-of("a")
      </test>
      <result>
         <assert-deep-eq>(2, 4, 6)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-005">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        characters("stretch") =&gt; string-join("-")
      </test>
      <result>
         <assert-deep-eq>"s-t-r-e-t-c-h"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-characters-006">
      <description>Test case for fn:characters</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        "Banana"
=&gt; characters()
=&gt; reverse()
=&gt; string-join()
      </test>
      <result>
         <assert-deep-eq>"ananaB"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-001">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          &lt;a x="10" y="5" z="2"/&gt;
           return 

        
        highest($e/@*) ! name()
      </test>
      <result>
         <assert-deep-eq>("x")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-002">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          &lt;a x="10" y="5" z="2"/&gt;
           return 

        
        highest($e/@*, (), string#1) ! name()
      </test>
      <result>
         <assert-deep-eq>("y")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-003">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        highest(("red", "green", "blue"), (), string-length#1)
      </test>
      <result>
         <assert-deep-eq>("green")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-004">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        highest(
  ("red", "green", "blue"),
  (),
  map {
    "red"  : xs:hexBinary('FF0000'),
    "green": xs:hexBinary('008000'),
    "blue" : xs:hexBinary('0000FF')
  }
)
      </test>
      <result>
         <assert-deep-eq>("red")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-005">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        highest(
  ("red", "orange", "yellow", "green",
   "blue", "indigo", "violet"),
  (),
  string-length#1
)
      </test>
      <result>
         <assert-deep-eq>("orange", "yellow", "indigo", "violet")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-highest-006">
      <description>Test case for fn:highest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        highest(1 to 25, (), function { . idiv 10 })
      </test>
      <result>
         <assert-deep-eq>(20, 21, 22, 23, 24, 25)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-where-001">
      <description>Test case for fn:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-where((), boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-where-002">
      <description>Test case for fn:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-where((0, 4, 9), boolean#1)
      </test>
      <result>
         <assert-deep-eq>(2, 3)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-where-003">
      <description>Test case for fn:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-where(1 to 10, function { . mod 2 = 0 })
      </test>
      <result>
         <assert-deep-eq>(2, 4, 6, 8, 10)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-index-where-004">
      <description>Test case for fn:index-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        index-where(
  ("January", "February", "March", "April",
   "May", "June", "July", "August", "September",
   "October", "November", "December"),
  contains(?, "r")
)
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 9, 10, 11, 12)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-is-NaN-001">
      <description>Test case for fn:is-NaN</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        is-NaN(23)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-is-NaN-002">
      <description>Test case for fn:is-NaN</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        is-NaN("NaN")
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-is-NaN-003">
      <description>Test case for fn:is-NaN</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        is-NaN(number("twenty-three"))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-is-NaN-004">
      <description>Test case for fn:is-NaN</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        is-NaN(math:sqrt(-1))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-after-001">
      <description>Test case for fn:items-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-after(10 to 20, function { . gt 12 })
      </test>
      <result>
         <assert-deep-eq>(14, 15, 16, 17, 18, 19, 20)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-after-002">
      <description>Test case for fn:items-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-after(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)
      </test>
      <result>
         <assert-deep-eq>("May")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-after-003">
      <description>Test case for fn:items-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-after(10 to 20, function { . gt 100 })
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-after-004">
      <description>Test case for fn:items-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-after((), boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-after-005">
      <description>Test case for fn:items-after</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-xml("&lt;doc&gt;&lt;p/&gt;&lt;p/&gt;&lt;h2/&gt;&lt;img/&gt;&lt;/doc&gt;")//doc/*
=&gt; items-after(function { boolean(self::h2) })
      </test>
      <result>
         <assert-xml ignore-prefixes="false"><![CDATA[<img/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-001">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-before(10 to 20, function { . gt 12 })
      </test>
      <result>
         <assert-deep-eq>(10, 11, 12)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-002">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-before(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)
      </test>
      <result>
         <assert-deep-eq>("January", "February", "March")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-003">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-before(10 to 20, function { . gt 100 })
      </test>
      <result>
         <assert-deep-eq>(10 to 20)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-004">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-before((), boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-005">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-xml("&lt;doc&gt;&lt;p/&gt;&lt;p/&gt;&lt;h2/&gt;&lt;img/&gt;&lt;/doc&gt;")//doc/*
=&gt; items-before(function { boolean(self::img) })
=!&gt; name()
      </test>
      <result>
         <assert-deep-eq>"p", "p", "h2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-before-006">
      <description>Test case for fn:items-before</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        ("Aardvark", "Antelope", "Bison",
 "Buffalo", "Camel", "Dingo")
=&gt; items-starting-where(starts-with(?, "B"))
=&gt; items-before(starts-with(?, "D"))
      </test>
      <result>
         <assert-deep-eq>"Bison", "Buffalo", "Camel"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-starting-where-001">
      <description>Test case for fn:items-starting-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-starting-where(10 to 20, function { . gt 12 })
      </test>
      <result>
         <assert-deep-eq>(13, 14, 15, 16, 17, 18, 19, 20)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-starting-where-002">
      <description>Test case for fn:items-starting-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-starting-where(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)
      </test>
      <result>
         <assert-deep-eq>("April", "May")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-starting-where-003">
      <description>Test case for fn:items-starting-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-starting-where(10 to 20, function { . gt 100 })
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-starting-where-004">
      <description>Test case for fn:items-starting-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-starting-where((), boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-starting-where-005">
      <description>Test case for fn:items-starting-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-xml("&lt;doc&gt;&lt;p/&gt;&lt;p/&gt;&lt;h2/&gt;&lt;img/&gt;&lt;/doc&gt;")//doc/*
=&gt; items-starting-where(function { boolean(self::h2) })
=!&gt; name()
      </test>
      <result>
         <assert-deep-eq>"h2", "img"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-ending-where-001">
      <description>Test case for fn:items-ending-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-ending-where(10 to 20, function { . gt 12 })
      </test>
      <result>
         <assert-deep-eq>(10, 11, 12, 13)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-ending-where-002">
      <description>Test case for fn:items-ending-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-ending-where(
  ("January", "February", "March", "April", "May"),
  starts-with(?, "A")
)
      </test>
      <result>
         <assert-deep-eq>("January", "February", "March", "April")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-ending-where-003">
      <description>Test case for fn:items-ending-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-ending-where(10 to 20, function { . gt 100 })
      </test>
      <result>
         <assert-deep-eq>(10 to 20)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-ending-where-004">
      <description>Test case for fn:items-ending-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        items-ending-where((), boolean#1)
      </test>
      <result>
         <assert-deep-eq>()</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-items-ending-where-005">
      <description>Test case for fn:items-ending-where</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-xml("&lt;doc&gt;&lt;p/&gt;&lt;p/&gt;&lt;h2/&gt;&lt;img/&gt;&lt;/doc&gt;")//doc/*
=&gt; items-ending-where(function { boolean(self::h2) })
=!&gt; name()
      </test>
      <result>
         <assert-deep-eq>"p", "p", "h2"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-001">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          &lt;a x="10" y="5" z="2"/&gt;
           return 

        
        lowest($e/@*) ! name()
      </test>
      <result>
         <assert-deep-eq>("z")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-002">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <dependency type="spec" value="XQ40+" satisfied="true"/>
      <test>
          let $e := 
          &lt;a x="10" y="5" z="2"/&gt;
           return 

        
        lowest($e/@*, (), string#1) ! name()
      </test>
      <result>
         <assert-deep-eq>("x")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-003">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lowest(("red", "green", "blue"), (), string-length#1)
      </test>
      <result>
         <assert-deep-eq>("red")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-004">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lowest(
  ("red", "green", "blue"),
  (),
  map {
    "red"  : xs:hexBinary('FF0000'),
    "green": xs:hexBinary('008000'),
    "blue" : xs:hexBinary('0000FF')
  }
)
      </test>
      <result>
         <assert-deep-eq>("blue")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-005">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lowest(
  ("April", "June", "July", "August"),
  (),
  string-length#1
)
      </test>
      <result>
         <assert-deep-eq>("June", "July")</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-lowest-006">
      <description>Test case for fn:lowest</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        lowest(1 to 25, (), function { . idiv 10 })
      </test>
      <result>
         <assert-deep-eq>(1, 2, 3, 4, 5, 6, 7, 8, 9)</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-001">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some(())
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-002">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some((1=1, 2=2, 3=4))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-003">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some((), boolean#1)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-004">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some((1, 3, 7), function {. mod 2 = 1 })
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-005">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some(-5 to +5, function {. ge 0 })
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-006">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some(
  ("January", "February", "March", "April",
   "September", "October", "November", "December"),
  contains(?, "z")
)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-some-007">
      <description>Test case for fn:some</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        some(
  ("January", "February", "March", "April",
   "September", "October", "November", "December")
  =!&gt; contains("r")
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-equal-001">
      <description>Test case for fn:all-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-equal((1,2,3))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-equal-002">
      <description>Test case for fn:all-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-equal((1, 1.0, 1.0e0))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-equal-003">
      <description>Test case for fn:all-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-equal("one")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-equal-004">
      <description>Test case for fn:all-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-equal(())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-equal-005">
      <description>Test case for fn:all-equal</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-equal(
  ("ABC", "abc"),
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-different-001">
      <description>Test case for fn:all-different</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-different((1,2,3))
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-different-002">
      <description>Test case for fn:all-different</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-different((1, 1.0, 1.0e0))
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-different-003">
      <description>Test case for fn:all-different</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-different("one")
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-different-004">
      <description>Test case for fn:all-different</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-different(())
      </test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-all-different-005">
      <description>Test case for fn:all-different</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        all-different(
  ("ABC", "abc"),
  "http://www.w3.org/2005/xpath-functions/collation/html-ascii-case-insensitive"
)
      </test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-001">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  "http://qt4cg.org/specifications/xpath-functions-40/Overview.html#parse-uri"
)
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "http://qt4cg.org/specifications/xpath-functions-40/Overview.html#parse-uri",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "qt4cg.org",
  "host": "qt4cg.org",
  "path": "/specifications/xpath-functions-40/Overview.html",
  "fragment": "parse-uri",
  "path-segments": ("", "specifications", "xpath-functions-40", "Overview.html")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-002">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("http://www.ietf.org/rfc/rfc2396.txt")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "http://www.ietf.org/rfc/rfc2396.txt",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "www.ietf.org",
  "host": "www.ietf.org",
  "path": "/rfc/rfc2396.txt",
  "path-segments": ("", "rfc", "rfc2396.txt")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-003">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("https://example.com/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "https://example.com/path/to/file",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com",
  "host": "example.com",
  "path": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-004">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  `https://example.com:8080/path?s=%22hello world%22&amp;sort=relevance`
)
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": `https://example.com:8080/path?s=%22hello world%22&amp;sort=relevance`,
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com:8080",
  "host": "example.com",
  "port": "8080",
  "path": "/path",
  "query": `s=%22hello world%22&amp;sort=relevance`,
  "query-parameters": map {
    "s": '"hello world"',
    "sort": "relevance"
  },
  "path-segments": ("", "path")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-005">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("https://user@example.com/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "https://user@example.com/path/to/file",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "user@example.com",
  "userinfo": "user",
  "host": "example.com",
  "path": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-006">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("ftp://ftp.is.co.za/rfc/rfc1808.txt")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "ftp://ftp.is.co.za/rfc/rfc1808.txt",
  "scheme": "ftp",
  "hierarchical": true(),
  "authority": "ftp.is.co.za",
  "host": "ftp.is.co.za",
  "path": "/rfc/rfc1808.txt",
  "path-segments": ("", "rfc", "rfc1808.txt")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-007">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file:////uncname/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file:////uncname/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "authority": "uncname",
  "host": "uncname",
  "path": "/path/to/file",
  "filepath": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-008">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file:///c:/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file:///c:/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-009">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file:/C:/Program%20Files/test.jar")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file:/C:/Program%20Files/test.jar",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/C:/Program%20Files/test.jar",
  "filepath": "C:/Program Files/test.jar",
  "path-segments": ("", "C: ", "Program Files", "test.jar")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-010">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file:\\c:\path\to\file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file:\\c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-011">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file:\c:\path\to\file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file:\c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-012">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("c:\path\to\file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "c:\path\to\file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c: ", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-013">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("/path/to/file")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "/path/to/file",
  "hierarchical": true(),
  "path": "/path/to/file",
  "filepath": "/path/to/file",
  "path-segments": ("", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-014">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("#testing")
      </test>
      <result>
         <assert-deep-eq>
map {
 "uri": "#testing",
 "fragment": "testing"
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-015">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("?q=1")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "?q=1",
  "query": "q=1",
  "query-parameters": map {
    "q": "1"
  }
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-016">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("ldap://[2001:db8::7]/c=GB?objectClass?one")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "ldap://[2001:db8::7]/c=GB?objectClass?one",
  "scheme": "ldap",
  "hierarchical": true(),
  "authority": "[2001:db8::7]",
  "host": "[2001:db8::7]",
  "path": "/c=GB",
  "query": "objectClass?one",
  "query-parameters": map {
    "": "objectClass?one"
  },
  "path-segments": ("", "c=GB")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-017">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("mailto:John.Doe@example.com")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "mailto:John.Doe@example.com",
  "scheme": "mailto",
  "hierarchical": false(),
  "path": "John.Doe@example.com",
  "path-segments": ("John.Doe@example.com")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-018">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("news:comp.infosystems.www.servers.unix")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "news:comp.infosystems.www.servers.unix",
  "scheme": "news",
  "hierarchical": false(),
  "path": "comp.infosystems.www.servers.unix",
  "path-segments": ("comp.infosystems.www.servers.unix")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-019">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("tel:+1-816-555-1212")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "tel:+1-816-555-1212",
  "scheme": "tel",
  "hierarchical": false(),
  "path": "+1-816-555-1212",
  "path-segments": (" 1-816-555-1212")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-020">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("telnet://192.0.2.16:80/")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "telnet://192.0.2.16:80/",
  "scheme": "telnet",
  "hierarchical": true(),
  "authority": "192.0.2.16:80",
  "host": "192.0.2.16",
  "port": "80",
  "path": "/",
  "path-segments": ("", "")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-021">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  "urn:oasis:names:specification:docbook:dtd:xml:4.1.2"
)
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "urn:oasis:names:specification:docbook:dtd:xml:4.1.2",
  "scheme": "urn",
  "hierarchical": false(),
  "path": "oasis:names:specification:docbook:dtd:xml:4.1.2",
  "path-segments": "oasis:names:specification:docbook:dtd:xml:4.1.2"
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-022">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("tag:textalign.net,2015:ns")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "tag:textalign.net,2015:ns",
  "scheme": "tag",
  "hierarchical": false(),
  "path": "textalign.net,2015:ns",
  "path-segments": "textalign.net,2015:ns"
}
</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-023">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("tag:jan@example.com,1999-01-31:my-uri")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "tag:jan@example.com,1999-01-31:my-uri",
  "scheme": "tag",
  "hierarchical": false(),
  "path": "jan@example.com,1999-01-31:my-uri",
  "path-segments": "jan@example.com,1999-01-31:my-uri"
}
</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-024">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  "jar:file:/C:/Program%20Files/test.jar!/foo/bar"
)
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "jar:file:/C:/Program%20Files/test.jar!/foo/bar",
  "scheme": "jar",
  "hierarchical": false(),
  "path": "file:/C:/Program%20Files/test.jar!/foo/bar",
  "path-segments": ("file:", "C:", "Program Files", "test.jar!", "foo", "bar")
}
</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-025">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("http://www.example.org/Dürst")
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "http://www.example.org/Dürst",
  "scheme": "http",
  "hierarchical": true(),
  "authority": "www.example.org",
  "host": "www.example.org",
  "path": "/Dürst",
  "path-segments": ("", "Dürst")
}
</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-026">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  "https://example.com:8080/path?s=%22hello world%22;sort=relevance",
  map { "query-separator": ";" }
)
      </test>
      <result>
         <assert-deep-eq>
map {
  "uri": "https://example.com:8080/path?s=%22hello world%22;sort=relevance",
  "scheme": "https",
  "hierarchical": true(),
  "authority": "example.com:8080",
  "host": "example.com",
  "port": "8080",
  "path": "/path",
  "query": "s=%22hello world%22;sort=relevance",
  "query-parameters": map {
    "s": '"hello world"',
    "sort": "relevance"
  },
  "path-segments": ("", "path")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-027">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri(
  "https://example.com:8080/path?s=%22hello world%22;;sort=relevance",
  map { "query-separator": ";;" }
)
      </test>
      <result>
         <error code="FOXX0000"/>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-028">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("c|/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "c|/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c:", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-parse-uri-029">
      <description>Test case for fn:parse-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        parse-uri("file://c|/path/to/file")
      </test>
      <result>
         <assert-deep-eq>map {
  "uri": "file://c|/path/to/file",
  "scheme": "file",
  "hierarchical": true(),
  "path": "/c:/path/to/file",
  "filepath": "c:/path/to/file",
  "path-segments": ("", "c:", "path", "to", "file")
}</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-build-uri-001">
      <description>Test case for fn:build-uri</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        build-uri(map {
    "scheme": "https",
    "host": "qt4cg.org",
    "port": (),
    "path": "/specifications/index.html"
  })
      </test>
      <result>
         <assert-deep-eq>"https://qt4cg.org/specifications/index.html"</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-partition-001">
      <description>Test case for fn:partition</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        partition(
  ("Anita", "Anne", "Barbara", "Catherine", "Christine"), 
  function($partition, $next) {
    substring(head($partition),1,1) ne substring($next,1,1)
  }
)
      </test>
      <result>
         <assert-deep-eq>(["Anita", "Anne"], ["Barbara"], ["Catherine", "Christine"])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-partition-002">
      <description>Test case for fn:partition</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        partition(
  (1, 2, 3, 4, 5, 6, 7),
  function($partition, $next) {
    count($partition) eq 2
  }
)
      </test>
      <result>
         <assert-deep-eq>([1, 2], [3, 4], [5, 6], [7])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-partition-003">
      <description>Test case for fn:partition</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        partition(
  (1, 4, 6, 3, 1, 1),
  function($partition, $next) {
    sum($partition) ge 5
  }
)
      </test>
      <result>
         <assert-deep-eq>([1, 4], [6], [3, 1, 1])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-partition-004">
      <description>Test case for fn:partition</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        partition(
  tokenize("In the beginning was the word"), 
  function($partition, $next) {
    sum(($partition, $next) ! string-length()) gt 10
  }
)
      </test>
      <result>
         <assert-deep-eq>(["In", "the"], ["beginning"], ["was", "the", "word"])</assert-deep-eq>
      </result>
   </test-case>

   <test-case name="fo-test-fn-partition-005">
      <description>Test case for fn:partition</description>
      <created by="Michael Kay using generate-qt3-test-set.xsl" on="2023-10-16"/>
      <environment ref="global"/>
      <test>
        partition(
  (1, 2, 3, 6, 7, 9, 10),
  function($partition, $next) {
    $next != foot($partition) + 1
  }
)
      </test>
      <result>
         <assert-deep-eq>([1, 2, 3], [6, 7], [9, 10])</assert-deep-eq>
      </result>
   </test-case>
</test-set>
