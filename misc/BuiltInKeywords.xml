<?xml version="1.0" encoding="UTF-8"?>
<!-- ************************************************** -->
<!-- * This file is generated automatically by the    * -->
<!-- * qtspecs build process. It is committed to the  * -->
<!-- * test repository automatically. Any changes you * -->
<!-- * make to this file will be lost on the next     * -->
<!-- * build. Have a nice day. The cake is a lie.     * -->
<!-- ************************************************** -->
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="misc-BuiltInKeywords">
   <description>Tests for keyword argument names to built-in functions: 4.0 proposal</description>
   <dependency type="spec" value="XP40+ XQ40+"/>
<!--Generated using generate-keyword-test-set.xsl from function-catalog.xml on 2024-07-16Z-->
   <environment name="ka">
      <namespace prefix="math" uri="http://www.w3.org/2005/xpath-functions/math"/>
      <decimal-format name="data" decimal-separator="." grouping-separator=","/>
      <source role="." file="BuiltInKeywords/simple-doc.xml"/>
   </environment>
   <test-case name="Keywords-fn-node-name-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:node-name(node := .)
            return fn:deep-equal($x, /doc!fn:node-name(.)) and $x instance of xs:QName?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-nilled-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:nilled(node := .)
            return fn:deep-equal($x, /doc!fn:nilled(.)) and $x instance of xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:string(value := .)
            return fn:deep-equal($x, /doc!fn:string(.)) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-data-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:data(input := .)
            return fn:deep-equal($x, /doc!fn:data(.)) and $x instance of xs:anyAtomicType*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-base-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:base-uri(node := .)
            return fn:deep-equal($x, /doc!fn:base-uri(.)) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-document-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := /doc!fn:document-uri(node := .)
            return fn:deep-equal($x, /doc!fn:document-uri(.)) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-trace-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:trace(input := ("abc", "def"), label := ())
            return fn:deep-equal($x, fn:trace(("abc", "def"), ())) and $x instance of item()*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-message-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:message(input := ("abc", "def"), label := ())
            return fn:deep-equal($x, fn:message(("abc", "def"), ())) and $x instance of empty-sequence()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-abs-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:abs(value := 1)
            return fn:deep-equal($x, fn:abs(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ceiling-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:ceiling(value := 1)
            return fn:deep-equal($x, fn:ceiling(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-floor-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:floor(value := 1)
            return fn:deep-equal($x, fn:floor(1)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:round(value := 1, precision := 0, rounding-mode := 'half-to-ceiling')
            return fn:deep-equal($x, fn:round(1, 0, 'half-to-ceiling')) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-round-half-to-even-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:round-half-to-even(value := 1, precision := 0)
            return fn:deep-equal($x, fn:round-half-to-even(1, 0)) and $x instance of xs:numeric?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-integer-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-integer(value := 1, picture := '0.0', language := ())
            return fn:deep-equal($x, fn:format-integer(1, '0.0', ())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-format-number-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:format-number(value := 1, picture := '0.0', options := ())
            return fn:deep-equal($x, fn:format-number(1, '0.0', ())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-parse-integer-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:parse-integer(value := '12345', radix := 10)
            return fn:deep-equal($x, fn:parse-integer('12345', 10)) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pi-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:pi()
            return fn:deep-equal($x, math:pi()) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-e-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:e()
            return fn:deep-equal($x, math:e()) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:exp(value := 1)
            return fn:deep-equal($x, math:exp(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-exp10-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:exp10(value := 1)
            return fn:deep-equal($x, math:exp10(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:log(value := 1)
            return fn:deep-equal($x, math:log(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-log10-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:log10(value := 1)
            return fn:deep-equal($x, math:log10(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sqrt-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:sqrt(value := 1)
            return fn:deep-equal($x, math:sqrt(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-pow-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:pow(x := 1, y := 1)
            return fn:deep-equal($x, math:pow(1, 1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sin-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:sin(radians := 1)
            return fn:deep-equal($x, math:sin(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-cos-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:cos(radians := 1)
            return fn:deep-equal($x, math:cos(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-tan-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:tan(radians := 1)
            return fn:deep-equal($x, math:tan(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-asin-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:asin(value := 1)
            return fn:deep-equal($x, math:asin(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-acos-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:acos(value := 1)
            return fn:deep-equal($x, math:acos(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:atan(value := 1)
            return fn:deep-equal($x, math:atan(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-atan2-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:atan2(y := 1, x := 1)
            return fn:deep-equal($x, math:atan2(1, 1)) and $x instance of xs:double</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-sinh-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:sinh(value := 1)
            return fn:deep-equal($x, math:sinh(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-cosh-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:cosh(value := 1)
            return fn:deep-equal($x, math:cosh(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-math-tanh-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := math:tanh(value := 1)
            return fn:deep-equal($x, math:tanh(1)) and $x instance of xs:double?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoints-to-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:codepoints-to-string(values := ())
            return fn:deep-equal($x, fn:codepoints-to-string(())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-to-codepoints-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-to-codepoints(value := "abc")
            return fn:deep-equal($x, fn:string-to-codepoints("abc")) and $x instance of xs:integer*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-compare-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:compare(value1 := "abc", value2 := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:compare("abc", "abc", fn:default-collation())) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-codepoint-equal-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:codepoint-equal(value1 := "abc", value2 := "abc")
            return fn:deep-equal($x, fn:codepoint-equal("abc", "abc")) and $x instance of xs:boolean?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-join-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-join(values := ("abc", "def"), separator := "")
            return fn:deep-equal($x, fn:string-join(("abc", "def"), "")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring(value := "abc", start := 1, length := ())
            return fn:deep-equal($x, fn:substring("abc", 1, ())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-string-length-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:string-length(value := fn:string(.))
            return fn:deep-equal($x, fn:string-length(fn:string(.))) and $x instance of xs:integer</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-space-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:normalize-space(value := fn:string(.))
            return fn:deep-equal($x, fn:normalize-space(fn:string(.))) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-normalize-unicode-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:normalize-unicode(value := "abc", form := "NFC")
            return fn:deep-equal($x, fn:normalize-unicode("abc", "NFC")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-upper-case-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:upper-case(value := "abc")
            return fn:deep-equal($x, fn:upper-case("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-lower-case-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:lower-case(value := "abc")
            return fn:deep-equal($x, fn:lower-case("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-translate-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:translate(value := "abc", replace := "abc", with := "abc")
            return fn:deep-equal($x, fn:translate("abc", "abc", "abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-hash-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:hash(value := '(xs:string | xs:hexBinary | xs:base64Binary)?', options := {})
            return fn:deep-equal($x, fn:hash('(xs:string | xs:hexBinary | xs:base64Binary)?', {})) and $x instance of xs:hexBinary?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-encode-for-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:encode-for-uri(value := "abc")
            return fn:deep-equal($x, fn:encode-for-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-decode-from-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:decode-from-uri(value := "abc")
            return fn:deep-equal($x, fn:decode-from-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-iri-to-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:iri-to-uri(value := "abc")
            return fn:deep-equal($x, fn:iri-to-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-escape-html-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:escape-html-uri(value := "abc")
            return fn:deep-equal($x, fn:escape-html-uri("abc")) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:contains(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:contains("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-starts-with-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:starts-with(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:starts-with("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-ends-with-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:ends-with(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:ends-with("abc", "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-before-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring-before(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:substring-before("abc", "abc", fn:default-collation())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-substring-after-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:substring-after(value := "abc", substring := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:substring-after("abc", "abc", fn:default-collation())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-matches-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:matches(value := "abc", pattern := "abc", flags := "")
            return fn:deep-equal($x, fn:matches("abc", "abc", "")) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-replace-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:replace(value := "abc", pattern := "abc", replacement := (), flags := '', action := ())
            return fn:deep-equal($x, fn:replace("abc", "abc", (), '', ())) and $x instance of xs:string</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-tokenize-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:tokenize(value := "abc", pattern := (), flags := "")
            return fn:deep-equal($x, fn:tokenize("abc", (), "")) and $x instance of xs:string*</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-analyze-string-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:analyze-string(value := "abc", pattern := "abc", flags := "")
            return fn:deep-equal($x, fn:analyze-string("abc", "abc", "")) and $x instance of element(fn:analyze-string-result)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-contains-token-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:contains-token(value := ("abc", "def"), token := "abc", collation := fn:default-collation())
            return fn:deep-equal($x, fn:contains-token(("abc", "def"), "abc", fn:default-collation())) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-resolve-uri-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:resolve-uri(href := 'BuiltInKeywords.xml', base := ())
            return fn:deep-equal($x, fn:resolve-uri('BuiltInKeywords.xml', ())) and $x instance of xs:anyURI?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-true-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:true()
            return fn:deep-equal($x, fn:true()) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-false-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:false()
            return fn:deep-equal($x, fn:false()) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-boolean-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:boolean(input := 42)
            return fn:deep-equal($x, fn:boolean(42)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-not-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:not(input := 42)
            return fn:deep-equal($x, fn:not(42)) and $x instance of xs:boolean</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-seconds-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:seconds(value := 1.3)
            return fn:deep-equal($x, fn:seconds(1.3)) and $x instance of xs:dayTimeDuration?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-years-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:years-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:years-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="Keywords-fn-months-from-duration-1">
      <description>Test of keyword arguments in static function call</description>
      <created by="generate-keyword-test-set.xsl" on="2024-07-16Z"/>
      <environment ref="ka"/>
      <test>let $x := fn:months-from-duration(value := xs:dayTimeDuration('P1D'))
            return fn:deep-equal($x, fn:months-from-duration(xs:dayTimeDuration('P1D'))) and $x instance of xs:integer?</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   
   
  
</test-set>
