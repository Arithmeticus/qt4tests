<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="xs-double">
   <description>Tests features of XSD 1.1 doubles</description>

   

   <test-case name="xs-double-001">
      <description>Test -0 in xs:double</description>
      <created by="Norman Walsh" on="2011-07-28"/>
      <dependency type="xsd-version" value="1.1"/>
      <test>fn:string(xs:double("-0"))</test>
      <result>
        <assert-eq>fn:string("-0")</assert-eq>
      </result>
   </test-case>
   
   <test-case name="xs-double-002">
      <description>Distinguish positive from negative zero</description>
      <created by="Michael Kay" on="2011-07-28"/>
      <dependency type="xsd-version" value="1.1"/>
      <test>1 div xs:double("-0") ne 1 div xs:double("0")</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-double-003">
      <description>Ensure +INF accepted in XSD 1.1</description>
      <created by="Michael Kay" on="2011-07-28"/>
      <dependency type="xsd-version" value="1.1"/>
      <test>exists(xs:double("+INF"))</test>
      <result>
        <assert-true/>
      </result>
   </test-case>
   
   <test-case name="xs-double-004">
      <description>Ensure +INF rejected in XSD 1.0</description>
      <created by="Michael Kay" on="2011-07-28"/>
      <dependency type="xsd-version" value="1.0"/>
      <test>exists(xs:double("+INF"))</test>
      <result>
        <error code="FORG0001"/>
      </result>
   </test-case>
   
   <test-case name="xs-double-005">
      <description>Parse a particular number known to cause trouble in Java and PHP.
        Some versions of Java go into an infinite loop on this one.
        You may be able to fix this by applying a Java patch: see
        http://www.oracle.com/technetwork/topics/security/alert-cve-2010-4476-305811.html</description>
      <created by="Michael Kay" on="2011-07-28"/>
      <dependency type="xsd-version" value="1.0"/>
      <test>xs:double("2.2250738585072012e-308")</test>
      <result>
        <assert-type>xs:double</assert-type>
      </result>
   </test-case>
  
  <test-case name="xs-double-401">
    <description>Zero argument constructor</description>
    <created by="Michael Kay" on="2023-12-08"/>   
    <dependency type="spec" value="XP40+ XQ40+"></dependency>
    <test>"3.14159" ! xs:double() ! round(.)</test>
    <result>
      <assert-eq>3</assert-eq>
    </result>
  </test-case>
  
  <test-case name="xs-double-402">
    <description>Zero argument function reference</description>
    <created by="Michael Kay" on="2023-12-08"/>   
    <dependency type="spec" value="XP40+ XQ40+"></dependency>
    <test>for $f in ((1 to 5) ! xs:double#0) return 3+$f() </test>
    <result>
      <assert-deep-eq>4,5,6,7,8</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="xs-double-403">
    <description>Double supplied as argument to function expecting decimal</description>
    <created by="Michael Kay" on="2024-02-06"/>   
    <dependency type="spec" value="XP40+ XQ40+"></dependency>
    <test>function($x as xs:decimal){$x + 1}(math:pi()) => round(2)</test>
    <result>
      <all-of>
        <assert-eq>4.14</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="xs-double-404">
    <description>Float supplied as argument to function expecting decimal</description>
    <created by="Michael Kay" on="2024-02-06"/>   
    <dependency type="spec" value="XP40+ XQ40+"></dependency>
    <test>function($x as xs:decimal){$x + 1}(xs:float(math:pi())) => round(2)</test>
    <result>
      <all-of>
        <assert-eq>4.14</assert-eq>
        <assert-type>xs:decimal</assert-type>
      </all-of>
    </result>
  </test-case>
   
 

</test-set>
