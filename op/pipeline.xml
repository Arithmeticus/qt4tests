<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="op-pipeline" covers-40="PR1686">
   <description>Tests for the "->" pipeline operator (new in XPath 4.0).</description>
   <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/"
         idref="func-pipeline"/>
   <dependency type="spec" value="XP40+ XQ40+"/>
   <test-case name="pipeline-01">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>() -> count(.)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-02">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>1 -> count(.)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-03">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 5) -> count(.)</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-04">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 5) -> string-join(.)</test>
      <result>
         <assert-string-value>12345</assert-string-value>
      </result>
   </test-case>
   <test-case name="pipeline-05">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>'/' -> string-join(1 to 5, .)</test>
      <result>
         <assert-string-value>1/2/3/4/5</assert-string-value>
      </result>
   </test-case>
   <test-case name="pipeline-06">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 5) ! (. + 1) -> string-join(.)</test>
      <result>
         <assert-string-value>23456</assert-string-value>
      </result>
   </test-case>
   <test-case name="pipeline-07">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 5) -> for-each(., fn { 1 }) -> sum(.)</test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-08">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 5) -> for-each(., fn { 1 }) ! sum(.)</test>
      <result>
         <assert-deep-eq>1, 1, 1, 1, 1</assert-deep-eq>
      </result>
   </test-case>
   <test-case name="pipeline-09">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>(1 to 100) -> deep-equal(., .)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>
   <test-case name="pipeline-10">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>1 -> (. + .)</test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-11">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>0 -> (. or .)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>
   <test-case name="pipeline-12">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>1 + 2 -> 3</test>
      <result>
         <assert-eq>4</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-13">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>-1 -> -2</test>
      <result>
         <assert-eq>-2</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-14">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>-1 -> -2</test>
      <result>
         <assert-eq>-2</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-15">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>1 -> -.</test>
      <result>
         <assert-eq>-1</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-16">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>-1 => sum() -> abs(.)</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-17">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>-1 -> sum(.) => abs()</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-18">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>2 -> (.+.) -> (.+.) -> (.+.)</test>
      <result>
         <assert-eq>16</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-19">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>((2 -> (.+.)) -> (.+.)) -> (.+.)</test>
      <result>
         <assert-eq>16</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-20">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test><![CDATA[
(1 to 3)
! (. + 1)
-> (., .)
-> (if(count(.) > 5) then 'large' else 'small')
-> upper-case(.)
      ]]></test>
      <result>
         <assert-string-value>LARGE</assert-string-value>
      </result>
   </test-case>
   <test-case name="pipeline-21">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>0->.->.->1</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   <test-case name="pipeline-22">
      <description>Pipeline operator</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>0->(.->.)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="pipeline-23" covers-40="PR1810">
      <description>Pipeline operator written with wide angle bracket</description>
      <created by="Michael Kay" on="2025-02-17"/>
      <modified by="Gunther Rademacher" on="2025-08-10" change="full-width form is no longer supported"/>
      <test>42 -ï¼ž .</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="pipeline-error-01">
      <description>Pipeline operator: precedence error</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>1 -> . + .</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
   <test-case name="pipeline-error-02">
      <description>Pipeline operator: precedence error</description>
      <created by="Christian Gruen" on="2025-01-22"/>
      <test>0 -> . or .</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
 
</test-set>
