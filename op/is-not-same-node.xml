<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="op-is-not-same-node" covers-40="PR2130">
   <description>Tests for the "is-not" operator introduced in 4.0</description>
   
   <!-- Mechanical conversion of "is-same-node" tests done by Michael Kay, 2025-07-29 -->
   
   <dependency type="spec" value="XP40+ XQ40+"/>
   
   <test-case name="is-not-001">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = empty Sequence operator = is-not operand2 = empty Sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <test>count(() is-not ())</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-002">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = empty Sequence operator = is-not operand2 = Single Element Constructor </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(() is-not <a>50000</a>)]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-003">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = empty Sequence operator = is-not operand2 = Single Node Element </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works"/>
      <test>count(() is-not /works[1]/employee[1]/empnum[1])</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-004">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = empty Sequence operator = is-not operand2 = Sequence of single Element Node </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="staff"/>
      <test>count(() is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-005">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Element Constructor operator = is-not operand2 = empty Sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[count(<a>50000</a> is-not ())]]></test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-006">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Element Constructor operator = is-not operand2 = Single Element Constructor </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>50000</a> is-not <a>50000</a>]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-007">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Element Constructor operator = is-not operand2 = Single Node Element </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>50000</a> is-not /works[1]/employee[1]/empnum[1]]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-008">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Element Constructor operator = is-not operand2 = Sequence of single Element Node </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<a>50000</a> is-not (/staff[1]/employee[1]/empnum[1])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-009">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Node Element operator = is-not operand2 = empty Sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works"/>
      <test>count(/works[1]/employee[1]/empnum[1] is-not ())</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-010">
      <description> Test of a ComparisonExpression with the operands set as follows 
         operand1 = Single Node Element operator = is-not operand2 = Single Element Constructor </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[/works[1]/employee[1]/empnum[1] is-not <a>50000</a>]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-011">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Node Element operator = is-not operand2 = Single Node Element </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works"/>
      <test>/works[1]/employee[1]/empnum[1] is-not /works[1]/employee[1]/empnum[1]</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-012">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Single Node Element operator = is-not operand2 = Sequence of single Element Node </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works-and-staff"/>      
      <test>
         $works/works[1]/employee[1]/empnum[1] is-not $staff/staff[1]/employee[1]/empnum[1]</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-013">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Sequence of single Element Node operator = is-not operand2 = empty Sequence </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="staff"/>
      <test>count((/staff[1]/employee[1]/empnum[1]) is-not ())</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-014">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Sequence of single Element Node operator = is-not operand2 = Single Element Constructor </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="staff"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[(/staff[1]/employee[1]/empnum[1]) is-not <a>50000</a>]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-015">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Sequence of single Element Node operator = is-not operand2 = Single Node Element </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="works-and-staff"/>
      <test>
          ($staff/staff[1]/employee[1]/empnum[1]) is-not $works/works[1]/employee[1]/empnum[1]</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-016">
      <description> Test of a ComparisonExpression with the operands set as follows operand1 = Sequence of single Element Node operator = is-not operand2 = Sequence of single Element Node </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-05-16"/>
      <environment ref="staff"/>
      <test>(/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-050">
      <description> Test of a Node Expression used as an argument to the fn not function </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-07"/>
      <environment ref="staff"/>
      <test>fn:not((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-051">
      <description> Test of a Node Expression used as part of a boolean-less-than expression (lt operator). </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-07"/>
      <environment ref="staff"/>
      <test>
         ((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])) 
         lt ((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-052">
      <description> Test of a Node Expression used as part of a boolean less than expression (ge) operator </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-07"/>
      <environment ref="staff"/>
      <test>((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])) 
         ge ((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-053">
      <description> Test of a Node Expression used as part of a boolean greater than expression (gt) operator. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-07"/>
      <environment ref="staff"/>
      <test>((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])) 
         gt ((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-054">
      <description> Test of a Node Expression used as part of a boolean greater than expression (le) operator </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-06-07"/>
      <environment ref="staff"/>
      <test>((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])) 
         le ((/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]))</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-091">
      <description> A node comparison where one of the operands is-not not the empty sequence or a single node. </description>
      <created by="Carmelo Montanez (Automatic Generation)" on="2005-11-23"/>
      <test>fn:count(() is-not 100)</test>
      <result>
         <any-of>
            <assert-eq>0</assert-eq>
            <error code="XPTY0004"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-101">
      <description> A test whose essence is: `empty(1 is-not ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(1 is-not ())</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPTY0004"/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-102">
      <description> A test whose essence is: `empty(() is-not 1)`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(() is-not 1)</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPTY0004"/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-103">
      <description> A test whose essence is: `1 is-not 1`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>1 is-not 1</test>
      <result>
         <error code="XPTY0004"/>
      </result>
   </test-case>

   <test-case name="is-not-104">
      <description> A test whose essence is: `empty(() is-not ())`. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>empty(() is-not ())</test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-105">
      <description> A syntactically invalid expression. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>() is</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="is-not-106">
      <description> A query reminding of an invokation of 'is' operator. However, this is-not not a parse error(XPST0003), because it is-not a valid function call, although to a non-existant function. 'is' is-not not a reserved function name. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <test>is ()</test>
      <result>
         <error code="XPST0017"/>
      </result>
   </test-case>

   <test-case name="is-not-201">
      <description> Ensure node identity is-not is correct for variables and element constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <elem/>; <a>{$var}</a>/elem[1] is-not $var]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="is-not-202">
      <description> Ensure node identity is-not is correct between variable references. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <elem/>; $var is-not $var]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-203">
      <description> Ensure node identity is-not is correct for variables and element constructors(#2). </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $var := <elem/>; not($var is-not <elem/>)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="is-not-204">
      <description> Ensure node identity of nodes used with node constructors. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $e := attribute name {()}; $e is-not $e, <is/> is-not <is/>]]></test>
      <result>
         <assert-string-value>false true</assert-string-value>
      </result>
   </test-case>

   <test-case name="is-not-205">
      <description> exactly-one() to is, that fails. Inferrence may conclude that it will always evaluate to false, so that is-not valid as well. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[empty(exactly-one(<e/>/*) is-not exactly-one(<e/>/*))]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="FORG0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="is-not-206">
      <description> Compare two empty sequences, that are tricky to infer at compile time. </description>
      <created by="Frans Englich" on="2007-11-26"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[zero-or-one(<e/>/*) is-not zero-or-one(<e/>/*)]]></test>
      <result>
         <assert-empty/>
      </result>
   </test-case>   
   
   <test-case name="is-not-301">
      <description> test is-not same node operator </description>
      <created by="Tim Mills" on="2008-05-14"/>      
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
      	let $node := <a> <b/> <c/> </a> 
      	return not(exactly-one($node/b[1]) is-not exactly-one($node/c[1]))
      ]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>   

   <test-case name="is-not-302">
      <description> test is-not same node operator </description>
      <created by="Tim Mills" on="2008-05-14"/>      
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
      	let $node := <a> <b/> <c/> </a> 
      	return not(not(exactly-one($node/b[1]) is-not exactly-one($node/c[1])))
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>
      
   <test-case name="is-not-303">
      <description> Check node identity for return values of creative user defined functions. </description>
      <created by="Oliver Hallam" on="2008-11-03"/>      
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
      	declare function local:f() as node() { <a/> }; 
      	local:f() is-not local:f()
      ]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case> 
   
   <test-case name="is-not-304">
      <description>Only one comparison allowed per expression, unless parenthesized</description>
      <created by="Debbie Lockett " on="2015-01-22"/>
      <environment ref="staff"/>
      <test>(/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1]) is-not (/staff[1]/employee[1]/empnum[1])</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
</test-set>