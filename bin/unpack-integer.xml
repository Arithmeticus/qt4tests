<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="bin-unpack-integer">
  <description>Tests for the bin:unpack-integer function</description>
  
  <environment name="EXPath-binary.numeric">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
    <namespace prefix="binJAVA" uri="java:org.expath.ns.binary.EXPathBinary"/>
    <namespace prefix="err" uri="http://expath.org/ns/binary"/>
    <param name="int.byte" select="5"/>
    <param name="int.short" select="256 * 1 + 5"/>
    <param name="int.3" select="65536 * 1 + 256 * 1 + 5"/>
    <param name="int.int" select="16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="int.long" select="4294967296 * 1 + 16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="double.negative.0" select="xs:base64Binary(xs:hexBinary('8000000000000000'))"/>
    <param name="double.1" select="xs:base64Binary(xs:hexBinary('3ff0000000000000'))"/>
    <param name="double.1.octets" select="(63,240,0,0,0,0,0,0)"/>
    <param name="float.negative.0" select="xs:base64Binary(xs:hexBinary('80000000'))"/>
    <param name="float.1.octets" select="(63,128,0,0)"/>
    <param name="int.byte.B" select="xs:base64Binary(xs:hexBinary('f0'))"/>
    <param name="int.short.B" select="xs:base64Binary(xs:hexBinary('f040'))"/>
    <param name="int.short.B-1" select="xs:base64Binary(xs:hexBinary('ffff'))"/>
  </environment>
  
  <environment name="binary">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
  </environment>
  
  <dependency type="feature" value="binary"/>
  
  <test-case name="EXPath-binary-unpack-integer-001">
    <description>unpack-integer with unknown octet-order</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.byte.B,0,1,'MOST-sign-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-002">
    <description>unpack-integer octet-order comparison - most significant synonyms</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> for $b in bin:unpack-integer($int.short.B,0,2,'most-significant-first')
                return $b eq bin:unpack-integer($int.short.B,0,2,'big-endian') and $b eq
                bin:unpack-integer($int.short.B,0,2,'BE') </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-003">
    <description>unpack-integer octet-order comparison - least significant synonyms</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> for $b in bin:unpack-integer($int.short.B,0,2,'least-significant-first')
                return $b eq bin:unpack-integer($int.short.B,0,2,'little-endian') and $b eq
                bin:unpack-integer($int.short.B,0,2,'LE') </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-004">
    <description>unpack-integer octet-order comparison - least and most differ</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B,0,2,'most-significant-first') eq
                bin:unpack-integer($int.short.B,0,2,'least-significant-first') </test>
    <result>
      <assert-false/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-005">
    <description>unpack-integer with negative offset</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B,-1,2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-006">
    <description>unpack-integer with negative length</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B,0,-2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-007">
    <description>unpack-integer extending beyond data</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B,1,2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-008">
    <description>unpack-integer with zero length </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.byte.B,0,0,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>0</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-009">
    <description>unpack-integer on byte </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.byte.B,0,1,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-16</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-010">
    <description>unpack-integer on short </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B-1,0,2,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-011">
    <description>unpack-integer on short </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
                bin:unpack-integer(xs:base64Binary(xs:hexBinary('0001')),0,2,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-012">
    <description>unpack-integer on short </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B,0,2,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-4032</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-013">
    <description>unpack-integer on short </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-integer($int.short.B-1,0,2,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-014">
    <description>unpack-integer on long </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
                bin:unpack-integer(xs:base64Binary(xs:hexBinary('0000000000000001')),0,8,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-015">
    <description>unpack-integer on long </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
                bin:unpack-integer(xs:base64Binary(xs:hexBinary('ffffffffffffffff')),0,8,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-016">
    <description>unpack unsigned integer, BE, 2 octets</description>
    <created by="Michael Kay after Olivier Xillo" on="2022-09-18"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
      bin:unpack-unsigned-integer(bin:hex('8008'),0,2,'BE')
    </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>32776</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-017">
    <description>unpack unsigned integer, LE, 2 octets</description>
    <created by="Michael Kay after Olivier Xillo" on="2022-09-18"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
      bin:unpack-unsigned-integer(bin:hex('8008'),0,2,'LE')
    </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>2176</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-018">
    <description>unpack signed integer, BE, 2 octets</description>
    <created by="Michael Kay after Olivier Xillo" on="2022-09-18"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
      bin:unpack-integer(bin:hex('8008'),0,2,'BE')
    </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>-32760</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-integer-019">
    <description>unpack signed integer, LE, 2 octets (Saxon bug 5690)</description>
    <created by="Michael Kay after Olivier Xillo" on="2022-09-18"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
      bin:unpack-integer(bin:hex('8008'),0,2,'LE')
    </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>2176</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer1">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("01")), 0, 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer2">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("01")), 0, 1)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer3">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("FF")), 0, 1)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer4">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer5">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("7FFF")), 0, 2)</test>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer6">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("FFFF")), 0, 2)</test>
    <result>
      <assert-eq>-1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer7">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer8">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer9">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer10">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer11">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer12">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer13">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), -1, 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer14">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer15">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-integer16">
    <description>Test for the unpack-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-integer(xs:base64Binary(xs:hexBinary("00")), 0, 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>

  
 
  
</test-set>