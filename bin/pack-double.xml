<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="bin-pack-double">
  <description>Tests for the bin:pack-double function</description>
  
  <environment name="EXPath-binary.numeric">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
    <namespace prefix="binJAVA" uri="java:org.expath.ns.binary.EXPathBinary"/>
    <namespace prefix="err" uri="http://expath.org/ns/binary"/>
    <param name="int.byte" select="5"/>
    <param name="int.short" select="256 * 1 + 5"/>
    <param name="int.3" select="65536 * 1 + 256 * 1 + 5"/>
    <param name="int.int" select="16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="int.long" select="4294967296 * 1 + 16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="double.negative.0" select="xs:base64Binary(xs:hexBinary('8000000000000000'))"/>
    <param name="double.1" select="xs:base64Binary(xs:hexBinary('3ff0000000000000'))"/>
    <param name="double.1.octets" select="(63,240,0,0,0,0,0,0)"/>
    <param name="float.negative.0" select="xs:base64Binary(xs:hexBinary('80000000'))"/>
    <param name="float.1.octets" select="(63,128,0,0)"/>
    <param name="int.byte.B" select="xs:base64Binary(xs:hexBinary('f0'))"/>
    <param name="int.short.B" select="xs:base64Binary(xs:hexBinary('f040'))"/>
    <param name="int.short.B-1" select="xs:base64Binary(xs:hexBinary('ffff'))"/>
  </environment>
  
  <environment name="binary">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
  </environment>
 
  
  <dependency type="feature" value="binary"/>
  
  <test-case name="EXPath-binary-pack-double-001">
    <description>pack-double with unknown octet-order</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:pack-double(xs:double(0.0),'MOST-sign-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-002">
    <description>pack-double with 0.0 - little endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:pack-double(xs:double(0.0)) </test>
    <result>
      <all-of>
        <assert-type>xs:base64Binary</assert-type>
        <assert-eq>xs:base64Binary("AAAAAAAAAAA=")</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-003">
    <description>pack-double with +0.0 - big-endian. Note the difference from IEEE regarding no
        negative zero - in that case the leading octet is 128</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(+xs:double(0.0),'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(0,0,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-004">
    <description>pack-double with -0.0 - big-endian. Note the difference from IEEE regarding no
        negative zero - in that case the leading octet is 128</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(-xs:double(0.0),'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(128,0,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-005">
    <description>pack-double with 1.0 - little-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(xs:double(1.0),'LE')) </test>
    <result>
      <assert-deep-eq>(0,0,0,0,0,0,240,63)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-006">
    <description>pack-double with 1.0 - big-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(xs:double(1.0),'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(63,240,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-007">
    <description>pack-double with 1.0 - big-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:pack-double(xs:double(1.0),'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:base64Binary</assert-type>
        <assert-eq>xs:base64Binary(xs:hexBinary('3ff0000000000000'))</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-008">
    <description>pack-double with 2.0 - big-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(xs:double(2.0),'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(64,0,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-009">
    <description>pack-double with positive infinity - big-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(1 div 0e0,'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(127,240,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-010">
    <description>pack-double with negative infinity - big-endian</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(-1 div 0e0,'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(255,240,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-pack-double-011">
    <description>pack-double with NaN - big-endian. Possibilities of other NaN
        values?</description>
    <created by="John Lumley" on="2013-07-19"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:to-octets(bin:pack-double(number("NaN"),'most-significant-first')) </test>
    <result>
      <assert-deep-eq>(127,248,0,0,0,0,0,0)</assert-deep-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double1">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(0))</test>
    <result>
      <assert-eq>xs:hexBinary("0000000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double2">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double3">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(-1))</test>
    <result>
      <assert-eq>xs:hexBinary("BFF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double4">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(-0e0))</test>
    <result>
      <assert-eq>xs:hexBinary("8000000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double5">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(0e0))</test>
    <result>
      <assert-eq>xs:hexBinary("0000000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double6">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("7FF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double7">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('-INF')))</test>
    <result>
      <assert-eq>xs:hexBinary("FFF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double8">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(xs:double('NaN')))</test>
    <result>
      <assert-eq>xs:hexBinary("7FF8000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double9">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "most-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double10">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "big-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double11">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "BE"))</test>
    <result>
      <assert-eq>xs:hexBinary("3FF0000000000000")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double12">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "least-significant-first"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double13">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "little-endian"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double14">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>xs:hexBinary(bin:pack-double(1, "LE"))</test>
    <result>
      <assert-eq>xs:hexBinary("000000000000F03F")</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-pack-double15">
    <description>Test for the pack-double function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:pack-double(1, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  
  
 
  
</test-set>