<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="bin-unpack-unsigned-integer">
  <description>Tests for the bin:unpack-unsigned-integer function</description>
  
  <environment name="EXPath-binary.numeric">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
    <namespace prefix="binJAVA" uri="java:org.expath.ns.binary.EXPathBinary"/>
    <namespace prefix="err" uri="http://expath.org/ns/binary"/>
    <param name="int.byte" select="5"/>
    <param name="int.short" select="256 * 1 + 5"/>
    <param name="int.3" select="65536 * 1 + 256 * 1 + 5"/>
    <param name="int.int" select="16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="int.long" select="4294967296 * 1 + 16777216 * 1 + 65536 * 1 + 256 * 1 + 5"/>
    <param name="double.negative.0" select="xs:base64Binary(xs:hexBinary('8000000000000000'))"/>
    <param name="double.1" select="xs:base64Binary(xs:hexBinary('3ff0000000000000'))"/>
    <param name="double.1.octets" select="(63,240,0,0,0,0,0,0)"/>
    <param name="float.negative.0" select="xs:base64Binary(xs:hexBinary('80000000'))"/>
    <param name="float.1.octets" select="(63,128,0,0)"/>
    <param name="int.byte.B" select="xs:base64Binary(xs:hexBinary('f0'))"/>
    <param name="int.short.B" select="xs:base64Binary(xs:hexBinary('f040'))"/>
    <param name="int.short.B-1" select="xs:base64Binary(xs:hexBinary('ffff'))"/>
  </environment>
  
  <environment name="binary">
    <namespace prefix="bin" uri="http://expath.org/ns/binary"/>
  </environment>
  
  <dependency type="feature" value="binary"/>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-001">
    <description>unpack-unsigned-integer with unknown octet-order</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.byte.B,0,1,'MOST-sign-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-002">
    <description>unpack-unsigned-integer octet-order comparison - most significant
        synonyms</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> for $b in bin:unpack-unsigned-integer($int.short.B,0,2,'most-significant-first')
                return $b eq bin:unpack-unsigned-integer($int.short.B,0,2,'big-endian') and $b eq
                bin:unpack-unsigned-integer($int.short.B,0,2,'BE') </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-003">
    <description>unpack-unsigned-integer octet-order comparison - least significant
        synonyms</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> for $b in bin:unpack-unsigned-integer($int.short.B,0,2,'least-significant-first')
                return $b eq bin:unpack-unsigned-integer($int.short.B,0,2,'little-endian') and $b eq
                bin:unpack-unsigned-integer($int.short.B,0,2,'LE') </test>
    <result>
      <assert-true/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-004">
    <description>unpack-unsigned-integer octet-order comparison - least and most
        differ</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.short.B,0,2,'most-significant-first') eq
                bin:unpack-unsigned-integer($int.short.B,0,2,'least-significant-first') </test>
    <result>
      <assert-false/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-005">
    <description>unpack-unsigned-integer with negative offset</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.short.B,-1,2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-006">
    <description>unpack-unsigned-integer with negative length</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.short.B,0,-2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-007">
    <description>unpack-unsigned-integer extending beyond data</description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.short.B,1,2,'most-significant-first') </test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-008">
    <description>unpack-unsigned-integer with zero length </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.byte.B,0,0,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>0</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-009">
    <description>unpack-unsigned-integer on byte </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.byte.B,0,1,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>240</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-010">
    <description>unpack-unsigned-integer on short </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test> bin:unpack-unsigned-integer($int.short.B,0,2,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>61504</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-011">
    <description>unpack-unsigned-integer on long </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
                bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary('0000000000000001')),0,8,'most-significant-first') </test>
    <result>
      <all-of>
        <assert-type>xs:integer</assert-type>
        <assert-eq>1</assert-eq>
      </all-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-012">
    <description>unpack-unsigned-integer on long </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <modified by="Michael Kay" on="2021-05-10"
      change="fix bug https://github.com/expath/expath-cg/issues/116"/>
    <environment ref="EXPath-binary.numeric"/>
    <test>
                bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary('ffffffffffffffff')),0,8,'most-significant-first') </test>
    <result>
      <any-of>
        <all-of>
          <assert-type>xs:integer</assert-type>
          <assert-eq>18446744073709551615</assert-eq>
        </all-of>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-013">
    <description>unpack-unsigned-integer on BIG </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <dependency type="limits" value="big_integer" satisfied="true"/>
    <test>
                bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary('0fffffffffffffffffff')),0,10,'most-significant-first') </test>
    <result>
      <any-of>
        <all-of>
          <assert-type>xs:integer</assert-type>
          <assert-eq>75557863725914323419135</assert-eq>
        </all-of>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="EXPath-binary-unpack-unsigned-integer-014">
    <description>unpack-unsigned-integer on BIG </description>
    <created by="John Lumley" on="2013-07-22"/>
    <modified by="John Lumley" on="2014-08-11" change="consistent EXPath naming"/>
    <environment ref="EXPath-binary.numeric"/>
    <dependency type="limits" value="big_integer" satisfied="true"/>
    <test>
                bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary('ffffffffffffffffffff')),0,10,'most-significant-first') </test>
    <result>
      <any-of>
        <all-of>
          <assert-type>xs:integer</assert-type>
          <assert-eq>1208925819614629174706175</assert-eq>
        </all-of>
        <error code="FOAR0002"/>
      </any-of>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer1">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01")), 0, 0)</test>
    <result>
      <assert-eq>0</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer2">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01")), 0, 1)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer3">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FF")), 0, 1)</test>
    <result>
      <assert-eq>255</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer4">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2)</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer5">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("7FFF")), 0, 2)</test>
    <result>
      <assert-eq>32767</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer6">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFF")), 0, 2)</test>
    <result>
      <assert-eq>65535</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer7">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFF")), 0, 4)</test>
    <result>
      <assert-eq>4294967295</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer8">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("01FFFFFFFF")), 0, 5)</test>
    <result>
      <assert-eq>8589934591</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer9">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFFFF")), 0, 5)</test>
    <result>
      <assert-eq>1099511627775</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer10">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("FFFFFFFFFFFF")), 0, 6)</test>
    <result>
      <assert-eq>281474976710655</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer11">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "most-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer12">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "big-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer13">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0001")), 0, 2, "BE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer14">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "least-significant-first")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer15">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "little-endian")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer16">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("0100")), 0, 2, "LE")</test>
    <result>
      <assert-eq>1</assert-eq>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer17">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), -1, 0)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer18">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, -1)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}negative-size"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer19">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, 2)</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}index-out-of-range"/>
    </result>
  </test-case>
  
  <test-case name="bin-unpack-unsigned-integer20">
    <description>Test for the unpack-unsigned-integer function.</description>
    <created by="Christian Grün" on="2013-11-19+01:00"/>
    <environment ref="binary"/>
    <test>bin:unpack-unsigned-integer(xs:base64Binary(xs:hexBinary("00")), 0, 0, "X")</test>
    <result>
      <error code="Q{http://expath.org/ns/binary}unknown-significance-order"/>
    </result>
  </test-case>
  
 
  
</test-set>