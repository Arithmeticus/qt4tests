<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="map-of-pairs"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" covers-40="map-of-pairs">
    <description>Tests for the map:of-pairs function introduced in XPath 4.0</description>
    <link type="spec" document="http://www.w3.org/TR/xpath-functions-30/" idref="func-map-of-pairs"/>
    <dependency type="spec" value="XP40+ XQ40+"/>

    <test-case name="map-of-pairs-001">
        <description>Evaluate the function map:of-pairs() with no argument</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs()</test>
        <result>
            <error code="XPST0017"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-002">
        <description>Evaluate the function map:of-pairs() with argument ()</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(())</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert>map:size($result) = 0</assert>
                <assert-type>map(*)</assert-type>
                <assert-type>map(xs:date, element()+)</assert-type>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-003">
        <description>Evaluate the function map:of-pairs() with single pair as argument</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':12, 'value':42})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert-deep-eq>map{12:42}</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-004">
        <description>Evaluate the function map:of-pairs() with two pairs as argument</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs((map{'key':12, 'value':42}, map{'key':13, 'value':43}))</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert-deep-eq>map{12:42, 13:43}</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-005">
        <description>Evaluate the function map:of-pairs() with more pairs as argument</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(for $i in 1 to 20 return map{'key':$i, 'value':$i+1})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert>map:size($result) eq 20</assert>
                <assert>$result?15 = 16</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-006">
        <description>Default handling of duplicates</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(((1 to 20) ! map{'key':., 'value':.+1}, map{'key':13, 'value':82}, map{'key':13, 'value':11}))</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert>map:size($result) eq 20</assert>
                <assert>deep-equal($result?13, (14, 82, 11))</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-007">
        <description>Custom handling of duplicates</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(((1 to 20) ! map{'key':., 'value':.+1}, 
                            map{'key':13, 'value':82}, 
                            map{'key':13, 'value':11}), 
                            {'duplicates': op('+')})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert>map:size($result) eq 20</assert>
                <assert>$result?13 eq 107</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-008">
        <description>Custom handling of duplicates</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(((1 to 20) ! map{'key':., 'value':.+1}, 
                             map{'key':13, 'value':82}, 
                             map{'key':13, 'value':11}), 
                      {'duplicates':function($a,$b){$b}})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert>map:size($result) eq 20</assert>
                <assert>$result?13 eq 11</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-009">
        <description>Duplicates treated as error</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(((1 to 20) ! map{'key':., 'value':.+1}, map{'key':13, 'value':82}, map{'key':13, 'value':11}), 
            {'duplicates':function($a,$b){error(xs:QName('map:duplicates'))}})</test>
        <result>
            <error code="Q{http://www.w3.org/2005/xpath-functions/map}duplicates"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-010">
        <description>Duplicate NaNs</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(((1 to 20) ! map{'key':., 'value':.+1}, map{'key':xs:float('NaN'), 'value':82}, map{'key':xs:double('NaN'), 'value':11}), 
            {'duplicates':op('+')})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert>map:size($result) eq 21</assert>
                <assert>$result?(xs:double('NaN')) eq 93</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-011">
        <description>Extra fields in the input are ignored</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':12, 'value':42, 'extra':'avocados'})</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert-deep-eq>map{12:42}</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-012">
        <description>The values can be sequences</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs((map{'key':12, 'value':(1 to 10)}, map{'key':12, 'value':(11 to 20)}))</test>
        <result>
            <all-of>
                <assert-count>1</assert-count>
                <assert-type>map(*)</assert-type>
                <assert-deep-eq>map{12:(1 to 20)}</assert-deep-eq>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-013" covers-40="PR1703">
        <description>Order is preserved</description>
        <created by="Michael Kay, Saxonica" on="2025-01-22"/>
        <environment ref="map"/>
        <test>map:of-pairs((map{'key':12, 'value':(1 to 10)}, 
                            map{'key':10, 'value':(11 to 20)},
                            map{'key':08, 'value':(11 to 20)},
                            map{'key':14, 'value':(11 to 20)})) => map:keys()</test>
        <result>
            <assert-deep-eq>12, 10, 8, 14</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-014" covers-40="PR1740">
        <description>duplicates first</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':12, 'value':83}),
                            {'duplicates':'use-first'})</test>
        <result>
            <assert-deep-eq>{12:10}</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-015" covers-40="PR1740">
        <description>duplicates last</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':12, 'value':83}),
                            {'duplicates':'use-last'})</test>
        <result>
            <assert-deep-eq>{12:83}</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-016" covers-40="PR1740">
        <description>duplicates any</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':12, 'value':83}),
                            {'duplicates':'use-last'})</test>
        <result>
            <any-of>
                <assert-deep-eq>{12:10}</assert-deep-eq>
                <assert-deep-eq>{12:83}</assert-deep-eq>
            </any-of>           
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-017" covers-40="PR1740">
        <description>duplicates combine</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':12, 'value':83}),
                            {'duplicates':'combine'})</test>
        <result>
                <assert-deep-eq>{12:(10,83)}</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-018" covers-40="PR1740">
        <description>duplicates reject</description>
        <created by="Michael Kay, Saxonica" on="2025-01-22"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':12, 'value':83}),
                            {'duplicates':'reject'})</test>
        <result>
             <error code="FOJS0003"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-019" covers-40="PR1740">
        <description>order of duplicates</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':14, 'value':11},
                            {'key':33, 'value':33},
                            {'key':12, 'value':83},
                            {'key':14, 'value':84},
                            {'key':10, 'value':77},
                            {'key':10, 'value':71}),
                            {'duplicates':'use-first'})</test>
        <result>
            <all-of>
                <assert-deep-eq>{12:10, 33:33, 14:11, 10:77}</assert-deep-eq>
                <assert>deep-equal(map:keys($result), (12, 14, 33, 10))</assert>
            </all-of>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-020" covers-40="PR1740">
        <description>order of duplicates</description>
        <created by="Michael Kay, Saxonica" on="2025-01-29"/>
        <environment ref="map"/>
        <test>map:of-pairs(({'key':12, 'value':10}, 
                            {'key':14, 'value':11},
                            {'key':33, 'value':33},
                            {'key':12, 'value':83},
                            {'key':14, 'value':84},
                            {'key':10, 'value':77},
                            {'key':10, 'value':71}),
                            {'duplicates':'use-last'})</test>
        <result>
            <all-of>
                <assert-deep-eq>{12:83, 33:33, 14:84, 10:71}</assert-deep-eq>
                <assert>deep-equal(map:keys($result), (12, 14, 33, 10))</assert>
            </all-of>
        </result>
    </test-case>
    
    
    
    
    <test-case name="map-of-pairs-901">
        <description>There must be a 'key'</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'kay':12, 'value':42})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-902">
        <description>There must be a 'value'</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':12, 'volue':42})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-903">
        <description>The key must be a single atomic</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':(), 'value':42})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-904">
        <description>The key must be a single atomic</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':(1,2,3), 'value':42})</test>
        <result>
            <error code="XPTY0004"/>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-905">
        <description>The key must be a single atomic, and is atomized</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <modified by="Michael Kay, Saxonica" on="2024-04-18" change="result should be atomized, issue qtspecs#124"/>
        <environment ref="map"/>
        <test>map:of-pairs(map{'key':[27], 'value':42})</test>
        <result>
            <assert-deep-eq>map{27:42}</assert-deep-eq>
        </result>
    </test-case>
    
    <test-case name="map-of-pairs-906">
        <description>The key must be a single atomic, and is atomized</description>
        <created by="Michael Kay, Saxonica" on="2023-05-07"/>
        <modified by="Michael Kay, Saxonica" on="2024-04-18" change="result should be atomized, issue qtspecs#124"/>
        <environment ref="map"/>
        <test><![CDATA[map:of-pairs(map{'key':parse-xml('<a>26</a>'), 'value':42})]]></test>
        <result>
            <assert-deep-eq>map{'26':42}</assert-deep-eq>
        </result>
    </test-case> 
</test-set>
