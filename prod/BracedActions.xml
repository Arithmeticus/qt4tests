<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-BracedActions" covers-40="PR284 PR1712">
   <description>Tests for the 4.0 conditional IfExpr production with braced actions (if (x) {t} } else { {f})</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-40/"
         idref="doc-xquery40-IfExpr"/>
   <link type="spec" document="XQuery" section-number="3.10" idref="id-conditionals"/>
   <dependency type="spec" value="XQ40+ XP40+"/>
   
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Michael Kay after Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>
   
   <environment name="nw_Customers">
      <source role="." file="AxisStep/nw_Customers.xml">
         <description>Customer name/address file with some non-ASCII characters..</description>
         <created by="Michael Kay after Kuen Siew" on="2003-03-25"/>
      </source>
   </environment>
   
   <environment name="acme_corp">
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Michael Kay after Ravindranath Chennoju" on="2000-01-01"/>
      </source>
   </environment> 
   
   <environment name="xq311A">
      <source role="." file="IfExpr/xq311A.xml">
         <description>Data that fits first example in XQuery 3.11.</description>
         <created by="Michael Kay after David Marston" on="2003-03-25"/>
      </source>
   </environment> 
   

   <test-case name="CondExpr-Braced-002">
      <description> Simple if expression where boolean is a constant true </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (fn:true()) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-003">
      <description> Simple if expression where boolean is a constant false </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (fn:false()) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-004">
      <description> Node set from a path expression as test condition </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//CompanyName) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-005">
      <description> Empty node set from a path expression as test condition </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//NodeDoesNotExist) { <elem1/> } else { <elem2/> }]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-006">
      <description>FileName: CondExpr006  then-expression has another if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<out>{ if (1 != 0) { if (4 != 5) { 1 } else { 2 } } else { 3 }}</out>]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-007">
      <description> else-expr has another if expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[if (//MissingNode) { <elem3/> } 
                     else if (/Root/Customers[@CustomerID='ALFKI']//Country = "Germany") { <elem1/> } 
                     else { <elem2/> }
      ]]></test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-008">
      <description> and-expression in test expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <test>if ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') { "pass" } else { "fail" }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-009">
      <description> or-expression in test expression </description>
      <created by="Michael Kay after Asad Jawahar" on="2003-02-10"/>
      <environment ref="nw_Customers"/>
      <test>if (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') { "pass" } else { "fail" }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-010">
      <description>FileName: CondExpr010  a true expression in if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <test> if (2 != 4) { 1 } else { 0 }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-011">
      <description>FileName: CondExpr011  If expression as argument to a function </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <dependency type="spec" value="XQ40+"/>
      <test>fn:string-length(if (2 != 3) { 'foo' } else { 'expanded-foo' })</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-012">
      <description>FileName: CondExpr012  Adapted from example in spec; test expression is a relational expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <dependency type="spec" value="XQ40+"/>
      <test>if (/doc/widget1/@unit-cost = /doc/widget2/@unit-cost) { /doc/widget1/@name } else { /doc/widget2/@name }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-013">
      <description>FileName: CondExpr013  test expression has another if expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <dependency type="spec" value="XQ40+"/>
      <test> if (if (5 != 3) { fn:true() } else { fn:empty(/doc/widget1) }) { "search" } else { "assume" }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-014">
      <description>FileName: CondExpr014  Two if expressions at same depth in larger expression </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <environment ref="xq311A"/>
      <test> ( if (3 != 2) { 16 } else { 0 } ) + ( if (8 = 7) { 4 } else { 1 }) </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-015">
      <description>FileName: CondExpr015  Two if expressions at same depth in larger expression, each parenthesized </description>
      <created by="Michael Kay after David Marston" on="2003-02-10"/>
      <test> (if (3 != 2) { 16 } else { 0 }) + (if (8 = 7) { 4 } else { 1 }) </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-016">
      <description>FileName: CondExpr016  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <modified by="Michael Kay" on="2020-01-14" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>(//Folder)[1]/File[ if ( ./@name='File00000000000' ) { 2 } else { true() }]/FileName </test>
      <result>
         <error code="XPST0003"/>       
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-017">
      <description>FileName: CondExpr017  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <modified by="Michael Kay" on="2017-03-17" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return if( $file/FileName='File00000000000' ) { $file/FileName } else { data( $file/FileName ) }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-018">
      <description>FileName: CondExpr018  if where branches return different valid types </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return if( $file/FileName='File00000000004' ) { 1 } else { data( $file/FileName ) }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-019">
      <description>FileName: CondExpr019  Test with test expression not contained in ( ... ) </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if //File[1] { "true" } else { "false" }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-020">
      <description>FileName: CondExpr020  Test case where {-expression raises a dynamic error, but test-expression selects } else {-expression so no error is raised }</description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if( false() ) { /Folder[1] cast as xs:double ? } else { 10 cast as xs:double ? }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-021">
      <description>FileName: CondExpr021  Test case where } else {-expression raises a dynamic error, but test-expression selects {-expression so no error is raised </description>
      <created by="Michael Kay after Mike Rorke" on="2005-03-17"/>
      <environment ref="fsx"/>
      <test>if( true() ) { 10 cast as xs:double ? } else { /Folder[1] cast as xs:double ?}</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="CondExpr-Braced-022">
      <description> Test case where {-expression raises a dynamic error, but test-expression selects } else {-expression so no error is raised </description>
      <created by="Michael Kay after Nicolae Brinza" on="2009-04-01"/>
      <test>if (doc-available('nodocument.xml')) { doc('nodocument.xml') } else { 10 cast as xs:double }</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   
   <test-case name="K-CondExpr-Braced-7">
      <description> An if-test which EBV cannot be extracted from. </description>
      <created by="Michael Kay after Frans Englich" on="2007-11-26"/>
      <test>(if(current-time()) { 1 } else { 0 }) eq 1</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   
   
   <test-case name="braced-if-001">
      <description> 4.0 braced if expression </description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() gt xs:date('1900-01-01')) { 12 } else { 42 }
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-002">
      <description> 4.0 braced if expression, no else </description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() gt xs:date('1900-01-01')) { 12 } 
      </test>
      <result>
         <assert-eq>12</assert-eq>
      </result>
   </test-case>
   
   <test-case name="braced-if-003">
      <description> 4.0 braced if expression, no else </description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } 
      </test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="braced-if-004">
      <description> 4.0 braced if expression, empty else </description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } else {}
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-005">
      <description> 4.0 braced if expression, with "else if" </description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } 
      	else if (current-date() lt xs:date('2100-01-01')) { 42 }
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-006">
      <description> 4.0 braced if expression, with "else if" and final "else"</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } 
      	else if (current-date() lt xs:date('1980-01-01')) { 42 }
      	else 39
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-007">
      <description> 4.0 braced if expression, with empty "then"</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { } 
      	else if (current-date() lt xs:date('1980-01-01')) { 42 }
      	else {39}
      </test>
      <result>
          <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-008">
      <description> 4.0 braced if expression, with empty "then"</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() gt xs:date('1900-01-01')) { } 
      	else {39}
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-009">
      <description> 4.0 braced if expression, with missing braces</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } 
      	else if (current-date() lt xs:date('1980-01-01')) then 42 
      	else {39}
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-010">
      <description> 4.0 braced if expression, with missing braces</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (current-date() lt xs:date('1900-01-01')) { 12 } 
      	else if (current-date() lt xs:date('1980-01-01')) then {42} 
      	else 39
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="braced-if-011">
      <description> 4.0 braced if ambiguity (issue 1309)</description>
      <created by="Michael Kay" on="2024-06-27"/>      
      <test>
      	if (math:pi() lt 4) then if (math:e() gt 2) {23} else {}
      </test>
      <result>
         <assert-eq>23</assert-eq>
      </result>
   </test-case>
   
   <test-case name="braced-if-012">
      <description> Mixed braces and non-braces </description>
      <created by="Michael Kay" on="2025-01-21"/>      
      <test>
      	if (math:pi() lt 4) then 22 else if (current-date() eq current-date()) {{}}
      </test>
      <result>
         <assert-eq>22</assert-eq>
      </result>
   </test-case>
   
 
</test-set>