<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-LambdaExpr" covers-40="prod-LambdaExpr">
   <description>Tests for inline functions using arrow notation (4.0 proposal)</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-EQName"/>
   <link type="spec" document="XQuery" section-number="H.0.0.0.0.0.0.0" idref="__HOF"/>
   
   <dependency type="spec" value="XP40+ XQ40+"/>
   <dependency type="feature" value="higherOrderFunctions"/>       

   <test-case name="lambda-fn-001">
      <description>Basic inline function</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <modified by="Michael Kay" on="2023-05-27" change="all tests changed to use revised lambda syntax"/>
      <modified by="Michael Kay" on="2023-07-25" change="all tests changed to use fn{} syntax"/>
      <test>
        let $f := fn($x)  {$x+1} return $f(2)</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-002">
      <description>Zero-arity function</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         let $pi := fn(){3.14159} return $pi()</test>
      <result>
         <assert-eq>3.14159</assert-eq>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-003">
      <description>Arity two function</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         let $add := fn($x, $y){$x + $y} return $add(4, 2)</test>
      <result>
         <assert-eq>6</assert-eq>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-004">
      <description>Function accessing local variables</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         sum(for $i in 1 to 6 return
             let $add := fn($x){$x + $i} return $add(4))</test>
      <result>
         <assert-eq>45</assert-eq>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-005">
      <description>Function accessing context item</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         (1 to 4) !
         (let $add := fn($x)  {$x + .} return $add(4))</test>
      <result>
         <error code="XPDY0002"/>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-006">
      <description>Function with empty body (3.0)</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <dependency type="spec" value="XP30 XQ30"/>
      <test>let $void := fn(){} return $void()</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-007" covers="empty-enclosed-expr">
      <description>Function with empty body (3.1)</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>let $void := fn(){} return $void()</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-008">
      <description>Nested inline functions</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         let $outer := fn($x)  {
            let $inner := fn($y)  {$y + $x}
            return $inner(5)
         }
         return $outer(3)
      </test>
      <result>
         <assert-eq>8</assert-eq>
      </result>
   </test-case>
   
   <test-case name="lambda-fn-009">
      <description>Nested inline functions accessing a "grandfather" variable</description>
      <created by="Michael Kay" on="2020-12-02"/>
      <test>
         let $bonus := 10,
             $outer := fn($x)  {
                let $inner :=  ($y)  {$y + $x + $bonus}
                return $inner(5)
             }
         return $outer(3)
      </test>
      <result>
         <assert-eq>18</assert-eq>
      </result>
   </test-case>
   
 
   
</test-set>
