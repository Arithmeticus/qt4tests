<?xml version="1.0" encoding="utf-8"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-TernaryConditionalExpr">
   <description>Tests for the TernaryConditionalExpr production (A ?? B !! C) (4.0 proposal)</description>
   <link type="spec" document="http://www.w3.org/TR/xquery-30/"
         idref="doc-xquery30-Expr"/>
   <link type="spec" document="XQuery" section-number="3.10" idref="id-conditionals"/>
   
   <dependency type="spec" value="XP40+ XQ40+"/>
   <!--<dependency type="xsd-version" value="1.1"/>-->
   
  
   <environment name="fsx">
      <source role="." file="ForClause/fsx.xml">
         <description>Data about a filesystem represented in XML.</description>
         <created by="Mike Rorke" on="2003-03-25"/>
      </source>    
   </environment>
   
   <environment name="nw_Customers">
      <source role="." file="AxisStep/nw_Customers.xml">
         <description>Customer name/address file with some non-ASCII characters..</description>
         <created by="Kuen Siew" on="2003-03-25"/>
      </source>
   </environment>
   
   <!--<environment name="acme_corp">
      <saxon:property name="http://saxon.sf.net/feature/allowSyntaxExtensions" value="true" xmlns:saxon="http://saxon.sf.net/"/>
      
      <source role="." file="../op/union/acme_corp.xml">
         <description>Source document for Function Declaration tests</description>
         <created by="Michael Kay (after Ravindranath Chennoju)" on="2020-11-20"/>
      </source>
   </environment> -->
   
   <!--<environment name="xq311A">
      <source role="." file="Expr/xq311A.xml">
         <description>Data that fits first example in XQuery 3.11.</description>
         <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      </source>
   </environment> -->
   

   <test-case name="Ternary-CondExpr002">
      <description> Simple  expression where boolean is a constant true </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[ true() or false() ?? <elem1/> !! <elem2/>]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr003">
      <description> Simple  expression where boolean is a constant false </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[ fn:false() ?? <elem1/> !! <elem2/>]]></test>
      <result>
         <assert-xml><![CDATA[<elem2/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr004">
      <description> Node set from a path expression as test condition </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[ //CompanyName ?? <elem1/> !! <elem2/>]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr005">
      <description> Empty node set from a path expression as test condition </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[ //NodeDoesNotExist ?? <elem1/> !! <elem2/>]]></test>
      <result>
         <assert-xml><![CDATA[<elem2/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr006">
      <description>FileName: CondExpr006  ??-expression has another  expression </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<out>{  1 != 0 ??  (4 != 5) ?? 1 !! 2 !! 3 }</out>]]></test>
      <result>
         <assert-xml><![CDATA[<out>1</out>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr007">
      <description> !!-expr has another  expression </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[ //MissingNode ?? <elem3/> !!  (/Root/Customers[@CustomerID='ALFKI']//Country = "Germany") ?? <elem1/> !! <elem2/>]]></test>
      <result>
         <assert-xml><![CDATA[<elem1/>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr008">
      <description> and-expression in test expression </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <test> ( /Root/Customers[1]/@CustomerID = 'ALFKI' and /Root/Customers[1]/FullAddress/City = 'Berlin') ?? "pass" !! "fail"</test>
      <result>
         <assert-string-value>pass</assert-string-value>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr009">
      <description> or-expression in test expression </description>
      <created by="Michael Kay (after Asad Jawahar)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <test> (/Root/Customers[1]/@CustomerID = 'ALFKI' or /Root/Customers[1]/FullAddress/City = 'Non-Existent') ?? "pass" !! "fail"</test>
      <result>
         <assert-string-value>pass</assert-string-value>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr010">
      <description>FileName: CondExpr010  a true expression in  expression </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <test>  2 != 4 ?? 1 !! 0 </test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr011">
      <description>FileName: CondExpr011   expression as argument to a function </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <test>fn:string-length( 2 != 3 ?? 'foo' !! 'expanded-foo')</test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>

   <!--<test-case name="Ternary-CondExpr012">
      <description>FileName: CondExpr012  Adapted from example in spec; test expression is a relational expression </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <environment ref="xq311A"/>
      <test> /doc/widget1/@unit-cost = /doc/widget2/@unit-cost ?? /doc/widget1/@name !! /doc/widget2/@name</test>
      <result>
         <assert-string-value>axolotl</assert-string-value>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr013">
      <description>FileName: CondExpr013  test expression has another  expression </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <environment ref="xq311A"/>
      <test>   (5 != 3 ?? fn:true() !! fn:empty(/doc/widget1)) ?? "search" !! "assume" </test>
      <result>
         <assert-string-value>search</assert-string-value>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr014">
      <description>FileName: CondExpr014  Two  expressions at same depth in larger expression </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <environment ref="xq311A"/>
      <test>   (3 != 2 ?? 16 !! 0 ) + (  8 = 7 ?? 4 !! 1 ) </test>
      <result>
         <assert-eq>17</assert-eq>
      </result>
   </test-case>
-->
   <test-case name="Ternary-CondExpr015">
      <description>FileName: CondExpr015  Two  expressions at same depth in larger expression, each parenthesized </description>
      <created by="Michael Kay (after David Marston)" on="2020-11-20"/>
      <test> ( 3 != 2 ?? 16 !! 0) + ( 8 = 7 ?? 4 !! 1) </test>
      <result>
         <assert-eq>17</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr016">
      <description>FileName: CondExpr016   where branches return dferent valid types </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <modified by="Michael Kay" on="2020-01-14" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>(//Folder)[1]/File[   ./@name='File00000000000'  ?? 2 !! true() ]/FileName</test>
      <result>
         <all-of>
            <assert-count>30</assert-count>
            <assert>$result[1] eq "File00000000001"</assert>
            <assert>$result[2] eq "File00000000002"</assert>
            <assert>$result[3] eq "File00000000003"</assert>
            <assert>$result[4] eq "File00000000004"</assert>
            <assert>$result[5] eq "File00000000005"</assert>
            <assert>$result[6] eq "File00000000006"</assert>           
         </all-of>
         <!--<assert-xml><![CDATA[<FileName>File00000000001</FileName><FileName>File00000000002</FileName>
            <FileName>File00000000003</FileName><FileName>File00000000004</FileName><FileName>File00000000005</FileName>
            <FileName>File00000000006</FileName><FileName>File00000000007</FileName><FileName>File00000000008</FileName>
            <FileName>File00000000009</FileName><FileName>File00000000010</FileName><FileName>File00000000011</FileName>
            <FileName>File00000000012</FileName><FileName>File00000000013</FileName><FileName>File00000000014</FileName>
            <FileName>File00000000015</FileName><FileName>File00000000016</FileName><FileName>File00000000017</FileName>
            <FileName>File00000000018</FileName><FileName>File00000000019</FileName><FileName>File00000000020</FileName>
            <FileName>File00000000021</FileName><FileName>File00000000022</FileName><FileName>File00000000023</FileName>
            <FileName>File00000000024</FileName><FileName>File00000000025</FileName><FileName>File00000000026</FileName>
            <FileName>File00000000027</FileName><FileName>File00000000028</FileName><FileName>File00000000029</FileName>
            <FileName>File00000000030</FileName>]]></assert-xml>-->
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr017">
      <description>FileName: CondExpr017   where branches return dferent valid types </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <modified by="Michael Kay" on="2017-03-17" change="Avoid implicit use of XML serialization for testing the result"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return  $file/FileName='File00000000000'  ?? $file/FileName !! data( $file/FileName )</test>
      <result>
         <all-of>
            <assert-count>31</assert-count>
            <assert>$result[1][. instance of element(FileName)][. = 'File00000000000']</assert>
            <assert>every $r in subsequence($result,2) satisfies $r instance of xs:untypedAtomic</assert>
            <assert>string-join(subsequence($result,2), ' ') eq "File00000000001 File00000000002 File00000000003 File00000000004 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030"</assert>
         </all-of>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr018">
      <description>FileName: CondExpr018   where branches return dferent valid types </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <environment ref="fsx"/>
      <test>for $file in (//Folder)[1]/File return  $file/FileName='File00000000004'  ?? 1 !! data( $file/FileName )</test>
      <result>
         <assert-string-value>File00000000000 File00000000001 File00000000002 File00000000003 1 File00000000005 File00000000006 File00000000007 File00000000008 File00000000009 File00000000010 File00000000011 File00000000012 File00000000013 File00000000014 File00000000015 File00000000016 File00000000017 File00000000018 File00000000019 File00000000020 File00000000021 File00000000022 File00000000023 File00000000024 File00000000025 File00000000026 File00000000027 File00000000028 File00000000029 File00000000030</assert-string-value>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr019">
      <description>FileName: CondExpr019  Test with missing else-part </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <environment ref="fsx"/>
      <test> //File[1] ?? "true" </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr20">
      <description>FileName: CondExpr020  Test case where ??-expression raises a dynamic error, but test-expression selects !!-expression so no error is raised </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <environment ref="fsx"/>
      <test> false()  ?? /Folder[1] cast as xs:double ? !! 10 cast as xs:double ?</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr21">
      <description>FileName: CondExpr021  Test case where !!-expression raises a dynamic error, but test-expression selects ??-expression so no error is raised </description>
      <created by="Michael Kay (after Mike Rorke)" on="2020-11-20"/>
      <environment ref="fsx"/>
      <test> true()  ?? 10 cast as xs:double ? !! /Folder[1] cast as xs:double ?</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-CondExpr022">
      <description> Test case where ??-expression raises a dynamic error, but test-expression selects !!-expression so no error is raised </description>
      <created by="Michael Kay (after Nicolae Brinza)" on="2020-11-20"/>
      <test> doc-available('nodocument.xml') ?? doc('nodocument.xml') !! 10 cast as xs:double</test>
      <result>
         <assert-eq>10</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-1">
      <description> A test whose essence is: `((2) ?? 1 !! 0) eq 1`. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>(2 ?? 1 !! 0) eq 1</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-2">
      <description> A test whose essence is: `(()) ?? false() !! true()`. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>() ?? false() !! true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-3">
      <description> An expression involving the  expression that trigger certain optimization paths in some implementations. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>((1, current-time())[1] treat as xs:integer ?? true() !! false()) eq true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-4">
      <description> An expression involving the  expression that trigger certain optimization paths in some implementations(#2). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>(boolean((1, current-time())[1] treat as xs:integer) ?? true() !! false()) eq true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-5">
      <description> An expression involving the  expression that trigger certain optimization paths in some implementations(#2). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>(1, 2, 3, hours-from-time(current-time()))[1] ?? true() !! false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-6">
      <description> An expression involving the  expression that trigger certain optimization paths in some implementations(#3). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>string((boolean((1, current-time())[1] treat as xs:integer)) ?? true() !! false()) eq "true"</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-7">
      <description> An -test which EBV cannot be extracted from. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>(current-time() ?? 1 !! 0) eq 1</test>
      <result>
         <error code="FORG0006"/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-8">
      <description> An -test which EBV cannot be extracted from. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>1 eq (xs:anyURI("example.com/") ?? 1 !! 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-9">
      <description> An -test which EBV cannot be extracted from. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>0 eq (xs:anyURI("") ?? 1 !! 0)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-10">
      <description> An -test applied on fn:count(). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>count((1, 2, 3, current-time(), 4)) ?? true() !! 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-11">
      <description> An -test applied on fn:count() combined with fn:not(). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>not(count(remove((1, 2, 3, current-time()), 1))) ?? 3 !! true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K-CondExpr-12">
      <description> -?? clause combined with fn:boolean(). </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>boolean((1, 2, 3, current-time())[1] treat as xs:integer) ?? true() !! 4</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="Ternary-K2-CondExpr-1">
      <description> An expression that can be rewritten to the empty sequence, no matter the test branch. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test><![CDATA[empty(<e>{current-time()}</e> ?? () !! ())]]></test>
      <result>
         <any-of>
            <assert-true/>
            <error code="XPST0005"/>
         </any-of>
      </result>
   </test-case>

   <test-case name="Ternary-K2-CondExpr-2">
      <description> An expression that can be simplied to any of the result branches, no matter the test branch. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test><![CDATA[empty(<e>{current-time()}</e> ?? 1 !! 1)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="Ternary-K2-CondExpr-3">
      <description> It is ok to name a function 'unordered'. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>declare default function namespace "http://www.example.com/"; declare function unordered() { 1 }; unordered()</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-K2-CondExpr-4">
      <description> Extract the EBV from a node sequence. Sorting and deduplication isn't necessary in that case. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <environment ref="nw_Customers"/>
      <test> ( /Root/Customers[@CustomerID]/ancestor::*) ?? "pass" !! "fail"</test>
      <result>
         <assert-eq>"pass"</assert-eq>
      </result>
   </test-case>

   <test-case name="Ternary-K2-CondExpr-5">
      <description> There is no unary exclamation mark operator in XQuery. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test>!true() ?? 2 !! 3</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>

 

   <test-case name="Ternary-K2-CondExpr-7">
      <description> Use a set of expressions that trigger a bug in some parsers. </description>
      <created by="Michael Kay (after Frans Englich)" on="2020-11-20"/>
      <test> (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !!  (1) ?? 1 !! ()</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="Ternary-cbcl-condexpr-001">
      <description> Tests (exists($x)) ?? f($x) !! () optimization </description>
      <created by="Michael Kay (after Nick Jones)" on="2020-11-20"/> 
      <test>
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return exists($x) ?? xs:string($x) !! ()
      </test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="Ternary-cbcl-condexpr-002">
      <description> tests (empty($x)) ?? () !! f($x) optimization </description>
      <created by="Michael Kay (after Nick Jones)" on="2020-11-20"/>      
      <test>
      	let $x := zero-or-one((1 to 10)[. div 2 = 2]) 
      	return empty($x) ?? () !! xs:string($x)
      </test>
      <result>
         <assert-string-value>4</assert-string-value>
      </result>
   </test-case>
</test-set>