<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-AxisStep.J">
   <description>Tests for axis steps with JNodes</description>
   
   <test-case name="JAxes-001">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in))
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 0,
            "ancestor-or-self": 1,
            "child": 1,
            "descendant": 20,
            "descendant-or-self": 21,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 0,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-002">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-003">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/A)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-004">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/B)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-005">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/C)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-006">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/D)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-007">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/E)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-008">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/F)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-009">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/G)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-010">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/G/p)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-011">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jnode($in)/root/G/q)
      </test>
      <result> <!-- TBA -->
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
</test-set>