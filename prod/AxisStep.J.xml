<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog" name="prod-AxisStep.J">
   <description>Tests for axis steps with JNodes</description>
   
   <test-case name="JAxes-001">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in))
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 0,
            "ancestor-or-self": 1,
            "child": 1,
            "descendant": 20,
            "descendant-or-self": 21,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 0,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-002">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-003">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/A)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 3,
            "descendant": 3,
            "descendant-or-self": 4,
            "following": 15,
            "following-or-self": 16,
            "following-sibling": 6,
            "following-sibling-or-self": 7,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-004">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/B)
      </test>
      <result> 
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 3,
            "descendant": 3,
            "descendant-or-self": 4,
            "following": 11,
            "following-or-self": 12,
            "following-sibling": 5,
            "following-sibling-or-self": 6,
            "parent": 1,
            "preceding": 4,
            "preceding-or-self": 5,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-005">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/C)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 10,
            "following-or-self": 11,
            "following-sibling": 4,
            "following-sibling-or-self": 5,
            "parent": 1,
            "preceding": 8,
            "preceding-or-self": 9,
            "preceding-sibling": 2,
            "preceding-sibling-or-self": 3,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-006">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/D)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 9,
            "following-or-self": 10,
            "following-sibling": 3,
            "following-sibling-or-self": 4,
            "parent": 1,
            "preceding": 9,
            "preceding-or-self": 10,
            "preceding-sibling": 3,
            "preceding-sibling-or-self": 4,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-007">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/E)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 8,
            "following-or-self": 9,
            "following-sibling": 2,
            "following-sibling-or-self": 3,
            "parent": 1,
            "preceding": 10,
            "preceding-or-self": 11,
            "preceding-sibling": 4,
            "preceding-sibling-or-self": 5,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-008">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/F)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 7,
            "following-or-self": 8,
            "following-sibling": 1,
            "following-sibling-or-self": 2,
            "parent": 1,
            "preceding": 11,
            "preceding-or-self": 12,
            "preceding-sibling": 5,
            "preceding-sibling-or-self": 6,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-009">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/G)
      </test>
      <result> 
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 2,
            "descendant": 6,
            "descendant-or-self": 7,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 12,
            "preceding-or-self": 13,
            "preceding-sibling": 6,
            "preceding-sibling-or-self": 7,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-010">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/G/p)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 2,
            "descendant": 2,
            "descendant-or-self": 3,
            "following": 3,
            "following-or-self": 4,
            "following-sibling": 1,
            "following-sibling-or-self": 2,
            "parent": 1,
            "preceding": 12,
            "preceding-or-self": 13,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-011">
      <description> Evaluate all axes in JSON document with map as root </description>
      <created by="Michael Kay" on="2025-07-15"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         return ax:histogram(jtree($in)/root/G/q)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 2,
            "descendant": 2,
            "descendant-or-self": 3,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 15,
            "preceding-or-self": 16,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-021">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in))
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 0,
            "ancestor-or-self": 1,
            "child": 1,
            "descendant": 22,
            "descendant-or-self": 23,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 0,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-022">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 7,
            "descendant": 19,
            "descendant-or-self": 20,
            "following": 1,
            "following-or-self": 2,
            "following-sibling": 1,
            "following-sibling-or-self": 2,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-023">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/A)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 3,
            "descendant": 3,
            "descendant-or-self": 4,
            "following": 16,
            "following-or-self": 17,
            "following-sibling": 6,
            "following-sibling-or-self": 7,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-024">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/B)
      </test>
      <result> 
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 3,
            "descendant": 3,
            "descendant-or-self": 4,
            "following": 12,
            "following-or-self": 13,
            "following-sibling": 5,
            "following-sibling-or-self": 6,
            "parent": 1,
            "preceding": 4,
            "preceding-or-self": 5,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-025">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/C)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 11,
            "following-or-self": 12,
            "following-sibling": 4,
            "following-sibling-or-self": 5,
            "parent": 1,
            "preceding": 8,
            "preceding-or-self": 9,
            "preceding-sibling": 2,
            "preceding-sibling-or-self": 3,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-026">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/D)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 10,
            "following-or-self": 11,
            "following-sibling": 3,
            "following-sibling-or-self": 4,
            "parent": 1,
            "preceding": 9,
            "preceding-or-self": 10,
            "preceding-sibling": 3,
            "preceding-sibling-or-self": 4,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-027">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/E)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 9,
            "following-or-self": 10,
            "following-sibling": 2,
            "following-sibling-or-self": 3,
            "parent": 1,
            "preceding": 10,
            "preceding-or-self": 11,
            "preceding-sibling": 4,
            "preceding-sibling-or-self": 5,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-028">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/F)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 8,
            "following-or-self": 9,
            "following-sibling": 1,
            "following-sibling-or-self": 2,
            "parent": 1,
            "preceding": 11,
            "preceding-or-self": 12,
            "preceding-sibling": 5,
            "preceding-sibling-or-self": 6,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-029">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/G)
      </test>
      <result> 
         <assert-deep-eq>{
            "ancestor": 3,
            "ancestor-or-self": 4,
            "child": 2,
            "descendant": 6,
            "descendant-or-self": 7,
            "following": 1,
            "following-or-self": 2,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 12,
            "preceding-or-self": 13,
            "preceding-sibling": 6,
            "preceding-sibling-or-self": 7,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-030">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/G/p)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 4,
            "ancestor-or-self": 5,
            "child": 2,
            "descendant": 2,
            "descendant-or-self": 3,
            "following": 4,
            "following-or-self": 5,
            "following-sibling": 1,
            "following-sibling-or-self": 2,
            "parent": 1,
            "preceding": 12,
            "preceding-or-self": 13,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-031">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root/G/q)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 4,
            "ancestor-or-self": 5,
            "child": 2,
            "descendant": 2,
            "descendant-or-self": 3,
            "following": 1,
            "following-or-self": 2,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 15,
            "preceding-or-self": 16,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-032">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 1,
            "ancestor-or-self": 2,
            "child": 2,
            "descendant": 21,
            "descendant-or-self": 22,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 0,
            "preceding-or-self": 1,
            "preceding-sibling": 0,
            "preceding-sibling-or-self": 1,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-033">
      <description> Evaluate all axes in JSON document with array as root </description>
      <created by="Michael Kay" on="2025-08-02"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-array.json")
         return ax:histogram(jtree($in)/*/root2)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 0,
            "following-or-self": 1,
            "following-sibling": 0,
            "following-sibling-or-self": 1,
            "parent": 1,
            "preceding": 20,
            "preceding-or-self": 21,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-041">
      <description> Evaluate all axes in JSON document, modified using map:put() </description>
      <created by="Michael Kay" on="2025-08-20"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         let $rootPlus := jtree($in)/root => jnode-content() => map:put("H", [1, 2, (3, 4)])
         let $inPlus := { "root": $rootPlus }
         return ax:histogram(jtree($inPlus)/root/C)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 14,
            "following-or-self": 15,
            "following-sibling": 5,
            "following-sibling-or-self": 6,
            "parent": 1,
            "preceding": 8,
            "preceding-or-self": 9,
            "preceding-sibling": 2,
            "preceding-sibling-or-self": 3,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-042">
      <description> Evaluate all axes in JSON document, modified using map:remove() and map:put() </description>
      <created by="Michael Kay" on="2025-08-20"/>
      <dependency type="spec" value="XQ40+"/>
      <module uri="http://www.w3.org/TestModules/AxisStepJ/Histogram" file="AxisStep.J/histogram.xq"/>
      <test>
         import module namespace ax="http://www.w3.org/TestModules/AxisStepJ/Histogram";
         let $in := json-doc("AxisStep.J/json-map.json")
         let $rootPlus := jtree($in)/root => jnode-content() => map:remove("A") => map:put("H", [1, 2, (3, 4)]) 
         let $inPlus := { "root": $rootPlus }
         return ax:histogram(jtree($inPlus)/root/C)
      </test>
      <result>
         <assert-deep-eq>{
            "ancestor": 2,
            "ancestor-or-self": 3,
            "child": 0,
            "descendant": 0,
            "descendant-or-self": 1,
            "following": 14,
            "following-or-self": 15,
            "following-sibling": 5,
            "following-sibling-or-self": 6,
            "parent": 1,
            "preceding": 4,
            "preceding-or-self": 5,
            "preceding-sibling": 1,
            "preceding-sibling-or-self": 2,
            "self": 1
            }
         </assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-201">
      <description> Use get() with maps: strings, implicit child axis </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/get("z") =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-202">
      <description> Use get() with maps: strings, implicit child axis, multiple keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/get(("z", "x")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-203">
      <description> Use get() with maps: strings, implicit child axis, absent keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/get(("z", "x", "w")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-204">
      <description> Use get() with maps: strings, explicit child axis </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/child::get("z") =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-205">
      <description> Use get() with maps: strings, explicit child axis, multiple keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/child::get(("z", "x")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-206">
      <description> Use get() with maps: strings, explicit child axis, absent keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/child::get(("z", "x", "w")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-207">
      <description> Use get() with maps: strings, descendant axis </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/descendant::get("z") =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-208">
      <description> Use get() with maps: strings, descendant child axis, multiple keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map/descendant::get(("z", "x")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-209">
      <description> Use get() with maps: strings, descendant axis, absent keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3, "*":{"x": 42}}
         return $map/descendant::get(("z", "x", "w")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3, 42</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-210">
      <description> Use get() with maps: strings, // operator </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map//get("z") =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-211">
      <description> Use get() with maps: strings, // operator, multiple keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3}
         return $map//get(("z", "x")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-212">
      <description> Use get() with maps: strings, // operator, absent keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x":1, "y":2, "z":3, "*":{"x": 42}}
         return $map//get(("z", "x", "w")) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3, 42</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-213">
      <description> Use get() with maps: integer keys, implicit child axis </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {11:1, 12:2, 13:3}
         return $map/get(13) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-214">
      <description> Use get() with maps: integer keys, implicit child axis, multiple keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {11:1, 12:2, 13:3}
         return $map/get((13, 11)) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-215">
      <description> Use get() with maps: integer keys, explicit child axis, absent keys </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {11:1, 12:2, 13:3}
         let $thirteen := 13
         let $eleven := $thirteen - 2
         return $map/child::get(($thirteen, $eleven, -1)) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>1, 3</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-216">
      <description> Use get() with maps: QName keys, // operator </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {#xml:space: true(), #xml:id: true(), #xml:base: false()}
         return $map//get(#xml:base, #xml:space)/{'k':jnode-selector(), 'v':jnode-content()}
      </test>
      <result>
         <assert-deep-eq>{'k':#xml:space, 'v':true()}, {'k':#xml:base, 'v':false()}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-217">
      <description> Use get() with maps: QName keys, // operator </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {#xml:space: true(), #xml:id: true(), #xml:base: false()}
         return $map//get(#xml:base, #xml:space)/{'k':jnode-selector(), 'v':jnode-content()}
      </test>
      <result>
         <assert-deep-eq>{'k':#xml:space, 'v':true()}, {'k':#xml:base, 'v':false()}</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-250">
      <description> Use get() with arrays </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := ["x", "y", "z"]
         return $array/get(2) => jnode-content()
      </test>
      <result>
         <assert-deep-eq>"y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-251">
      <description> Use get() with arrays </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := ["x", "y", "z"]
         return $array/child::get(2, 1) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>"x", "y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-252">
      <description> Use get() with arrays </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := ["x", "y", "z"]
         return $array//get(2, 1, 0) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>"x", "y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-253">
      <description> Use get() with arrays </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := ["x", "y", "z", ["a", "b", "c"]]
         return $array/descendant::get(2, 1, 0) =!> jnode-content()
      </test>
      <result>
         <assert-deep-eq>"x", "y", "a", "b"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-254">
      <description> Use get() with arrays </description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := ["x", "y", "z", ["a", "b", "c"]]
         return $array/descendant::get("a") =!> jnode-content()
      </test>
      <result>
         <assert-empty/>
      </result>
   </test-case>
   
   <test-case name="JAxes-300">
      <description> Use type tests - implicit child axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": 11e0, "x": 12, "y": 12.1, "z": 12e0}
         return $map/type(xs:double) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-301">
      <description> Use type tests - explicit child axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": 11e0, "x": 12, "y": 12.1, "z": 12e0}
         return $map/child::type(xs:double) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-302">
      <description> Use type tests - explicit descendant axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": 11e0, "x": 12, "y": 12.1, "z": 12e0, "*": {"w": 15e0}}
         return $map/descendant::type(xs:double) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z", "w"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-303">
      <description> Use type tests - // operator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": 11e0, "x": 12, "y": 12.1, "z": 12e0, "*": {"w": 15e0}}
         return $map//type(xs:double) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z", "w"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-304">
      <description> Use type test with occurrence indicator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"v": (), "w": 11e0, "x": 12, "y": 12.1, "z": 12e0, "*": {"w": (15e0, 16e0)}}
         return $map//type(xs:double*) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"v", "w", "z", "w"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-310">
      <description> Use record type tests - implicit child axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"}}
         return $map/record(A as xs:double, B as xs:string) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-311">
      <description> Use record type tests - explicit child axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"}}
         return $map/child::record(A as xs:double, B as xs:string) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-312">
      <description> Use record type tests - explicit descendant axis</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"}}
         return $map/descendant::record(A as xs:double, B as xs:string) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-313">
      <description> Use record type tests - // operator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"},
                      "*": {"A":12e0, "B":{"A":12e0, "B":"B"}}}
         return $map//record(A as xs:double, *) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z", "*", "B"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-314">
      <description> Use record type tests - // operator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"},
                      "*": {"A":12e0, "B":({"A":12e0, "B":"B"}, {"A":22e0, "B":"BB"})}}
         return $map//record(A as xs:double, *) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"w", "z", "*"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-315">
      <description> Use record type tests - occurrence indicator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"v": (),
                      "w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"}}
         return $map/child::type(record(A as xs:double, B as xs:string)?) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"v", "w", "z"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-316">
      <description> Use record type tests - invalid occurrence indicator</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"v": (),
                      "w": {"A":11e0, "B":"B"}, 
                      "x": {"A":12, "B":"B"}, 
                      "y": {"A":12.1, "B":"B"}, 
                      "z": {"A":12e0, "B":"B"}}
         return $map/child::record(A as xs:double, B as xs:string)? =!> jnode-selector()
      </test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="JAxes-320">
      <description> Use type tests - enum</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x": "red", "y": "green", "z": "blue"}
         return $map/enum("green") =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-321">
      <description> Use type tests - enum</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x": "red", "y": "green", "z": "blue"}
         return $map/enum("green", "red") =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"x", "y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-322">
      <description> Use type tests - enum</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x": "red", "y": "green", "z": "blue"}
         return $map/type(enum("green", "red")) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"x", "y"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-323">
      <description> Use type tests - enum</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $map := {"x": "red", "y": "green", "z": "blue", "*": ()}
         return $map/type(enum("green", "red")?) =!> jnode-selector()
      </test>
      <result>
         <assert-deep-eq>"x", "y", "*"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-324">
      <description> Use type tests - array with record(enum)</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test>
         let $array := [{"x": "red", "y": "green"}, {"x": "pink", "y": "teal"}]
         return $array/record(x as enum("red"), *)/y => string()
      </test>
      <result>
         <assert-deep-eq>"green"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-325">
      <description> Use type tests - array with XNode</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $xml := parse-xml("<doc><p id='a17'/><p id='a18'/></doc>")
         let $array := [$xml//p[@id='a17'], $xml//@id[.='a18']]
         return $array/type(element(p)) -> jnode-content() -> @id -> string()
      ]]></test>
      <result>
         <assert-deep-eq>"a17"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-326">
      <description> Use type tests - array with XNode</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $xml := parse-xml("<doc><p id='a17'/><p id='a18'/></doc>")
         let $array := [$xml//p[@id='a17'], $xml//@id[.='a18']]
         return $array/type(attribute(id)) => string()
      ]]></test>
      <result>
         <assert-deep-eq>"a18"</assert-deep-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-327">
      <description> Use type tests - item()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, xs:date('2002-02-02'), #xml:space, contains#2, {}]
         return count($array/item())
      ]]></test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-328">
      <description> Use type tests - child::item()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, xs:date('2002-02-02'), #xml:space, contains#2, {}]
         return count($array/child::item())
      ]]></test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-329">
      <description> Use type tests - type(item()?)</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, (), xs:date('2002-02-02'), #xml:space, contains#2, (3,4,5)]
         return count($array/type(item()?))
      ]]></test>
      <result>
         <assert-eq>5</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-330">
      <description> Use type tests - jnode()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, xs:date('2002-02-02'), #xml:space, contains#2, {}, jtree([])]
         return count($array/jnode())
      ]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-331">
      <description> Use type tests - child::jnode()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, xs:date('2002-02-02'), #xml:space, contains#2, {}]
         return count($array/child::jnode(xs:date))
      ]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-332">
      <description> Use type tests - gnode()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, xs:date('2002-02-02'), #xml:space, contains#2, {}]
         return count($array/gnode())
      ]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-333">
      <description> Use type tests - child::gnode()</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, (), jtree([]), parse-xml("<doc/>"), ([], [])]
         return count($array/child::gnode())
      ]]></test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>
   
   <test-case name="JAxes-334">
      <description> Use type tests - child::type(gnode()?)</description>
      <created by="Michael Kay" on="2025-09-01"/>
      <dependency type="spec" value="XP40+ XQ40+"/>
      <test><![CDATA[
         let $array := [1, (), jtree([]), parse-xml("<doc/>"), ([], [])]
         return count($array/child::type(gnode()?))
      ]]></test>
      <result>
         <assert-eq>3</assert-eq>
      </result>
   </test-case>
   
 
</test-set>