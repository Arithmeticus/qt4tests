<?xml version="1.0" encoding="us-ascii"?>
<test-set xmlns="http://www.w3.org/2010/09/qt-fots-catalog"
          name="prod-AxisStep.preceding-sibling-or-self"
          covers-40="PR1532">
   <description>Tests for the AxisStep.preceding-sibling-or-self axis (4.0)</description>
 
   <dependency type="spec" value="XP40+ XQ40+"/>

   <test-case name="preceding-sibling-or-self-1">
      <description> Evaluation of the preceding-sibling-or-self axis for which the context node is not a node. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <test>(200)/preceding-sibling-or-self::*</test>
      <result>
         <error code="XPTY0019"/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-2">
      <description> Evaluation of the preceding-sibling-or-self axis for which the given node does not exists. Uses fn:count to avoid empty file. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>fn:count(/works/employee[1]/preceding-sibling-or-self::noSuchNode)</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-3">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "is" expression. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>head(/works/employee[2]/preceding-sibling-or-self::employee) is head(/works/employee[1])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-4">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "is" expression (return true). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>head(/works[1]/employee[2]/preceding-sibling-or-self::employee) is head(/works[1]/employee[2])</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-5">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "node before" expression (return true). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[head(/works[1]/employee[2]/preceding-sibling-or-self::employee) << head(/works[1]/employee[3])]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-6">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "node before" expression and both operands are the same (return false). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[head(/works[1]/employee[2]/preceding-sibling-or-self::employee) << head(/works[1]/employee[2]/preceding-sibling-or-self::employee)]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-7">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "node before" expression both operands are differents (return false). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[head(/works[1]/employee[2]/preceding-sibling-or-self::employee) << head(/works[1])]]></test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-8">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of a "node after" expression (returns true). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>exactly-one(/works[1]/employee[13]) &gt;&gt; exactly-one(/works[1]/employee[12]/preceding-sibling-or-self::employee[1])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-9">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "node after" expression with both operands the same (returns false). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>head(/works[1]/employee[2]/preceding-sibling-or-self::employee) &gt;&gt; head(/works[1]/employee[2]/preceding-sibling-or-self::employee)</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-10">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "node after" expression with different operands (returns false). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>head(/works[1]/employee[13]) &gt;&gt; head(/works[1]/employee[2]/preceding-sibling-or-self::employee)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-11">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "union " operation. Both operands are the same. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>string-join(/works/employee[12]/*/day[2]/preceding-sibling-or-self::day | /works/employee[12]/*/day[2]/preceding-sibling-or-self::day)</test>
      <result>
         <assert-eq>"MondayTuesday"</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-12">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "union" operation. Both operands are different </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works/employee[12]/*/day[2]/preceding-sibling-or-self::day) | (/works/employee[12]/*/day[2])</test>
      <result>
         <assert-xml><![CDATA[<day>Monday</day><day>Tuesday</day>]]></assert-xml>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-13">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "intersect" operation. Both operands are the same. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>string-join(/works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling-or-self::day intersect /works[1]/employee[12]/overtime[1]/day[2]/preceding-sibling-or-self::day)</test>
      <result>
         <assert-eq>"MondayTuesday"</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-14">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "except" operation. Both operands are the same. Uses fn:count to avoid empty file </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>fn:count((/works[1]/employee[12]/preceding-sibling-or-self::employee) except (/works[1]/employee[12]/preceding-sibling-or-self::employee))</test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-15">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of an "except" operation. Both operands are different. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/overtime/day) except (/works[1]/employee[12]/overtime/day[2]/preceding-sibling-or-self::day)</test>
      <result>
         <assert-empty/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-16">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of a boolean expression ("and" and fn:true(). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling-or-self::employee) and fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-17">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of a boolean expression ("and" and fn:false()). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling-or-self::employee) and fn:false()</test>
      <result>
         <assert-false/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-18">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of a boolean expression ("or" and fn:true()). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling-or-self::employee) or fn:true()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-19">
      <description> Evaluation of the preceding-sibling-or-self axis that is part of a boolean expression ("or" and fn:false()). </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>(/works[1]/employee[12]/preceding-sibling-or-self::employee) or fn:false()</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-20">
      <description> Evaluation of the preceding-sibling-or-self axis that used as part of the deep-equal-function. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>fn:deep-equal(/works[1]/employee[12]/preceding-sibling-or-self::employee,/works[1]/employee[12]/preceding-sibling-or-self::employee)</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-21">
      <description> Evaluation of the preceding-sibling-or-self axis used together with a newly constructed element. Uses fn:count to avoid empty file. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[let $var := <anElement>Some Content</anElement> return fn:count($var/preceding-sibling-or-self::*)]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-22">
      <description> Evaluate "preceding-sibling-or-self::employee[fn:position() = 1]". Selects the previous employee sibling of the context node. </description>
      <created by="Carmelo Montanez" on="2005-07-11"/>
      <environment ref="works-mod"/>
      <test>for $h in (/works/employee[1]) return $h/preceding-sibling-or-self::employee[fn:position() = 1]</test>
      <result>
         <assert-xml><![CDATA[<employee name="Jane Doe 1" gender="female">
   <empnum>E1</empnum>
   <pnum>P1</pnum>
   <hours>40</hours>
  </employee>]]></assert-xml>
      </result>
   </test-case>
   
   <test-case name="preceding-sibling-or-self-23">
      <description> Axis direction </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>head(/works[1]/employee[2]/preceding-sibling-or-self::employee[1]) is head(/works[1]/employee[2])</test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-31">
      <description> Iterate from the root node. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[
         declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; 
         count(root($i)/preceding-sibling-or-self::node())
      ]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-32">
      <description> Iterate from the root node. </description>
      <created by="Michael Kay" on="2024-10-29"/>>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; empty(root($i)/preceding::node())]]></test>
      <result>
         <assert-true/>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-33">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)/preceding::node())]]></test>
      <result>
         <assert-eq>0</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-34">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; count(root($i)//leaf/preceding::node())]]></test>
      <result>
         <assert-eq>2</assert-eq>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-35">
      <description> Apply fn:count() to the result of axis preceding. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[declare variable $i := <root> <child> <preceding2/> <child2> <preceding1/> <child3> <leaf/> </child3> <following/> </child2> <following/> </child> <following/> </root>; root($i)//count(preceding-sibling-or-self::node())]]></test>
      <result>
         <assert-string-value>1 1 1 2 1 2 1 3 3 2</assert-string-value>
      </result>
   </test-case>

   <test-case name="preceding-sibling-or-self-36">
      <description> Apply the preceding-sibling-or-self axis to an attribute node. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<foo a='1' b='2' c='3'> <bar>4</bar> <bar>5</bar> <bar>6</bar> </foo>/@c/preceding-sibling-or-self::node()]]></test>
      <result>
         <assert-string-value>3</assert-string-value>
      </result>
   </test-case>
   
   <test-case name="preceding-sibling-or-self-37">
      <description> Apply the preceding-sibling-or-self axis to elements where the context node isn't selected. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <dependency type="spec" value="XQ40+"/>
      <test><![CDATA[<foo>text<b/><!--comment--></foo>//comment()/preceding-sibling-or-self::b => count()]]></test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="preceding-sibling-or-self-38">
      <description> Evaluation of the preceding-sibling-or-self axis for a document node. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>fn:count(root(/works)/preceding-sibling-or-self::node())</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
   
   <test-case name="preceding-sibling-or-self-39">
      <description> Axis not allowed in 3.1. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <dependency type="spec" value="XP30 XP31 XQ30 XQ31"/>
      <test>fn:count(root(/works)/preceding-sibling-or-self::node())</test>
      <result>
         <error code="XPST0003"/>
      </result>
   </test-case>
   
   <test-case name="preceding-sibling-or-self-40">
      <description> Evaluation of the preceding-sibling-or-self axis for an only-child text node. </description>
      <created by="Michael Kay" on="2024-10-29"/>
      <environment ref="works-mod"/>
      <test>fn:count((//empnum/text())[1]/preceding-sibling-or-self::node())</test>
      <result>
         <assert-eq>1</assert-eq>
      </result>
   </test-case>
</test-set>